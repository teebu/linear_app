(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Linear = {}));
}(this, (function (exports) { 'use strict';

    (function() {
        const env = {"npm_package_name":"@linear/sdk","npm_package_version":"1.8.4"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    /**
     * The error types returned by the Linear API
     */
    exports.LinearErrorType = void 0;
    (function (LinearErrorType) {
        LinearErrorType["FeatureNotAccessible"] = "FeatureNotAccessible";
        LinearErrorType["InvalidInput"] = "InvalidInput";
        LinearErrorType["Ratelimited"] = "Ratelimited";
        LinearErrorType["NetworkError"] = "NetworkError";
        LinearErrorType["AuthenticationError"] = "AuthenticationError";
        LinearErrorType["Forbidden"] = "Forbidden";
        LinearErrorType["BootstrapError"] = "BootstrapError";
        LinearErrorType["Unknown"] = "Unknown";
        LinearErrorType["InternalError"] = "InternalError";
        LinearErrorType["Other"] = "Other";
        LinearErrorType["UserError"] = "UserError";
        LinearErrorType["GraphqlError"] = "GraphqlError";
        LinearErrorType["LockTimeout"] = "LockTimeout";
    })(exports.LinearErrorType || (exports.LinearErrorType = {}));

    /**
     * Serialize an object into an encoded user agent string
     *
     * @param seed user agent properties to serialize
     * @returns the serialized user agent string
     */
    function serializeUserAgent(seed) {
        return Object.entries(seed).reduce((acc, [key, value]) => {
            const encoded = `${key}@${encodeURIComponent(value)}`;
            return acc ? `${acc} ${encoded}` : encoded;
        }, "");
    }
    /**
     * Capitalize the first character of a string
     *
     * @param str the string to capitalize
     */
    function capitalize(str) {
        return str ? `${str.charAt(0).toUpperCase()}${str.slice(1)}` : undefined;
    }
    /**
     * Type safe check for non defined values
     */
    function nonNullable(value) {
        return value !== null && value !== undefined;
    }
    /**
     * Return the key matching the value in an object
     */
    function getKeyByValue(obj, value) {
        const keys = Object.keys(obj);
        return keys.find(key => obj[key] === value);
    }

    /**
     * A map between the Linear API string type and the LinearErrorType enum
     */
    const errorMap = {
        [exports.LinearErrorType.FeatureNotAccessible]: "feature not accessible",
        [exports.LinearErrorType.InvalidInput]: "invalid input",
        [exports.LinearErrorType.Ratelimited]: "ratelimited",
        [exports.LinearErrorType.NetworkError]: "network error",
        [exports.LinearErrorType.AuthenticationError]: "authentication error",
        [exports.LinearErrorType.Forbidden]: "forbidden",
        [exports.LinearErrorType.BootstrapError]: "bootstrap error",
        [exports.LinearErrorType.Unknown]: "unknown",
        [exports.LinearErrorType.InternalError]: "internal error",
        [exports.LinearErrorType.Other]: "other",
        [exports.LinearErrorType.UserError]: "user error",
        [exports.LinearErrorType.GraphqlError]: "graphql error",
        [exports.LinearErrorType.LockTimeout]: "lock timeout",
    };
    /**
     * Match the error type or return unknown
     */
    function getErrorType(type) {
        var _a;
        return (_a = getKeyByValue(errorMap, type)) !== null && _a !== void 0 ? _a : exports.LinearErrorType.Unknown;
    }
    /**
     * The error shown if no other message is available
     */
    const defaultError = "Unknown error from LinearClient";
    /**
     * One of potentially many graphql errors returned by the Linear API
     *
     * @error the raw graphql error returned on the error response
     */
    class LinearGraphQLError {
        constructor(error) {
            var _a, _b, _c, _d, _e, _f, _g;
            this.type = getErrorType((_a = error === null || error === void 0 ? void 0 : error.extensions) === null || _a === void 0 ? void 0 : _a.type);
            this.userError = (_b = error === null || error === void 0 ? void 0 : error.extensions) === null || _b === void 0 ? void 0 : _b.userError;
            this.path = error === null || error === void 0 ? void 0 : error.path;
            /** Select most readable message */
            this.message = (_g = (_e = (_d = (_c = error === null || error === void 0 ? void 0 : error.extensions) === null || _c === void 0 ? void 0 : _c.userPresentableMessage) !== null && _d !== void 0 ? _d : error === null || error === void 0 ? void 0 : error.message) !== null && _e !== void 0 ? _e : (_f = error === null || error === void 0 ? void 0 : error.extensions) === null || _f === void 0 ? void 0 : _f.type) !== null && _g !== void 0 ? _g : defaultError;
        }
    }
    /**
     * An error from the Linear API
     *
     * @param error a raw error returned from the LinearGraphQLClient
     */
    class LinearError extends Error {
        constructor(error, errors, type) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            /** Find messages, duplicate and join, or default */
            super((_e = Array.from(new Set([capitalize((_b = (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.split(": {")) === null || _b === void 0 ? void 0 : _b[0]), (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.error, (_d = errors === null || errors === void 0 ? void 0 : errors[0]) === null || _d === void 0 ? void 0 : _d.message].filter(nonNullable)))
                .filter(nonNullable)
                .join(" - ")) !== null && _e !== void 0 ? _e : defaultError);
            this.type = type;
            /** Set error properties */
            this.errors = errors;
            this.query = (_f = error === null || error === void 0 ? void 0 : error.request) === null || _f === void 0 ? void 0 : _f.query;
            this.variables = (_g = error === null || error === void 0 ? void 0 : error.request) === null || _g === void 0 ? void 0 : _g.variables;
            this.status = (_h = error === null || error === void 0 ? void 0 : error.response) === null || _h === void 0 ? void 0 : _h.status;
            this.data = (_j = error === null || error === void 0 ? void 0 : error.response) === null || _j === void 0 ? void 0 : _j.data;
            this.raw = error;
        }
    }
    class FeatureNotAccessibleLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.FeatureNotAccessible);
        }
    }
    class InvalidInputLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.InvalidInput);
        }
    }
    class RatelimitedLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Ratelimited);
        }
    }
    class NetworkLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.NetworkError);
        }
    }
    class AuthenticationLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.AuthenticationError);
        }
    }
    class ForbiddenLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Forbidden);
        }
    }
    class BootstrapLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.BootstrapError);
        }
    }
    class UnknownLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Unknown);
        }
    }
    class InternalLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.InternalError);
        }
    }
    class OtherLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Other);
        }
    }
    class UserLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.UserError);
        }
    }
    class GraphqlLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.GraphqlError);
        }
    }
    class LockTimeoutLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.LockTimeout);
        }
    }
    /**
     * A map between the Linear error type and the LinearError class
     */
    const errorConstructorMap = {
        [exports.LinearErrorType.FeatureNotAccessible]: FeatureNotAccessibleLinearError,
        [exports.LinearErrorType.InvalidInput]: InvalidInputLinearError,
        [exports.LinearErrorType.Ratelimited]: RatelimitedLinearError,
        [exports.LinearErrorType.NetworkError]: NetworkLinearError,
        [exports.LinearErrorType.AuthenticationError]: AuthenticationLinearError,
        [exports.LinearErrorType.Forbidden]: ForbiddenLinearError,
        [exports.LinearErrorType.BootstrapError]: BootstrapLinearError,
        [exports.LinearErrorType.Unknown]: UnknownLinearError,
        [exports.LinearErrorType.InternalError]: InternalLinearError,
        [exports.LinearErrorType.Other]: OtherLinearError,
        [exports.LinearErrorType.UserError]: UserLinearError,
        [exports.LinearErrorType.GraphqlError]: GraphqlLinearError,
        [exports.LinearErrorType.LockTimeout]: LockTimeoutLinearError,
    };
    function parseLinearError(error) {
        var _a, _b, _c, _d, _e, _f;
        if (error instanceof LinearError) {
            return error;
        }
        /** Parse graphQL errors */
        const errors = ((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.errors) !== null && _b !== void 0 ? _b : []).map(graphqlError => {
            return new LinearGraphQLError(graphqlError);
        });
        /** Set type based first graphql error or http status */
        const status = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.status;
        const type = (_e = (_d = errors[0]) === null || _d === void 0 ? void 0 : _d.type) !== null && _e !== void 0 ? _e : (status === 403
            ? exports.LinearErrorType.Forbidden
            : status === 429
                ? exports.LinearErrorType.Ratelimited
                : `${status}`.startsWith("4")
                    ? exports.LinearErrorType.AuthenticationError
                    : status === 500
                        ? exports.LinearErrorType.InternalError
                        : `${status}`.startsWith("5")
                            ? exports.LinearErrorType.NetworkError
                            : exports.LinearErrorType.Unknown);
        const LinearErrorConstructor = (_f = errorConstructorMap[type]) !== null && _f !== void 0 ? _f : LinearError;
        return new LinearErrorConstructor(error, errors);
    }

    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
    var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    /**
     * Used to print values in error messages.
     */

    function inspect(value) {
      return formatValue(value, []);
    }

    function formatValue(value, seenValues) {
      switch (_typeof(value)) {
        case 'string':
          return JSON.stringify(value);

        case 'function':
          return value.name ? "[function ".concat(value.name, "]") : '[function]';

        case 'object':
          if (value === null) {
            return 'null';
          }

          return formatObjectValue(value, seenValues);

        default:
          return String(value);
      }
    }

    function formatObjectValue(value, previouslySeenValues) {
      if (previouslySeenValues.indexOf(value) !== -1) {
        return '[Circular]';
      }

      var seenValues = [].concat(previouslySeenValues, [value]);
      var customInspectFn = getCustomFn(value);

      if (customInspectFn !== undefined) {
        var customValue = customInspectFn.call(value); // check for infinite recursion

        if (customValue !== value) {
          return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }

      return formatObject(value, seenValues);
    }

    function formatObject(object, seenValues) {
      var keys = Object.keys(object);

      if (keys.length === 0) {
        return '{}';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[' + getObjectTag(object) + ']';
      }

      var properties = keys.map(function (key) {
        var value = formatValue(object[key], seenValues);
        return key + ': ' + value;
      });
      return '{ ' + properties.join(', ') + ' }';
    }

    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return '[]';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[Array]';
      }

      var len = Math.min(MAX_ARRAY_LENGTH, array.length);
      var remaining = array.length - len;
      var items = [];

      for (var i = 0; i < len; ++i) {
        items.push(formatValue(array[i], seenValues));
      }

      if (remaining === 1) {
        items.push('... 1 more item');
      } else if (remaining > 1) {
        items.push("... ".concat(remaining, " more items"));
      }

      return '[' + items.join(', ') + ']';
    }

    function getCustomFn(object) {
      var customInspectFn = object[String(nodejsCustomInspectSymbol)];

      if (typeof customInspectFn === 'function') {
        return customInspectFn;
      }

      if (typeof object.inspect === 'function') {
        return object.inspect;
      }
    }

    function getObjectTag(object) {
      var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

      if (tag === 'Object' && typeof object.constructor === 'function') {
        var name = object.constructor.name;

        if (typeof name === 'string' && name !== '') {
          return name;
        }
      }

      return tag;
    }

    function invariant(condition, message) {
      var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

      if (!booleanCondition) {
        throw new Error(message != null ? message : 'Unexpected invariant triggered.');
      }
    }

    /**
     * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
     */

    function defineInspect(classObject) {
      var fn = classObject.prototype.toJSON;
      typeof fn === 'function' || invariant(0);
      classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

      if (nodejsCustomInspectSymbol) {
        classObject.prototype[nodejsCustomInspectSymbol] = fn;
      }
    }

    /**
     * Contains a range of UTF-8 character offsets and token references that
     * identify the region of the source from which the AST derived.
     */
    var Location = /*#__PURE__*/function () {
      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The Token at which this Node begins.
       */

      /**
       * The Token at which this Node ends.
       */

      /**
       * The Source document the AST represents.
       */
      function Location(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }

      var _proto = Location.prototype;

      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };

      return Location;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    defineInspect(Location);
    /**
     * Represents a range of characters represented by a lexical token
     * within a Source.
     */

    var Token = /*#__PURE__*/function () {
      /**
       * The kind of Token.
       */

      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The 1-indexed line number on which this Token appears.
       */

      /**
       * The 1-indexed column number at which this Token begins.
       */

      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       */

      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      function Token(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }

      var _proto2 = Token.prototype;

      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };

      return Token;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    defineInspect(Token);
    /**
     * @internal
     */

    function isNode(maybeNode) {
      return maybeNode != null && typeof maybeNode.kind === 'string';
    }
    /**
     * The list of all possible AST node types.
     */

    /**
     * A visitor is provided to visit, it contains the collection of
     * relevant functions to be called during the visitor's traversal.
     */

    var QueryDocumentKeys = {
      Name: [],
      Document: ['definitions'],
      OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
      VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
      Variable: ['name'],
      SelectionSet: ['selections'],
      Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
      Argument: ['name', 'value'],
      FragmentSpread: ['name', 'directives'],
      InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
      FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ['values'],
      ObjectValue: ['fields'],
      ObjectField: ['name', 'value'],
      Directive: ['name', 'arguments'],
      NamedType: ['name'],
      ListType: ['type'],
      NonNullType: ['type'],
      SchemaDefinition: ['description', 'directives', 'operationTypes'],
      OperationTypeDefinition: ['type'],
      ScalarTypeDefinition: ['description', 'name', 'directives'],
      ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
      InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
      InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
      EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
      EnumValueDefinition: ['description', 'name', 'directives'],
      InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
      DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
      SchemaExtension: ['directives', 'operationTypes'],
      ScalarTypeExtension: ['name', 'directives'],
      ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      UnionTypeExtension: ['name', 'directives', 'types'],
      EnumTypeExtension: ['name', 'directives', 'values'],
      InputObjectTypeExtension: ['name', 'directives', 'fields']
    };
    var BREAK = Object.freeze({});
    /**
     * visit() will walk through an AST using a depth-first traversal, calling
     * the visitor's enter function at each node in the traversal, and calling the
     * leave function after visiting that node and all of its child nodes.
     *
     * By returning different values from the enter and leave functions, the
     * behavior of the visitor can be altered, including skipping over a sub-tree of
     * the AST (by returning false), editing the AST by returning a value or null
     * to remove the value, or to stop the whole traversal by returning BREAK.
     *
     * When using visit() to edit an AST, the original AST will not be modified, and
     * a new version of the AST with the changes applied will be returned from the
     * visit function.
     *
     *     const editedAST = visit(ast, {
     *       enter(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: skip visiting this node
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       },
     *       leave(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: no action
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       }
     *     });
     *
     * Alternatively to providing enter() and leave() functions, a visitor can
     * instead provide functions named the same as the kinds of AST nodes, or
     * enter/leave visitors at a named key, leading to four permutations of the
     * visitor API:
     *
     * 1) Named visitors triggered when entering a node of a specific kind.
     *
     *     visit(ast, {
     *       Kind(node) {
     *         // enter the "Kind" node
     *       }
     *     })
     *
     * 2) Named visitors that trigger upon entering and leaving a node of
     *    a specific kind.
     *
     *     visit(ast, {
     *       Kind: {
     *         enter(node) {
     *           // enter the "Kind" node
     *         }
     *         leave(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     *
     * 3) Generic visitors that trigger upon entering and leaving any node.
     *
     *     visit(ast, {
     *       enter(node) {
     *         // enter any node
     *       },
     *       leave(node) {
     *         // leave any node
     *       }
     *     })
     *
     * 4) Parallel visitors for entering and leaving nodes of a specific kind.
     *
     *     visit(ast, {
     *       enter: {
     *         Kind(node) {
     *           // enter the "Kind" node
     *         }
     *       },
     *       leave: {
     *         Kind(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     */

    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

      /* eslint-disable no-undef-init */
      var stack = undefined;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = undefined;
      var key = undefined;
      var parent = undefined;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      /* eslint-enable no-undef-init */

      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;

        if (isLeaving) {
          key = ancestors.length === 0 ? undefined : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();

          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone = {};

              for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
                var k = _Object$keys2[_i2];
                clone[k] = node[k];
              }

              node = clone;
            }

            var editOffset = 0;

            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];

              if (inArray) {
                editKey -= editOffset;
              }

              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }

          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : undefined;
          node = parent ? parent[key] : newRoot;

          if (node === null || node === undefined) {
            continue;
          }

          if (parent) {
            path.push(key);
          }
        }

        var result = void 0;

        if (!Array.isArray(node)) {
          if (!isNode(node)) {
            throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
          }

          var visitFn = getVisitFn(visitor, node.kind, isLeaving);

          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);

            if (result === BREAK) {
              break;
            }

            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== undefined) {
              edits.push([key, result]);

              if (!isLeaving) {
                if (isNode(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }

        if (result === undefined && isEdited) {
          edits.push([key, node]);
        }

        if (isLeaving) {
          path.pop();
        } else {
          var _visitorKeys$node$kin;

          stack = {
            inArray: inArray,
            index: index,
            keys: keys,
            edits: edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
          index = -1;
          edits = [];

          if (parent) {
            ancestors.push(parent);
          }

          parent = node;
        }
      } while (stack !== undefined);

      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }

      return newRoot;
    }
    /**
     * Given a visitor instance, if it is leaving or not, and a node kind, return
     * the function the visitor runtime should call.
     */

    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];

      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === 'function') {
          // { Kind() {} }
          return kindVisitor;
        }

        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

        if (typeof kindSpecificVisitor === 'function') {
          // { Kind: { enter() {}, leave() {} } }
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

        if (specificVisitor) {
          if (typeof specificVisitor === 'function') {
            // { enter() {}, leave() {} }
            return specificVisitor;
          }

          var specificKindVisitor = specificVisitor[kind];

          if (typeof specificKindVisitor === 'function') {
            // { enter: { Kind() {} }, leave: { Kind() {} } }
            return specificKindVisitor;
          }
        }
      }
    }

    /**
     * Print a block string in the indented block form by adding a leading and
     * trailing blank line. However, if a block string starts with whitespace and is
     * a single-line, adding a leading blank line would strip that whitespace.
     *
     * @internal
     */

    function printBlockString(value) {
      var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isSingleLine = value.indexOf('\n') === -1;
      var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
      var hasTrailingQuote = value[value.length - 1] === '"';
      var hasTrailingSlash = value[value.length - 1] === '\\';
      var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
      var result = ''; // Format a multi-line block quote to account for leading space.

      if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
        result += '\n' + indentation;
      }

      result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

      if (printAsMultipleLines) {
        result += '\n';
      }

      return '"""' + result.replace(/"""/g, '\\"""') + '"""';
    }

    /**
     * Converts an AST into a string, using one set of reasonable
     * formatting rules.
     */

    function print(ast) {
      return visit(ast, {
        leave: printDocASTReducer
      });
    }
    var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return '$' + node.name;
      },
      // Document
      Document: function Document(node) {
        return join(node.definitions, '\n\n') + '\n';
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        var directives = join(node.directives, ' ');
        var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
        // the query short form.

        return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable,
            type = _ref.type,
            defaultValue = _ref.defaultValue,
            directives = _ref.directives;
        return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias,
            name = _ref3.name,
            args = _ref3.arguments,
            directives = _ref3.directives,
            selectionSet = _ref3.selectionSet;
        var prefix = wrap('', alias, ': ') + name;
        var argsLine = prefix + wrap('(', join(args, ', '), ')');

        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
        }

        return join([argsLine, join(directives, ' '), selectionSet], ' ');
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name,
            value = _ref4.value;
        return name + ': ' + value;
      },
      // Fragments
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name,
            directives = _ref5.directives;
        return '...' + name + wrap(' ', join(directives, ' '));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition,
            directives = _ref6.directives,
            selectionSet = _ref6.selectionSet;
        return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name,
            typeCondition = _ref7.typeCondition,
            variableDefinitions = _ref7.variableDefinitions,
            directives = _ref7.directives,
            selectionSet = _ref7.selectionSet;
        return (// Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
        );
      },
      // Value
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value,
            isBlockString = _ref10.block;
        return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? 'true' : 'false';
      },
      NullValue: function NullValue() {
        return 'null';
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return '[' + join(values, ', ') + ']';
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return '{' + join(fields, ', ') + '}';
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name,
            value = _ref15.value;
        return name + ': ' + value;
      },
      // Directive
      Directive: function Directive(_ref16) {
        var name = _ref16.name,
            args = _ref16.arguments;
        return '@' + name + wrap('(', join(args, ', '), ')');
      },
      // Type
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return '[' + type + ']';
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + '!';
      },
      // Type System Definitions
      SchemaDefinition: addDescription(function (_ref20) {
        var directives = _ref20.directives,
            operationTypes = _ref20.operationTypes;
        return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
      }),
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation,
            type = _ref21.type;
        return operation + ': ' + type;
      },
      ScalarTypeDefinition: addDescription(function (_ref22) {
        var name = _ref22.name,
            directives = _ref22.directives;
        return join(['scalar', name, join(directives, ' ')], ' ');
      }),
      ObjectTypeDefinition: addDescription(function (_ref23) {
        var name = _ref23.name,
            interfaces = _ref23.interfaces,
            directives = _ref23.directives,
            fields = _ref23.fields;
        return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      FieldDefinition: addDescription(function (_ref24) {
        var name = _ref24.name,
            args = _ref24.arguments,
            type = _ref24.type,
            directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
      }),
      InputValueDefinition: addDescription(function (_ref25) {
        var name = _ref25.name,
            type = _ref25.type,
            defaultValue = _ref25.defaultValue,
            directives = _ref25.directives;
        return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
      }),
      InterfaceTypeDefinition: addDescription(function (_ref26) {
        var name = _ref26.name,
            interfaces = _ref26.interfaces,
            directives = _ref26.directives,
            fields = _ref26.fields;
        return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      UnionTypeDefinition: addDescription(function (_ref27) {
        var name = _ref27.name,
            directives = _ref27.directives,
            types = _ref27.types;
        return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      }),
      EnumTypeDefinition: addDescription(function (_ref28) {
        var name = _ref28.name,
            directives = _ref28.directives,
            values = _ref28.values;
        return join(['enum', name, join(directives, ' '), block(values)], ' ');
      }),
      EnumValueDefinition: addDescription(function (_ref29) {
        var name = _ref29.name,
            directives = _ref29.directives;
        return join([name, join(directives, ' ')], ' ');
      }),
      InputObjectTypeDefinition: addDescription(function (_ref30) {
        var name = _ref30.name,
            directives = _ref30.directives,
            fields = _ref30.fields;
        return join(['input', name, join(directives, ' '), block(fields)], ' ');
      }),
      DirectiveDefinition: addDescription(function (_ref31) {
        var name = _ref31.name,
            args = _ref31.arguments,
            repeatable = _ref31.repeatable,
            locations = _ref31.locations;
        return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives,
            operationTypes = _ref32.operationTypes;
        return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name,
            directives = _ref33.directives;
        return join(['extend scalar', name, join(directives, ' ')], ' ');
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name,
            interfaces = _ref34.interfaces,
            directives = _ref34.directives,
            fields = _ref34.fields;
        return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name,
            interfaces = _ref35.interfaces,
            directives = _ref35.directives,
            fields = _ref35.fields;
        return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name,
            directives = _ref36.directives,
            types = _ref36.types;
        return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name,
            directives = _ref37.directives,
            values = _ref37.values;
        return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name,
            directives = _ref38.directives,
            fields = _ref38.fields;
        return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
      }
    };

    function addDescription(cb) {
      return function (node) {
        return join([node.description, cb(node)], '\n');
      };
    }
    /**
     * Given maybeArray, print an empty string if it is null or empty, otherwise
     * print all items together separated by separator if provided
     */


    function join(maybeArray) {
      var _maybeArray$filter$jo;

      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
        return x;
      }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
    }
    /**
     * Given array, print each item on its own line, wrapped in an
     * indented "{ }" block.
     */


    function block(array) {
      return wrap('{\n', indent(join(array, '\n')), '\n}');
    }
    /**
     * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
     */


    function wrap(start, maybeString) {
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
    }

    function indent(str) {
      return wrap('  ', str.replace(/\n/g, '\n  '));
    }

    function isMultiline(str) {
      return str.indexOf('\n') !== -1;
    }

    function hasMultilineItems(maybeArray) {
      return maybeArray != null && maybeArray.some(isMultiline);
    }

    function unfetch_module(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return {ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t;}),t(a());},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null);})}

    var unfetch_module$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': unfetch_module
    });

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(unfetch_module$1);

    var browser = self.fetch || (self.fetch = require$$0.default || require$$0);

    /**
     * Identical class to graphql-request ClientError
     * Ensures parseLinearError is compatible with custom graphql-request clients
     *
     * @param response the raw response from the Linear API
     * @param request information about the request resulting in the error
     */
    class GraphQLClientError extends Error {
        constructor(response, request) {
            const message = `${GraphQLClientError.extractMessage(response)}: ${JSON.stringify({
            response,
            request,
        })}`;
            super(message);
            Object.setPrototypeOf(this, GraphQLClientError.prototype);
            this.response = response;
            this.request = request;
            // this is needed as Safari doesn't support .captureStackTrace
            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, GraphQLClientError);
            }
        }
        static extractMessage(response) {
            var _a, _b, _c;
            try {
                return (_c = (_b = (_a = response.errors) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : `GraphQL Error (Code: ${response.status})`;
            }
            catch (e) {
                return `GraphQL Error (Code: ${response.status})`;
            }
        }
    }
    /**
     * Create an isomorphic GraphQL client
     * Originally forked from graphql-request to remove the external dependency
     *
     * @param url base url to send the request to
     * @param options the request options
     */
    class LinearGraphQLClient {
        constructor(url, options) {
            this.url = url;
            this.options = options || {};
        }
        rawRequest(query, variables, requestHeaders) {
            return __awaiter(this, void 0, void 0, function* () {
                const _a = this.options, { headers } = _a, others = __rest(_a, ["headers"]);
                const body = JSON.stringify({ query, variables });
                const response = yield browser(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
                const result = yield getResult(response);
                if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                    return Object.assign(Object.assign({}, result), { headers: response.headers, status: response.status });
                }
                else {
                    throw parseLinearError(new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables }));
                }
            });
        }
        /**
         * Send a GraphQL document to the server.
         */
        request(document, variables, requestHeaders) {
            return __awaiter(this, void 0, void 0, function* () {
                const _a = this.options, { headers } = _a, others = __rest(_a, ["headers"]);
                const query = typeof document === "string" ? document : print(document);
                const body = JSON.stringify({ query, variables });
                const response = yield browser(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
                const result = yield getResult(response);
                if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                    return result.data;
                }
                else {
                    throw new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables });
                }
            });
        }
        setHeaders(headers) {
            this.options.headers = headers;
            return this;
        }
        /**
         * Attach a header to the client. All subsequent requests will have this header.
         */
        setHeader(key, value) {
            const { headers } = this.options;
            if (headers) {
                // todo what if headers is in nested array form... ?
                headers[key] = value;
            }
            else {
                this.options.headers = { [key]: value };
            }
            return this;
        }
    }
    /**
     * Parse the raw response
     *
     * @param response raw response from the Linear API
     */
    function getResult(response) {
        const contentType = response.headers.get("Content-Type");
        if (contentType && contentType.startsWith("application/json")) {
            return response.json();
        }
        else {
            return response.text();
        }
    }
    /**
     * Convert the given headers configuration into a plain object.
     */
    function resolveHeaders(headers) {
        let oHeaders = {};
        if (headers) {
            if (typeof Headers !== "undefined" && headers instanceof Headers) {
                oHeaders = headersToObject(headers);
            }
            else if (Array.isArray(headers)) {
                headers.forEach(([name, value]) => {
                    oHeaders[name] = value;
                });
            }
            else {
                oHeaders = headers;
            }
        }
        return oHeaders;
    }
    /**
     * Convert Headers instance into regular object
     */
    function headersToObject(headers) {
        const o = {};
        headers.forEach((v, k) => {
            o[k] = v;
        });
        return o;
    }

    /** The type of the issue relation. */
    var IssueRelationType;
    (function (IssueRelationType) {
        IssueRelationType["Blocks"] = "blocks";
        IssueRelationType["Duplicate"] = "duplicate";
        IssueRelationType["Related"] = "related";
    })(IssueRelationType || (IssueRelationType = {}));
    /** By which field should the pagination order by */
    var PaginationOrderBy;
    (function (PaginationOrderBy) {
        PaginationOrderBy["CreatedAt"] = "createdAt";
        PaginationOrderBy["UpdatedAt"] = "updatedAt";
    })(PaginationOrderBy || (PaginationOrderBy = {}));
    /** How trashed issues should be loaded. */
    var TrashOptionType;
    (function (TrashOptionType) {
        TrashOptionType["ExcludeTrash"] = "excludeTrash";
        TrashOptionType["IncludeTrash"] = "includeTrash";
        TrashOptionType["TrashOnly"] = "trashOnly";
    })(TrashOptionType || (TrashOptionType = {}));
    /** The types of flags that the user can have. */
    var UserFlagType;
    (function (UserFlagType) {
        UserFlagType["AnalyticsWelcomeDismissed"] = "analyticsWelcomeDismissed";
        UserFlagType["CanPlaySnake"] = "canPlaySnake";
        UserFlagType["CompletedOnboarding"] = "completedOnboarding";
        UserFlagType["CycleWelcomeDismissed"] = "cycleWelcomeDismissed";
        UserFlagType["DesktopDownloadToastDismissed"] = "desktopDownloadToastDismissed";
        UserFlagType["DesktopInstalled"] = "desktopInstalled";
        UserFlagType["EmptyActiveIssuesDismissed"] = "emptyActiveIssuesDismissed";
        UserFlagType["EmptyBacklogDismissed"] = "emptyBacklogDismissed";
        UserFlagType["EmptyCustomViewsDismissed"] = "emptyCustomViewsDismissed";
        UserFlagType["EmptyMyIssuesDismissed"] = "emptyMyIssuesDismissed";
        UserFlagType["FigmaPromptDismissed"] = "figmaPromptDismissed";
        UserFlagType["ListSelectionTip"] = "listSelectionTip";
        UserFlagType["MigrateThemePreference"] = "migrateThemePreference";
        UserFlagType["ProjectWelcomeDismissed"] = "projectWelcomeDismissed";
    })(UserFlagType || (UserFlagType = {}));
    /** Operations that can be applied to UserFlagType */
    var UserFlagUpdateOperation;
    (function (UserFlagUpdateOperation) {
        UserFlagUpdateOperation["Clear"] = "clear";
        UserFlagUpdateOperation["Decr"] = "decr";
        UserFlagUpdateOperation["Incr"] = "incr";
        UserFlagUpdateOperation["Lock"] = "lock";
    })(UserFlagUpdateOperation || (UserFlagUpdateOperation = {}));
    /** The type of view preferences (either user or organization level preferences). */
    var ViewPreferencesType;
    (function (ViewPreferencesType) {
        ViewPreferencesType["Organization"] = "organization";
        ViewPreferencesType["User"] = "user";
    })(ViewPreferencesType || (ViewPreferencesType = {}));
    /** The client view this custom view is targeting. */
    var ViewType;
    (function (ViewType) {
        ViewType["ActiveIssues"] = "activeIssues";
        ViewType["AllIssues"] = "allIssues";
        ViewType["Backlog"] = "backlog";
        ViewType["Board"] = "board";
        ViewType["CompletedCycle"] = "completedCycle";
        ViewType["CustomView"] = "customView";
        ViewType["Cycle"] = "cycle";
        ViewType["Inbox"] = "inbox";
        ViewType["Label"] = "label";
        ViewType["MyIssues"] = "myIssues";
        ViewType["Project"] = "project";
        ViewType["Projects"] = "projects";
        ViewType["Roadmap"] = "roadmap";
    })(ViewType || (ViewType = {}));
    const FileUploadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FileUpload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FileUpload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "metaData" } },
                        { kind: "Field", name: { kind: "Name", value: "size" } },
                        { kind: "Field", name: { kind: "Name", value: "contentType" } },
                        { kind: "Field", name: { kind: "Name", value: "assetUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "filename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TemplateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Template" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "templateData" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "User" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "disableReason" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                        { kind: "Field", name: { kind: "Name", value: "admin" } },
                    ],
                },
            },
        ],
    };
    const UserAccountFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAccount" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAccount" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "users" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
        ],
    };
    const DocumentStepFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentStep" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentStep" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "step" } },
                        { kind: "Field", name: { kind: "Name", value: "version" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const SyncResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SyncResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "delta" } },
                        { kind: "Field", name: { kind: "Name", value: "state" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedSyncGroups" } },
                        { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
                    ],
                },
            },
        ],
    };
    const ArchiveResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ArchiveResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "archive" } },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
                    ],
                },
            },
        ],
    };
    const GithubRepoFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GithubRepo" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubRepo" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const GithubOrgFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GithubOrg" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubOrg" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "repositories" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubRepo" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "login" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
            ...GithubRepoFragmentDoc.definitions,
        ],
    };
    const OAuthTokenPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OAuthTokenPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OAuthTokenPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizations" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubOrg" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "token" } },
                    ],
                },
            },
            ...GithubOrgFragmentDoc.definitions,
        ],
    };
    const AuthorizedApplicationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthorizedApplication" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizedApplication" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "appId" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    ],
                },
            },
        ],
    };
    const UserAuthorizedApplicationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAuthorizedApplication" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "isAuthorized" } },
                    ],
                },
            },
        ],
    };
    const ApplicationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Application" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    ],
                },
            },
        ],
    };
    const GoogleSheetsSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GoogleSheetsSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GoogleSheetsSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "sheetId" } },
                        { kind: "Field", name: { kind: "Name", value: "spreadsheetId" } },
                        { kind: "Field", name: { kind: "Name", value: "spreadsheetUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedIssuesAt" } },
                    ],
                },
            },
        ],
    };
    const SentrySettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SentrySettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SentrySettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "Field", name: { kind: "Name", value: "organizationSlug" } }],
                },
            },
        ],
    };
    const SlackPostSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackPostSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackPostSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "channel" } },
                        { kind: "Field", name: { kind: "Name", value: "channelId" } },
                        { kind: "Field", name: { kind: "Name", value: "configurationUrl" } },
                    ],
                },
            },
        ],
    };
    const ZendeskSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ZendeskSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ZendeskSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "botUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "subdomain" } },
                    ],
                },
            },
        ],
    };
    const IntegrationSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "googleSheets" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GoogleSheetsSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sentry" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SentrySettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackPost" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackProjectPost" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "zendesk" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ZendeskSettings" } }],
                            },
                        },
                    ],
                },
            },
            ...GoogleSheetsSettingsFragmentDoc.definitions,
            ...SentrySettingsFragmentDoc.definitions,
            ...SlackPostSettingsFragmentDoc.definitions,
            ...ZendeskSettingsFragmentDoc.definitions,
        ],
    };
    const SamlConfigurationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SamlConfiguration" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SamlConfiguration" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "ssoBinding" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedDomains" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoSigningCert" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationPreferences" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const SubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Subscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Subscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "seats" } },
                        { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ApiKeyFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKey" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const PageInfoFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PageInfo" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "startCursor" } },
                        { kind: "Field", name: { kind: "Name", value: "endCursor" } },
                        { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } },
                        { kind: "Field", name: { kind: "Name", value: "hasNextPage" } },
                    ],
                },
            },
        ],
    };
    const ApiKeyConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKeyConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...ApiKeyFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ApiKeyPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKeyPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKey" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...ApiKeyFragmentDoc.definitions,
        ],
    };
    const ArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AttachmentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Attachment" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "subtitle" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AttachmentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Organization" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } },
                        { kind: "Field", name: { kind: "Name", value: "userCount" } },
                        { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "urlKey" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } },
                    ],
                },
            },
        ],
    };
    const AuthResolverResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthResolverResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "token" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "availableOrganizations" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "users" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
        ],
    };
    const InvoiceFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Invoice" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Invoice" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "created" } },
                        { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "total" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                    ],
                },
            },
        ],
    };
    const CardFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Card" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Card" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "brand" } },
                        { kind: "Field", name: { kind: "Name", value: "last4" } },
                    ],
                },
            },
        ],
    };
    const BillingDetailsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "BillingDetailsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "BillingDetailsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "invoices" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Invoice" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "paymentMethod" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Card" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...InvoiceFragmentDoc.definitions,
            ...CardFragmentDoc.definitions,
        ],
    };
    const BillingEmailPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "BillingEmailPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "BillingEmailPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const StepsResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "StepsResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "StepsResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "version" } },
                        { kind: "Field", name: { kind: "Name", value: "clientIds" } },
                        { kind: "Field", name: { kind: "Name", value: "steps" } },
                    ],
                },
            },
        ],
    };
    const CollaborationDocumentUpdatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "steps" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "StepsResponse" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...StepsResponseFragmentDoc.definitions,
        ],
    };
    const CommentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Comment" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CommentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CommentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ContactPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ContactPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const CreateCsvExportReportPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CreateCsvExportReportPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const CreateOrJoinOrganizationResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomViewFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomView" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "filters" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "shared" } },
                    ],
                },
            },
        ],
    };
    const CustomViewConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomViewPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CycleFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Cycle" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CycleConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CyclePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CyclePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DebugPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DebugPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DebugPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const EmailUnsubscribePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailUnsubscribePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const EmailUserAccountAuthChallengeResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "authType" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EmojiFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Emoji" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EmojiConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmojiConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const EmojiPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmojiPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emoji" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EventPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EventPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EventPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const FavoriteFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Favorite" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const FavoriteConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FavoriteConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoriteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const FavoritePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FavoritePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const FeedbackPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FeedbackPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeedbackPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const FigmaEmbedFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FigmaEmbed" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FigmaEmbed" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastModified" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "nodeName" } },
                    ],
                },
            },
        ],
    };
    const FigmaEmbedPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FigmaEmbedPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FigmaEmbedPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "figmaEmbed" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbed" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...FigmaEmbedFragmentDoc.definitions,
        ],
    };
    const ImageUploadFromUrlPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ImageUploadFromUrlPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Integration" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IntegrationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CommitPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommitPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommitPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "added" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "message" } },
                        { kind: "Field", name: { kind: "Name", value: "modified" } },
                        { kind: "Field", name: { kind: "Name", value: "removed" } },
                        { kind: "Field", name: { kind: "Name", value: "timestamp" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                    ],
                },
            },
        ],
    };
    const PullRequestPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PullRequestPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "branch" } },
                        { kind: "Field", name: { kind: "Name", value: "closedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "draft" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "mergedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "repoLogin" } },
                        { kind: "Field", name: { kind: "Name", value: "repoName" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        { kind: "Field", name: { kind: "Name", value: "userLogin" } },
                    ],
                },
            },
        ],
    };
    const SentryIssuePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SentryIssuePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SentryIssuePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "firstSeen" } },
                        { kind: "Field", name: { kind: "Name", value: "webUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "actorName" } },
                        { kind: "Field", name: { kind: "Name", value: "firstVersion" } },
                        { kind: "Field", name: { kind: "Name", value: "shortId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectSlug" } },
                        { kind: "Field", name: { kind: "Name", value: "issueTitle" } },
                        { kind: "Field", name: { kind: "Name", value: "actorType" } },
                    ],
                },
            },
        ],
    };
    const IntegrationResourceDataFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationResourceData" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationResourceData" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "githubCommit" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommitPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "githubPullRequest" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitlabMergeRequest" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sentryIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SentryIssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommitPayloadFragmentDoc.definitions,
            ...PullRequestPayloadFragmentDoc.definitions,
            ...SentryIssuePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationResourceFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationResource" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationResource" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "data" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationResourceData" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pullRequest" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "resourceId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "resourceType" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
            ...IntegrationResourceDataFragmentDoc.definitions,
            ...PullRequestPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationResourceConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationResourceConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationResourceConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationResource" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationResourceFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InviteDataFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InviteData" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InviteData" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "avatarURLs" } },
                        { kind: "Field", name: { kind: "Name", value: "teamIds" } },
                        { kind: "Field", name: { kind: "Name", value: "teamNames" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationDomain" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "inviterName" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationName" } },
                        { kind: "Field", name: { kind: "Name", value: "userCount" } },
                    ],
                },
            },
        ],
    };
    const InvitePagePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InvitePagePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InvitePagePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inviteData" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InviteData" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...InviteDataFragmentDoc.definitions,
        ],
    };
    const IssueFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Issue" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
                        { kind: "Field", name: { kind: "Name", value: "branchName" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "estimate" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "assignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueHistoryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueHistory" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "relationChanges" } },
                        { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toParent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromParent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromAssignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toAssignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "fromDueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "toDueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "fromEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "toEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "fromPriority" } },
                        { kind: "Field", name: { kind: "Name", value: "toPriority" } },
                        { kind: "Field", name: { kind: "Name", value: "fromTitle" } },
                        { kind: "Field", name: { kind: "Name", value: "toTitle" } },
                        { kind: "Field", name: { kind: "Name", value: "archived" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedDescription" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchived" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosed" } },
                    ],
                },
            },
        ],
    };
    const IssueHistoryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueHistoryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueImportFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImport" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "error" } },
                    ],
                },
            },
        ],
    };
    const IssueImportDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueLabelFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabel" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueLabelConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueLabelPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssuePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssuePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssuePriorityValueFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssuePriorityValue" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelation" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueRelationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelation" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const MilestoneFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Milestone" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Milestone" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const MilestoneConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "MilestoneConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "MilestoneConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Milestone" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...MilestoneFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const MilestonePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "MilestonePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "MilestonePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Notification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const NotificationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const NotificationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notification" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscriptionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscriptionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscription" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OauthClientFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClient" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClient" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "redirectUris" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "clientSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    ],
                },
            },
        ],
    };
    const OauthClientPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthClient" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClient" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...OauthClientFragmentDoc.definitions,
        ],
    };
    const OauthTokenRevokePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthTokenRevokePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthTokenRevokePayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const OrganizationDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const OrganizationDomainFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDomain" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "verificationEmail" } },
                        { kind: "Field", name: { kind: "Name", value: "verified" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OrganizationDomainPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDomainPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDomain" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDomain" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...OrganizationDomainFragmentDoc.definitions,
        ],
    };
    const OrganizationDomainSimplePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDomainSimplePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainSimplePayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const OrganizationExistsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationExistsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        { kind: "Field", name: { kind: "Name", value: "exists" } },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInvite" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "external" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "acceptedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inviter" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "invitee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInviteConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInviteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const OrganizationInvitePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInvitePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...OrganizationInviteFragmentDoc.definitions,
        ],
    };
    const OrganizationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Project" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lead" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "state" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                    ],
                },
            },
        ],
    };
    const ProjectConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectLinkFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLink" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLink" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectLinkConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLinkConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectLinkPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLinkPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLink" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscriptionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const PushSubscriptionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscriptionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ReactionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Reaction" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "emoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ReactionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ReactionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...ReactionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ReactionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ReactionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reaction" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RotateSecretPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RotateSecretPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RotateSecretPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SsoUrlFromEmailResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SsoUrlFromEmailResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SubscriptionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SubscriptionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SubscriptionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SubscriptionSessionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SubscriptionSessionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SubscriptionSessionPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "session" } }] },
            },
        ],
    };
    const SynchronizedPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SynchronizedPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SynchronizedPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "Field", name: { kind: "Name", value: "lastSyncId" } }],
                },
            },
        ],
    };
    const TeamFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Team" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } },
                        { kind: "Field", name: { kind: "Name", value: "private" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "activeCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleDuration" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "timezone" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mergeWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "draftWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "startWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reviewWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "markedAsDuplicateWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } },
                        { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                    ],
                },
            },
        ],
    };
    const TeamConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TeamMembershipFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembership" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "owner" } },
                    ],
                },
            },
        ],
    };
    const TeamMembershipConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembershipConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TeamMembershipPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembershipPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembership" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TeamPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TemplateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TemplateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TemplatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TemplatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UploadFileHeaderFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadFileHeader" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "value" } },
                    ],
                },
            },
        ],
    };
    const UploadFileFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadFile" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "assetUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "contentType" } },
                        { kind: "Field", name: { kind: "Name", value: "filename" } },
                        { kind: "Field", name: { kind: "Name", value: "uploadUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "size" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "headers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "metaData" } },
                    ],
                },
            },
            ...UploadFileHeaderFragmentDoc.definitions,
        ],
    };
    const UploadPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "uploadFile" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...UploadFileFragmentDoc.definitions,
        ],
    };
    const UserAdminPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAdminPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const UserConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const UserPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsFlagPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsFlagPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "flag" } },
                        { kind: "Field", name: { kind: "Name", value: "value" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsFlagsResetPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsFlagsResetPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSubscribeToNewsletterPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSubscribeToNewsletterPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSubscribeToNewsletterPayload" } },
                selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "success" } }] },
            },
        ],
    };
    const ViewPreferencesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferences" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "viewType" } },
                    ],
                },
            },
        ],
    };
    const ViewPreferencesPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferencesPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
            ...ViewPreferencesFragmentDoc.definitions,
        ],
    };
    const WebhookFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Webhook" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "secret" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "resourceTypes" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const WebhookConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowState" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "position" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WorkflowStatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ApiKeysDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "apiKeys" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKeys" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ApiKeyConnectionFragmentDoc.definitions,
        ],
    };
    const ApplicationWithAuthorizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "applicationWithAuthorization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "applicationWithAuthorization" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clientId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scope" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAuthorizedApplicationFragmentDoc.definitions,
        ],
    };
    const ArchivedModelSyncDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "archivedModelSync" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "identifier" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "modelClass" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivedModelSync" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "identifier" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "identifier" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "modelClass" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "modelClass" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const ArchivedModelsSyncDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "archivedModelsSync" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "modelClass" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "trashOption" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TrashOptionType" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivedModelsSync" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "modelClass" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "modelClass" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "trashOption" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "trashOption" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const AttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentFragmentDoc.definitions,
        ],
    };
    const AttachmentIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
        ],
    };
    const AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
        ],
    };
    const AuthorizedApplicationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "authorizedApplications" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "authorizedApplications" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthorizedApplication" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthorizedApplicationFragmentDoc.definitions,
        ],
    };
    const AvailableUsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "availableUsers" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "availableUsers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
        ],
    };
    const BillingDetailsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "billingDetails" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "billingDetails" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "BillingDetailsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...BillingDetailsPayloadFragmentDoc.definitions,
        ],
    };
    const BillingDetails_PaymentMethodDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "billingDetails_paymentMethod" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "billingDetails" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "paymentMethod" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Card" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CardFragmentDoc.definitions,
        ],
    };
    const CollaborativeDocumentJoinDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "collaborativeDocumentJoin" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "version" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "collaborativeDocumentJoin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clientId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "version" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "version" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CollaborationDocumentUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const CollaborativeDocumentJoin_StepsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "collaborativeDocumentJoin_steps" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "version" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "collaborativeDocumentJoin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clientId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "version" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "version" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "steps" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "StepsResponse" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...StepsResponseFragmentDoc.definitions,
        ],
    };
    const CommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentFragmentDoc.definitions,
        ],
    };
    const CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
        ],
    };
    const CustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewFragmentDoc.definitions,
        ],
    };
    const CustomViewsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customViews" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViews" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewConnectionFragmentDoc.definitions,
        ],
    };
    const CycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleFragmentDoc.definitions,
        ],
    };
    const Cycle_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const Cycle_UncompletedIssuesUponCloseDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "uncompletedIssuesUponClose" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const CyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycles" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleConnectionFragmentDoc.definitions,
        ],
    };
    const EmojiDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emoji" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emoji" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiFragmentDoc.definitions,
        ],
    };
    const EmojisDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emojis" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojis" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiConnectionFragmentDoc.definitions,
        ],
    };
    const FavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoriteFragmentDoc.definitions,
        ],
    };
    const FavoritesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorites" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorites" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoriteConnectionFragmentDoc.definitions,
        ],
    };
    const FigmaEmbedInfoDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "figmaEmbedInfo" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "figmaEmbedInfo" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "fileId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "nodeId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbedPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FigmaEmbedPayloadFragmentDoc.definitions,
        ],
    };
    const FigmaEmbedInfo_FigmaEmbedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "figmaEmbedInfo_figmaEmbed" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "figmaEmbedInfo" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "fileId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "nodeId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "figmaEmbed" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbed" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...FigmaEmbedFragmentDoc.definitions,
        ],
    };
    const IntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationFragmentDoc.definitions,
        ],
    };
    const IntegrationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationConnectionFragmentDoc.definitions,
        ],
    };
    const InviteInfoDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "inviteInfo" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamHash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userHash" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inviteInfo" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamHash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamHash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userHash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userHash" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InvitePagePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InvitePagePayloadFragmentDoc.definitions,
        ],
    };
    const InviteInfo_InviteDataDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "inviteInfo_inviteData" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamHash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userHash" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inviteInfo" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamHash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamHash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userHash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userHash" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inviteData" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InviteData" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...InviteDataFragmentDoc.definitions,
        ],
    };
    const IssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
        ],
    };
    const Issue_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
        ],
    };
    const Issue_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const Issue_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
        ],
    };
    const Issue_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
        ],
    };
    const Issue_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
        ],
    };
    const Issue_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
        ],
    };
    const Issue_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
        ],
    };
    const Issue_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
        ],
    };
    const IssueImportFinishGithubOAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueImportFinishGithubOAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportFinishGithubOAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OAuthTokenPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OAuthTokenPayloadFragmentDoc.definitions,
        ],
    };
    const IssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelFragmentDoc.definitions,
        ],
    };
    const IssueLabel_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const IssueLabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabels" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
        ],
    };
    const IssuePriorityValuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issuePriorityValues" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issuePriorityValues" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePriorityValueFragmentDoc.definitions,
        ],
    };
    const IssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelation" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationFragmentDoc.definitions,
        ],
    };
    const IssueRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
        ],
    };
    const IssueSearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueSearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "query" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "query" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "query" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issues" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const MilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "milestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Milestone" } }],
                            },
                        },
                    ],
                },
            },
            ...MilestoneFragmentDoc.definitions,
        ],
    };
    const Milestone_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "milestone_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
        ],
    };
    const MilestonesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "milestones" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestones" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestoneConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...MilestoneConnectionFragmentDoc.definitions,
        ],
    };
    const NotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notification" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscription" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notificationSubscriptions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionConnectionFragmentDoc.definitions,
        ],
    };
    const NotificationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notifications" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notifications" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationConnectionFragmentDoc.definitions,
        ],
    };
    const OrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationFragmentDoc.definitions,
        ],
    };
    const Organization_IntegrationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_integrations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "integrations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IntegrationConnectionFragmentDoc.definitions,
        ],
    };
    const Organization_MilestonesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_milestones" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "milestones" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestoneConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...MilestoneConnectionFragmentDoc.definitions,
        ],
    };
    const Organization_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
        ],
    };
    const Organization_UsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_users" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "users" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
        ],
    };
    const OrganizationExistsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationExists" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationExists" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "urlKey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationExistsPayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelFragmentDoc.definitions,
        ],
    };
    const OrganizationInvite_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationInvite_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const OrganizationInvitesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationInvites" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvites" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInviteConnectionFragmentDoc.definitions,
        ],
    };
    const ProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectFragmentDoc.definitions,
        ],
    };
    const Project_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const Project_LinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_links" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "links" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkConnectionFragmentDoc.definitions,
        ],
    };
    const Project_MembersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_members" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "members" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
        ],
    };
    const Project_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
        ],
    };
    const ProjectLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLink" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkFragmentDoc.definitions,
        ],
    };
    const ProjectLinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLinks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLinks" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkConnectionFragmentDoc.definitions,
        ],
    };
    const ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
        ],
    };
    const PushSubscriptionTestDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "pushSubscriptionTest" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionTest" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionPayloadFragmentDoc.definitions,
        ],
    };
    const ReactionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "reaction" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reaction" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                    ],
                },
            },
            ...ReactionFragmentDoc.definitions,
        ],
    };
    const ReactionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "reactions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ReactionConnectionFragmentDoc.definitions,
        ],
    };
    const SsoUrlFromEmailDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "ssoUrlFromEmail" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "ssoUrlFromEmail" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "email" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "email" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "isDesktop" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...SsoUrlFromEmailResponseFragmentDoc.definitions,
        ],
    };
    const SubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "subscription" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscription" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Subscription" } }],
                            },
                        },
                    ],
                },
            },
            ...SubscriptionFragmentDoc.definitions,
        ],
    };
    const SyncBootstrapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "syncBootstrap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "databaseVersion" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sinceSyncId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "syncGroups" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "syncBootstrap" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "databaseVersion" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "databaseVersion" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sinceSyncId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sinceSyncId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "syncGroups" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "syncGroups" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...SyncResponseFragmentDoc.definitions,
        ],
    };
    const TeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamFragmentDoc.definitions,
        ],
    };
    const Team_CyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_cycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "cycles" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CycleConnectionFragmentDoc.definitions,
        ],
    };
    const Team_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const Team_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
        ],
    };
    const Team_MembersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_members" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "members" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
        ],
    };
    const Team_MembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_memberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "memberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
        ],
    };
    const Team_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
        ],
    };
    const Team_StatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_states" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "states" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateConnectionFragmentDoc.definitions,
        ],
    };
    const Team_TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_templates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "templates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TemplateConnectionFragmentDoc.definitions,
        ],
    };
    const Team_WebhooksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_webhooks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "webhooks" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...WebhookConnectionFragmentDoc.definitions,
        ],
    };
    const TeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembership" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipFragmentDoc.definitions,
        ],
    };
    const TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMemberships" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
        ],
    };
    const TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teams" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
        ],
    };
    const TemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "template" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "templates" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templates" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const UserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
        ],
    };
    const User_AssignedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_assignedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "assignedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const User_CreatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_createdIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "createdIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const User_TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teamMemberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
        ],
    };
    const User_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
        ],
    };
    const UserSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFragmentDoc.definitions,
        ],
    };
    const UsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "users" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "users" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
        ],
    };
    const ViewerDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
        ],
    };
    const Viewer_AssignedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_assignedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "assignedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const Viewer_CreatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_createdIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "createdIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const Viewer_TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teamMemberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
        ],
    };
    const Viewer_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
        ],
    };
    const WebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "webhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookFragmentDoc.definitions,
        ],
    };
    const WebhooksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "webhooks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhooks" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookConnectionFragmentDoc.definitions,
        ],
    };
    const WorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateFragmentDoc.definitions,
        ],
    };
    const WorkflowState_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowState_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
        ],
    };
    const WorkflowStatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowStates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateConnectionFragmentDoc.definitions,
        ],
    };
    const ApiKeyCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "apiKeyCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKeyCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ApiKeyPayloadFragmentDoc.definitions,
        ],
    };
    const ApiKeyDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "apiKeyDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKeyDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const BillingEmailUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "billingEmailUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "BillingEmailUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "billingEmailUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "BillingEmailPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...BillingEmailPayloadFragmentDoc.definitions,
        ],
    };
    const CollaborativeDocumentUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "collaborativeDocumentUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CollaborationDocumentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "collaborativeDocumentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CollaborationDocumentUpdatePayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CollaborationDocumentUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const CommentCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "commentCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const CommentDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "commentDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CommentUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "commentUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const ContactCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "contactCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "contactCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ContactPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCsvExportReportDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCsvExportReport" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createCsvExportReport" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includePrivateTeamIds" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CreateCsvExportReportPayloadFragmentDoc.definitions,
        ],
    };
    const CreateOrganizationFromOnboardingDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createOrganizationFromOnboarding" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createOrganizationFromOnboarding" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "survey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
        ],
    };
    const CustomViewCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "customViewCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewPayloadFragmentDoc.definitions,
        ],
    };
    const CustomViewDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "customViewDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CustomViewUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "customViewUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewPayloadFragmentDoc.definitions,
        ],
    };
    const CycleArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "cycleArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CycleCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "cycleCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const CycleUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "cycleUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const DebugCreateSamlOrgDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "debugCreateSAMLOrg" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "debugCreateSAMLOrg" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DebugPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DebugPayloadFragmentDoc.definitions,
        ],
    };
    const DebugFailWithInternalErrorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "debugFailWithInternalError" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "debugFailWithInternalError" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DebugPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DebugPayloadFragmentDoc.definitions,
        ],
    };
    const DebugFailWithWarningDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "debugFailWithWarning" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "debugFailWithWarning" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DebugPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DebugPayloadFragmentDoc.definitions,
        ],
    };
    const EmailTokenUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailTokenUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailTokenUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
        ],
    };
    const EmailUnsubscribeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailUnsubscribe" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailUnsubscribe" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailUnsubscribePayloadFragmentDoc.definitions,
        ],
    };
    const EmailUserAccountAuthChallengeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...EmailUserAccountAuthChallengeResponseFragmentDoc.definitions,
        ],
    };
    const EmojiCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emojiCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojiCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiPayloadFragmentDoc.definitions,
        ],
    };
    const EmojiDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emojiDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojiDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const EventCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "eventCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EventCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "eventCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EventPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EventPayloadFragmentDoc.definitions,
        ],
    };
    const FavoriteCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "favoriteCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoritePayloadFragmentDoc.definitions,
        ],
    };
    const FavoriteDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "favoriteDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const FavoriteUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "favoriteUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoritePayloadFragmentDoc.definitions,
        ],
    };
    const FeedbackCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "feedbackCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "FeedbackCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "feedbackCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeedbackPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FeedbackPayloadFragmentDoc.definitions,
        ],
    };
    const FileUploadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "fileUpload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fileUpload" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "contentType" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filename" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "metaData" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "size" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "size" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UploadPayloadFragmentDoc.definitions,
        ],
    };
    const GoogleUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "googleUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "googleUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
        ],
    };
    const ImageUploadFromUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "imageUploadFromUrl" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "imageUploadFromUrl" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ImageUploadFromUrlPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationFigmaDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationFigma" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationFigma" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGithubConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGithubConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGitlabConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGitlabConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGitlabConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "accessToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "gitlabUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGoogleSheetsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGoogleSheets" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGoogleSheets" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationResourceArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationResourceArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationResourceArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSentryConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSentryConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSentryConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationSlug" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlack" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlack" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "shouldUseV2Auth" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackImportEmojisDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackImportEmojis" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackImportEmojis" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackPersonalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackPersonal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackPersonal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "shouldUseV2Auth" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackProjectPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackProjectPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackProjectPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationZendeskDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationZendesk" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationZendesk" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scope" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "subdomain" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IssueArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "trash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IssueCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateAsanaDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateAsana" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateAsana" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "asanaTeamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "asanaToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateClubhouseDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateClubhouse" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseTeamName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateClubhouse" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clubhouseTeamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clubhouseTeamName" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clubhouseToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateGithubDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateGithub" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateGithub" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubRepoName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubRepoOwner" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubShouldImportOrgProjects" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateJiraDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateJira" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateJira" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraHostname" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraProject" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueImportId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportDeletePayloadFragmentDoc.definitions,
        ],
    };
    const IssueLabelArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueLabelArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IssueLabelCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueLabelCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelPayloadFragmentDoc.definitions,
        ],
    };
    const IssueLabelUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueLabelUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelPayloadFragmentDoc.definitions,
        ],
    };
    const IssueRelationCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueRelationCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationPayloadFragmentDoc.definitions,
        ],
    };
    const IssueRelationDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueRelationDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IssueRelationUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueRelationUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationPayloadFragmentDoc.definitions,
        ],
    };
    const IssueUnarchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueUnarchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IssueUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const JoinOrganizationFromOnboardingDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
        ],
    };
    const LeaveOrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "leaveOrganization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "leaveOrganization" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
        ],
    };
    const MilestoneCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "milestoneCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "MilestoneCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestoneCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestonePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...MilestonePayloadFragmentDoc.definitions,
        ],
    };
    const MilestoneDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "milestoneDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestoneDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const MilestoneUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "milestoneUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "MilestoneUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestoneUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "MilestonePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...MilestonePayloadFragmentDoc.definitions,
        ],
    };
    const NotificationArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const NotificationCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationPayloadFragmentDoc.definitions,
        ],
    };
    const NotificationDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationSubscriptionCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionPayloadFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationSubscriptionDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const NotificationUnarchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationUnarchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const NotificationUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationPayloadFragmentDoc.definitions,
        ],
    };
    const OauthClientArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "oauthClientArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthClientArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const OauthClientCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "oauthClientCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OauthClientCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthClientCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OauthClientPayloadFragmentDoc.definitions,
        ],
    };
    const OauthClientRotateSecretDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "oauthClientRotateSecret" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthClientRotateSecret" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RotateSecretPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RotateSecretPayloadFragmentDoc.definitions,
        ],
    };
    const OauthClientUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "oauthClientUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OauthClientUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthClientUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OauthClientPayloadFragmentDoc.definitions,
        ],
    };
    const OauthTokenRevokeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "oauthTokenRevoke" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "appId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthTokenRevoke" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "appId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "appId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scope" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthTokenRevokePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OauthTokenRevokePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDeletePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationDeleteChallengeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationDeleteChallenge" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDeleteChallenge" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDeletePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationDomainCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationDomainCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDomainCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDomainPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDomainPayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationDomainDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationDomainDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDomainDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationDomainVerifyDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationDomainVerify" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomainVerificationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDomainVerify" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDomainPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDomainPayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationInviteCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationInviteCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInvitePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationInviteDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationInviteDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "UpdateOrganizationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const ProjectCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectLinkCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectLinkCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLinkCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectLinkDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectLinkDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLinkDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const ProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const PushSubscriptionCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "pushSubscriptionCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionPayloadFragmentDoc.definitions,
        ],
    };
    const PushSubscriptionDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "pushSubscriptionDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionPayloadFragmentDoc.definitions,
        ],
    };
    const ReactionCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "reactionCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ReactionPayloadFragmentDoc.definitions,
        ],
    };
    const ReactionDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "reactionDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const RefreshGoogleSheetsDataDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "refreshGoogleSheetsData" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "refreshGoogleSheetsData" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const ResentOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "resentOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resentOrganizationInvite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const SamlTokenUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "samlTokenUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "samlTokenUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
        ],
    };
    const SubscriptionArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "subscriptionArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptionArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const SubscriptionSessionCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "subscriptionSessionCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "plan" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptionSessionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "plan" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "plan" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SubscriptionSessionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SubscriptionSessionPayloadFragmentDoc.definitions,
        ],
    };
    const SubscriptionUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "subscriptionUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "SubscriptionUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptionUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SubscriptionPayloadFragmentDoc.definitions,
        ],
    };
    const SubscriptionUpdateSessionCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "subscriptionUpdateSessionCreate" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptionUpdateSessionCreate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SubscriptionSessionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SubscriptionSessionPayloadFragmentDoc.definitions,
        ],
    };
    const SubscriptionUpgradeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "subscriptionUpgrade" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "type" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptionUpgrade" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "type" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "type" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SubscriptionPayloadFragmentDoc.definitions,
        ],
    };
    const TeamArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "teamArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const TeamCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "teamCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "copySettingsFromTeamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const TeamDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "teamDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const TeamMembershipCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "teamMembershipCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipPayloadFragmentDoc.definitions,
        ],
    };
    const TeamMembershipDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "teamMembershipDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const TeamMembershipUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "teamMembershipUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipPayloadFragmentDoc.definitions,
        ],
    };
    const TeamUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "teamUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const TemplateCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "templateCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplatePayloadFragmentDoc.definitions,
        ],
    };
    const TemplateDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "templateDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const TemplateUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "templateUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplatePayloadFragmentDoc.definitions,
        ],
    };
    const UserDemoteAdminDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userDemoteAdmin" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userDemoteAdmin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserFlagUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userFlagUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userFlagUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "flag" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "operation" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFlagPayloadFragmentDoc.definitions,
        ],
    };
    const UserPromoteAdminDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userPromoteAdmin" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userPromoteAdmin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserSettingsFlagIncrementDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userSettingsFlagIncrement" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettingsFlagIncrement" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "flag" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFlagPayloadFragmentDoc.definitions,
        ],
    };
    const UserSettingsFlagsResetDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userSettingsFlagsReset" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettingsFlagsReset" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFlagsResetPayloadFragmentDoc.definitions,
        ],
    };
    const UserSettingsUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userSettingsUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettingsUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const UserSubscribeToNewsletterDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userSubscribeToNewsletter" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSubscribeToNewsletter" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "UserSubscribeToNewsletterPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserSubscribeToNewsletterPayloadFragmentDoc.definitions,
        ],
    };
    const UserSuspendDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userSuspend" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSuspend" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserUnsuspendDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userUnsuspend" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userUnsuspend" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UpdateUserInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserPayloadFragmentDoc.definitions,
        ],
    };
    const ViewPreferencesCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "viewPreferencesCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesPayloadFragmentDoc.definitions,
        ],
    };
    const ViewPreferencesDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "viewPreferencesDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const ViewPreferencesUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "viewPreferencesUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesPayloadFragmentDoc.definitions,
        ],
    };
    const WebhookCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "webhookCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookPayloadFragmentDoc.definitions,
        ],
    };
    const WebhookDeleteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "webhookDelete" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const WebhookUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "webhookUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookPayloadFragmentDoc.definitions,
        ],
    };
    const WorkflowStateArchiveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "workflowStateArchive" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ArchivePayloadFragmentDoc.definitions,
        ],
    };
    const WorkflowStateCreateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "workflowStateCreate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStatePayloadFragmentDoc.definitions,
        ],
    };
    const WorkflowStateUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "workflowStateUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStatePayloadFragmentDoc.definitions,
        ],
    };

    var _generated_documents = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get IssueRelationType () { return IssueRelationType; },
        get PaginationOrderBy () { return PaginationOrderBy; },
        get TrashOptionType () { return TrashOptionType; },
        get UserFlagType () { return UserFlagType; },
        get UserFlagUpdateOperation () { return UserFlagUpdateOperation; },
        get ViewPreferencesType () { return ViewPreferencesType; },
        get ViewType () { return ViewType; },
        FileUploadFragmentDoc: FileUploadFragmentDoc,
        TemplateFragmentDoc: TemplateFragmentDoc,
        UserFragmentDoc: UserFragmentDoc,
        UserAccountFragmentDoc: UserAccountFragmentDoc,
        DocumentStepFragmentDoc: DocumentStepFragmentDoc,
        SyncResponseFragmentDoc: SyncResponseFragmentDoc,
        ArchiveResponseFragmentDoc: ArchiveResponseFragmentDoc,
        GithubRepoFragmentDoc: GithubRepoFragmentDoc,
        GithubOrgFragmentDoc: GithubOrgFragmentDoc,
        OAuthTokenPayloadFragmentDoc: OAuthTokenPayloadFragmentDoc,
        AuthorizedApplicationFragmentDoc: AuthorizedApplicationFragmentDoc,
        UserAuthorizedApplicationFragmentDoc: UserAuthorizedApplicationFragmentDoc,
        ApplicationFragmentDoc: ApplicationFragmentDoc,
        GoogleSheetsSettingsFragmentDoc: GoogleSheetsSettingsFragmentDoc,
        SentrySettingsFragmentDoc: SentrySettingsFragmentDoc,
        SlackPostSettingsFragmentDoc: SlackPostSettingsFragmentDoc,
        ZendeskSettingsFragmentDoc: ZendeskSettingsFragmentDoc,
        IntegrationSettingsFragmentDoc: IntegrationSettingsFragmentDoc,
        SamlConfigurationFragmentDoc: SamlConfigurationFragmentDoc,
        UserSettingsFragmentDoc: UserSettingsFragmentDoc,
        SubscriptionFragmentDoc: SubscriptionFragmentDoc,
        ApiKeyFragmentDoc: ApiKeyFragmentDoc,
        PageInfoFragmentDoc: PageInfoFragmentDoc,
        ApiKeyConnectionFragmentDoc: ApiKeyConnectionFragmentDoc,
        ApiKeyPayloadFragmentDoc: ApiKeyPayloadFragmentDoc,
        ArchivePayloadFragmentDoc: ArchivePayloadFragmentDoc,
        AttachmentFragmentDoc: AttachmentFragmentDoc,
        AttachmentConnectionFragmentDoc: AttachmentConnectionFragmentDoc,
        AttachmentPayloadFragmentDoc: AttachmentPayloadFragmentDoc,
        OrganizationFragmentDoc: OrganizationFragmentDoc,
        AuthResolverResponseFragmentDoc: AuthResolverResponseFragmentDoc,
        InvoiceFragmentDoc: InvoiceFragmentDoc,
        CardFragmentDoc: CardFragmentDoc,
        BillingDetailsPayloadFragmentDoc: BillingDetailsPayloadFragmentDoc,
        BillingEmailPayloadFragmentDoc: BillingEmailPayloadFragmentDoc,
        StepsResponseFragmentDoc: StepsResponseFragmentDoc,
        CollaborationDocumentUpdatePayloadFragmentDoc: CollaborationDocumentUpdatePayloadFragmentDoc,
        CommentFragmentDoc: CommentFragmentDoc,
        CommentConnectionFragmentDoc: CommentConnectionFragmentDoc,
        CommentPayloadFragmentDoc: CommentPayloadFragmentDoc,
        ContactPayloadFragmentDoc: ContactPayloadFragmentDoc,
        CreateCsvExportReportPayloadFragmentDoc: CreateCsvExportReportPayloadFragmentDoc,
        CreateOrJoinOrganizationResponseFragmentDoc: CreateOrJoinOrganizationResponseFragmentDoc,
        CustomViewFragmentDoc: CustomViewFragmentDoc,
        CustomViewConnectionFragmentDoc: CustomViewConnectionFragmentDoc,
        CustomViewPayloadFragmentDoc: CustomViewPayloadFragmentDoc,
        CycleFragmentDoc: CycleFragmentDoc,
        CycleConnectionFragmentDoc: CycleConnectionFragmentDoc,
        CyclePayloadFragmentDoc: CyclePayloadFragmentDoc,
        DebugPayloadFragmentDoc: DebugPayloadFragmentDoc,
        EmailUnsubscribePayloadFragmentDoc: EmailUnsubscribePayloadFragmentDoc,
        EmailUserAccountAuthChallengeResponseFragmentDoc: EmailUserAccountAuthChallengeResponseFragmentDoc,
        EmojiFragmentDoc: EmojiFragmentDoc,
        EmojiConnectionFragmentDoc: EmojiConnectionFragmentDoc,
        EmojiPayloadFragmentDoc: EmojiPayloadFragmentDoc,
        EventPayloadFragmentDoc: EventPayloadFragmentDoc,
        FavoriteFragmentDoc: FavoriteFragmentDoc,
        FavoriteConnectionFragmentDoc: FavoriteConnectionFragmentDoc,
        FavoritePayloadFragmentDoc: FavoritePayloadFragmentDoc,
        FeedbackPayloadFragmentDoc: FeedbackPayloadFragmentDoc,
        FigmaEmbedFragmentDoc: FigmaEmbedFragmentDoc,
        FigmaEmbedPayloadFragmentDoc: FigmaEmbedPayloadFragmentDoc,
        ImageUploadFromUrlPayloadFragmentDoc: ImageUploadFromUrlPayloadFragmentDoc,
        IntegrationFragmentDoc: IntegrationFragmentDoc,
        IntegrationConnectionFragmentDoc: IntegrationConnectionFragmentDoc,
        IntegrationPayloadFragmentDoc: IntegrationPayloadFragmentDoc,
        CommitPayloadFragmentDoc: CommitPayloadFragmentDoc,
        PullRequestPayloadFragmentDoc: PullRequestPayloadFragmentDoc,
        SentryIssuePayloadFragmentDoc: SentryIssuePayloadFragmentDoc,
        IntegrationResourceDataFragmentDoc: IntegrationResourceDataFragmentDoc,
        IntegrationResourceFragmentDoc: IntegrationResourceFragmentDoc,
        IntegrationResourceConnectionFragmentDoc: IntegrationResourceConnectionFragmentDoc,
        InviteDataFragmentDoc: InviteDataFragmentDoc,
        InvitePagePayloadFragmentDoc: InvitePagePayloadFragmentDoc,
        IssueFragmentDoc: IssueFragmentDoc,
        IssueConnectionFragmentDoc: IssueConnectionFragmentDoc,
        IssueHistoryFragmentDoc: IssueHistoryFragmentDoc,
        IssueHistoryConnectionFragmentDoc: IssueHistoryConnectionFragmentDoc,
        IssueImportFragmentDoc: IssueImportFragmentDoc,
        IssueImportDeletePayloadFragmentDoc: IssueImportDeletePayloadFragmentDoc,
        IssueImportPayloadFragmentDoc: IssueImportPayloadFragmentDoc,
        IssueLabelFragmentDoc: IssueLabelFragmentDoc,
        IssueLabelConnectionFragmentDoc: IssueLabelConnectionFragmentDoc,
        IssueLabelPayloadFragmentDoc: IssueLabelPayloadFragmentDoc,
        IssuePayloadFragmentDoc: IssuePayloadFragmentDoc,
        IssuePriorityValueFragmentDoc: IssuePriorityValueFragmentDoc,
        IssueRelationFragmentDoc: IssueRelationFragmentDoc,
        IssueRelationConnectionFragmentDoc: IssueRelationConnectionFragmentDoc,
        IssueRelationPayloadFragmentDoc: IssueRelationPayloadFragmentDoc,
        MilestoneFragmentDoc: MilestoneFragmentDoc,
        MilestoneConnectionFragmentDoc: MilestoneConnectionFragmentDoc,
        MilestonePayloadFragmentDoc: MilestonePayloadFragmentDoc,
        NotificationFragmentDoc: NotificationFragmentDoc,
        NotificationConnectionFragmentDoc: NotificationConnectionFragmentDoc,
        NotificationPayloadFragmentDoc: NotificationPayloadFragmentDoc,
        NotificationSubscriptionFragmentDoc: NotificationSubscriptionFragmentDoc,
        NotificationSubscriptionConnectionFragmentDoc: NotificationSubscriptionConnectionFragmentDoc,
        NotificationSubscriptionPayloadFragmentDoc: NotificationSubscriptionPayloadFragmentDoc,
        OauthClientFragmentDoc: OauthClientFragmentDoc,
        OauthClientPayloadFragmentDoc: OauthClientPayloadFragmentDoc,
        OauthTokenRevokePayloadFragmentDoc: OauthTokenRevokePayloadFragmentDoc,
        OrganizationDeletePayloadFragmentDoc: OrganizationDeletePayloadFragmentDoc,
        OrganizationDomainFragmentDoc: OrganizationDomainFragmentDoc,
        OrganizationDomainPayloadFragmentDoc: OrganizationDomainPayloadFragmentDoc,
        OrganizationDomainSimplePayloadFragmentDoc: OrganizationDomainSimplePayloadFragmentDoc,
        OrganizationExistsPayloadFragmentDoc: OrganizationExistsPayloadFragmentDoc,
        OrganizationInviteFragmentDoc: OrganizationInviteFragmentDoc,
        OrganizationInviteConnectionFragmentDoc: OrganizationInviteConnectionFragmentDoc,
        OrganizationInvitePayloadFragmentDoc: OrganizationInvitePayloadFragmentDoc,
        OrganizationPayloadFragmentDoc: OrganizationPayloadFragmentDoc,
        ProjectFragmentDoc: ProjectFragmentDoc,
        ProjectConnectionFragmentDoc: ProjectConnectionFragmentDoc,
        ProjectLinkFragmentDoc: ProjectLinkFragmentDoc,
        ProjectLinkConnectionFragmentDoc: ProjectLinkConnectionFragmentDoc,
        ProjectLinkPayloadFragmentDoc: ProjectLinkPayloadFragmentDoc,
        ProjectPayloadFragmentDoc: ProjectPayloadFragmentDoc,
        PushSubscriptionFragmentDoc: PushSubscriptionFragmentDoc,
        PushSubscriptionConnectionFragmentDoc: PushSubscriptionConnectionFragmentDoc,
        PushSubscriptionPayloadFragmentDoc: PushSubscriptionPayloadFragmentDoc,
        ReactionFragmentDoc: ReactionFragmentDoc,
        ReactionConnectionFragmentDoc: ReactionConnectionFragmentDoc,
        ReactionPayloadFragmentDoc: ReactionPayloadFragmentDoc,
        RotateSecretPayloadFragmentDoc: RotateSecretPayloadFragmentDoc,
        SsoUrlFromEmailResponseFragmentDoc: SsoUrlFromEmailResponseFragmentDoc,
        SubscriptionPayloadFragmentDoc: SubscriptionPayloadFragmentDoc,
        SubscriptionSessionPayloadFragmentDoc: SubscriptionSessionPayloadFragmentDoc,
        SynchronizedPayloadFragmentDoc: SynchronizedPayloadFragmentDoc,
        TeamFragmentDoc: TeamFragmentDoc,
        TeamConnectionFragmentDoc: TeamConnectionFragmentDoc,
        TeamMembershipFragmentDoc: TeamMembershipFragmentDoc,
        TeamMembershipConnectionFragmentDoc: TeamMembershipConnectionFragmentDoc,
        TeamMembershipPayloadFragmentDoc: TeamMembershipPayloadFragmentDoc,
        TeamPayloadFragmentDoc: TeamPayloadFragmentDoc,
        TemplateConnectionFragmentDoc: TemplateConnectionFragmentDoc,
        TemplatePayloadFragmentDoc: TemplatePayloadFragmentDoc,
        UploadFileHeaderFragmentDoc: UploadFileHeaderFragmentDoc,
        UploadFileFragmentDoc: UploadFileFragmentDoc,
        UploadPayloadFragmentDoc: UploadPayloadFragmentDoc,
        UserAdminPayloadFragmentDoc: UserAdminPayloadFragmentDoc,
        UserConnectionFragmentDoc: UserConnectionFragmentDoc,
        UserPayloadFragmentDoc: UserPayloadFragmentDoc,
        UserSettingsFlagPayloadFragmentDoc: UserSettingsFlagPayloadFragmentDoc,
        UserSettingsFlagsResetPayloadFragmentDoc: UserSettingsFlagsResetPayloadFragmentDoc,
        UserSettingsPayloadFragmentDoc: UserSettingsPayloadFragmentDoc,
        UserSubscribeToNewsletterPayloadFragmentDoc: UserSubscribeToNewsletterPayloadFragmentDoc,
        ViewPreferencesFragmentDoc: ViewPreferencesFragmentDoc,
        ViewPreferencesPayloadFragmentDoc: ViewPreferencesPayloadFragmentDoc,
        WebhookFragmentDoc: WebhookFragmentDoc,
        WebhookConnectionFragmentDoc: WebhookConnectionFragmentDoc,
        WebhookPayloadFragmentDoc: WebhookPayloadFragmentDoc,
        WorkflowStateFragmentDoc: WorkflowStateFragmentDoc,
        WorkflowStateConnectionFragmentDoc: WorkflowStateConnectionFragmentDoc,
        WorkflowStatePayloadFragmentDoc: WorkflowStatePayloadFragmentDoc,
        ApiKeysDocument: ApiKeysDocument,
        ApplicationWithAuthorizationDocument: ApplicationWithAuthorizationDocument,
        ArchivedModelSyncDocument: ArchivedModelSyncDocument,
        ArchivedModelsSyncDocument: ArchivedModelsSyncDocument,
        AttachmentDocument: AttachmentDocument,
        AttachmentIssueDocument: AttachmentIssueDocument,
        AttachmentIssue_AttachmentsDocument: AttachmentIssue_AttachmentsDocument,
        AttachmentIssue_ChildrenDocument: AttachmentIssue_ChildrenDocument,
        AttachmentIssue_CommentsDocument: AttachmentIssue_CommentsDocument,
        AttachmentIssue_HistoryDocument: AttachmentIssue_HistoryDocument,
        AttachmentIssue_InverseRelationsDocument: AttachmentIssue_InverseRelationsDocument,
        AttachmentIssue_LabelsDocument: AttachmentIssue_LabelsDocument,
        AttachmentIssue_RelationsDocument: AttachmentIssue_RelationsDocument,
        AttachmentIssue_SubscribersDocument: AttachmentIssue_SubscribersDocument,
        AttachmentsDocument: AttachmentsDocument,
        AuthorizedApplicationsDocument: AuthorizedApplicationsDocument,
        AvailableUsersDocument: AvailableUsersDocument,
        BillingDetailsDocument: BillingDetailsDocument,
        BillingDetails_PaymentMethodDocument: BillingDetails_PaymentMethodDocument,
        CollaborativeDocumentJoinDocument: CollaborativeDocumentJoinDocument,
        CollaborativeDocumentJoin_StepsDocument: CollaborativeDocumentJoin_StepsDocument,
        CommentDocument: CommentDocument,
        CommentsDocument: CommentsDocument,
        CustomViewDocument: CustomViewDocument,
        CustomViewsDocument: CustomViewsDocument,
        CycleDocument: CycleDocument,
        Cycle_IssuesDocument: Cycle_IssuesDocument,
        Cycle_UncompletedIssuesUponCloseDocument: Cycle_UncompletedIssuesUponCloseDocument,
        CyclesDocument: CyclesDocument,
        EmojiDocument: EmojiDocument,
        EmojisDocument: EmojisDocument,
        FavoriteDocument: FavoriteDocument,
        FavoritesDocument: FavoritesDocument,
        FigmaEmbedInfoDocument: FigmaEmbedInfoDocument,
        FigmaEmbedInfo_FigmaEmbedDocument: FigmaEmbedInfo_FigmaEmbedDocument,
        IntegrationDocument: IntegrationDocument,
        IntegrationsDocument: IntegrationsDocument,
        InviteInfoDocument: InviteInfoDocument,
        InviteInfo_InviteDataDocument: InviteInfo_InviteDataDocument,
        IssueDocument: IssueDocument,
        Issue_AttachmentsDocument: Issue_AttachmentsDocument,
        Issue_ChildrenDocument: Issue_ChildrenDocument,
        Issue_CommentsDocument: Issue_CommentsDocument,
        Issue_HistoryDocument: Issue_HistoryDocument,
        Issue_InverseRelationsDocument: Issue_InverseRelationsDocument,
        Issue_LabelsDocument: Issue_LabelsDocument,
        Issue_RelationsDocument: Issue_RelationsDocument,
        Issue_SubscribersDocument: Issue_SubscribersDocument,
        IssueImportFinishGithubOAuthDocument: IssueImportFinishGithubOAuthDocument,
        IssueLabelDocument: IssueLabelDocument,
        IssueLabel_IssuesDocument: IssueLabel_IssuesDocument,
        IssueLabelsDocument: IssueLabelsDocument,
        IssuePriorityValuesDocument: IssuePriorityValuesDocument,
        IssueRelationDocument: IssueRelationDocument,
        IssueRelationsDocument: IssueRelationsDocument,
        IssueSearchDocument: IssueSearchDocument,
        IssuesDocument: IssuesDocument,
        MilestoneDocument: MilestoneDocument,
        Milestone_ProjectsDocument: Milestone_ProjectsDocument,
        MilestonesDocument: MilestonesDocument,
        NotificationDocument: NotificationDocument,
        NotificationSubscriptionDocument: NotificationSubscriptionDocument,
        NotificationSubscriptionsDocument: NotificationSubscriptionsDocument,
        NotificationsDocument: NotificationsDocument,
        OrganizationDocument: OrganizationDocument,
        Organization_IntegrationsDocument: Organization_IntegrationsDocument,
        Organization_MilestonesDocument: Organization_MilestonesDocument,
        Organization_TeamsDocument: Organization_TeamsDocument,
        Organization_UsersDocument: Organization_UsersDocument,
        OrganizationExistsDocument: OrganizationExistsDocument,
        OrganizationInviteDocument: OrganizationInviteDocument,
        OrganizationInvite_IssuesDocument: OrganizationInvite_IssuesDocument,
        OrganizationInvitesDocument: OrganizationInvitesDocument,
        ProjectDocument: ProjectDocument,
        Project_IssuesDocument: Project_IssuesDocument,
        Project_LinksDocument: Project_LinksDocument,
        Project_MembersDocument: Project_MembersDocument,
        Project_TeamsDocument: Project_TeamsDocument,
        ProjectLinkDocument: ProjectLinkDocument,
        ProjectLinksDocument: ProjectLinksDocument,
        ProjectsDocument: ProjectsDocument,
        PushSubscriptionTestDocument: PushSubscriptionTestDocument,
        ReactionDocument: ReactionDocument,
        ReactionsDocument: ReactionsDocument,
        SsoUrlFromEmailDocument: SsoUrlFromEmailDocument,
        SubscriptionDocument: SubscriptionDocument,
        SyncBootstrapDocument: SyncBootstrapDocument,
        TeamDocument: TeamDocument,
        Team_CyclesDocument: Team_CyclesDocument,
        Team_IssuesDocument: Team_IssuesDocument,
        Team_LabelsDocument: Team_LabelsDocument,
        Team_MembersDocument: Team_MembersDocument,
        Team_MembershipsDocument: Team_MembershipsDocument,
        Team_ProjectsDocument: Team_ProjectsDocument,
        Team_StatesDocument: Team_StatesDocument,
        Team_TemplatesDocument: Team_TemplatesDocument,
        Team_WebhooksDocument: Team_WebhooksDocument,
        TeamMembershipDocument: TeamMembershipDocument,
        TeamMembershipsDocument: TeamMembershipsDocument,
        TeamsDocument: TeamsDocument,
        TemplateDocument: TemplateDocument,
        TemplatesDocument: TemplatesDocument,
        UserDocument: UserDocument,
        User_AssignedIssuesDocument: User_AssignedIssuesDocument,
        User_CreatedIssuesDocument: User_CreatedIssuesDocument,
        User_TeamMembershipsDocument: User_TeamMembershipsDocument,
        User_TeamsDocument: User_TeamsDocument,
        UserSettingsDocument: UserSettingsDocument,
        UsersDocument: UsersDocument,
        ViewerDocument: ViewerDocument,
        Viewer_AssignedIssuesDocument: Viewer_AssignedIssuesDocument,
        Viewer_CreatedIssuesDocument: Viewer_CreatedIssuesDocument,
        Viewer_TeamMembershipsDocument: Viewer_TeamMembershipsDocument,
        Viewer_TeamsDocument: Viewer_TeamsDocument,
        WebhookDocument: WebhookDocument,
        WebhooksDocument: WebhooksDocument,
        WorkflowStateDocument: WorkflowStateDocument,
        WorkflowState_IssuesDocument: WorkflowState_IssuesDocument,
        WorkflowStatesDocument: WorkflowStatesDocument,
        ApiKeyCreateDocument: ApiKeyCreateDocument,
        ApiKeyDeleteDocument: ApiKeyDeleteDocument,
        AttachmentArchiveDocument: AttachmentArchiveDocument,
        AttachmentCreateDocument: AttachmentCreateDocument,
        AttachmentUpdateDocument: AttachmentUpdateDocument,
        BillingEmailUpdateDocument: BillingEmailUpdateDocument,
        CollaborativeDocumentUpdateDocument: CollaborativeDocumentUpdateDocument,
        CommentCreateDocument: CommentCreateDocument,
        CommentDeleteDocument: CommentDeleteDocument,
        CommentUpdateDocument: CommentUpdateDocument,
        ContactCreateDocument: ContactCreateDocument,
        CreateCsvExportReportDocument: CreateCsvExportReportDocument,
        CreateOrganizationFromOnboardingDocument: CreateOrganizationFromOnboardingDocument,
        CustomViewCreateDocument: CustomViewCreateDocument,
        CustomViewDeleteDocument: CustomViewDeleteDocument,
        CustomViewUpdateDocument: CustomViewUpdateDocument,
        CycleArchiveDocument: CycleArchiveDocument,
        CycleCreateDocument: CycleCreateDocument,
        CycleUpdateDocument: CycleUpdateDocument,
        DebugCreateSamlOrgDocument: DebugCreateSamlOrgDocument,
        DebugFailWithInternalErrorDocument: DebugFailWithInternalErrorDocument,
        DebugFailWithWarningDocument: DebugFailWithWarningDocument,
        EmailTokenUserAccountAuthDocument: EmailTokenUserAccountAuthDocument,
        EmailUnsubscribeDocument: EmailUnsubscribeDocument,
        EmailUserAccountAuthChallengeDocument: EmailUserAccountAuthChallengeDocument,
        EmojiCreateDocument: EmojiCreateDocument,
        EmojiDeleteDocument: EmojiDeleteDocument,
        EventCreateDocument: EventCreateDocument,
        FavoriteCreateDocument: FavoriteCreateDocument,
        FavoriteDeleteDocument: FavoriteDeleteDocument,
        FavoriteUpdateDocument: FavoriteUpdateDocument,
        FeedbackCreateDocument: FeedbackCreateDocument,
        FileUploadDocument: FileUploadDocument,
        GoogleUserAccountAuthDocument: GoogleUserAccountAuthDocument,
        ImageUploadFromUrlDocument: ImageUploadFromUrlDocument,
        IntegrationDeleteDocument: IntegrationDeleteDocument,
        IntegrationFigmaDocument: IntegrationFigmaDocument,
        IntegrationGithubConnectDocument: IntegrationGithubConnectDocument,
        IntegrationGitlabConnectDocument: IntegrationGitlabConnectDocument,
        IntegrationGoogleSheetsDocument: IntegrationGoogleSheetsDocument,
        IntegrationResourceArchiveDocument: IntegrationResourceArchiveDocument,
        IntegrationSentryConnectDocument: IntegrationSentryConnectDocument,
        IntegrationSlackDocument: IntegrationSlackDocument,
        IntegrationSlackImportEmojisDocument: IntegrationSlackImportEmojisDocument,
        IntegrationSlackPersonalDocument: IntegrationSlackPersonalDocument,
        IntegrationSlackPostDocument: IntegrationSlackPostDocument,
        IntegrationSlackProjectPostDocument: IntegrationSlackProjectPostDocument,
        IntegrationZendeskDocument: IntegrationZendeskDocument,
        IssueArchiveDocument: IssueArchiveDocument,
        IssueCreateDocument: IssueCreateDocument,
        IssueImportCreateAsanaDocument: IssueImportCreateAsanaDocument,
        IssueImportCreateClubhouseDocument: IssueImportCreateClubhouseDocument,
        IssueImportCreateGithubDocument: IssueImportCreateGithubDocument,
        IssueImportCreateJiraDocument: IssueImportCreateJiraDocument,
        IssueImportDeleteDocument: IssueImportDeleteDocument,
        IssueLabelArchiveDocument: IssueLabelArchiveDocument,
        IssueLabelCreateDocument: IssueLabelCreateDocument,
        IssueLabelUpdateDocument: IssueLabelUpdateDocument,
        IssueRelationCreateDocument: IssueRelationCreateDocument,
        IssueRelationDeleteDocument: IssueRelationDeleteDocument,
        IssueRelationUpdateDocument: IssueRelationUpdateDocument,
        IssueUnarchiveDocument: IssueUnarchiveDocument,
        IssueUpdateDocument: IssueUpdateDocument,
        JoinOrganizationFromOnboardingDocument: JoinOrganizationFromOnboardingDocument,
        LeaveOrganizationDocument: LeaveOrganizationDocument,
        MilestoneCreateDocument: MilestoneCreateDocument,
        MilestoneDeleteDocument: MilestoneDeleteDocument,
        MilestoneUpdateDocument: MilestoneUpdateDocument,
        NotificationArchiveDocument: NotificationArchiveDocument,
        NotificationCreateDocument: NotificationCreateDocument,
        NotificationDeleteDocument: NotificationDeleteDocument,
        NotificationSubscriptionCreateDocument: NotificationSubscriptionCreateDocument,
        NotificationSubscriptionDeleteDocument: NotificationSubscriptionDeleteDocument,
        NotificationUnarchiveDocument: NotificationUnarchiveDocument,
        NotificationUpdateDocument: NotificationUpdateDocument,
        OauthClientArchiveDocument: OauthClientArchiveDocument,
        OauthClientCreateDocument: OauthClientCreateDocument,
        OauthClientRotateSecretDocument: OauthClientRotateSecretDocument,
        OauthClientUpdateDocument: OauthClientUpdateDocument,
        OauthTokenRevokeDocument: OauthTokenRevokeDocument,
        OrganizationDeleteDocument: OrganizationDeleteDocument,
        OrganizationDeleteChallengeDocument: OrganizationDeleteChallengeDocument,
        OrganizationDomainCreateDocument: OrganizationDomainCreateDocument,
        OrganizationDomainDeleteDocument: OrganizationDomainDeleteDocument,
        OrganizationDomainVerifyDocument: OrganizationDomainVerifyDocument,
        OrganizationInviteCreateDocument: OrganizationInviteCreateDocument,
        OrganizationInviteDeleteDocument: OrganizationInviteDeleteDocument,
        OrganizationUpdateDocument: OrganizationUpdateDocument,
        ProjectArchiveDocument: ProjectArchiveDocument,
        ProjectCreateDocument: ProjectCreateDocument,
        ProjectLinkCreateDocument: ProjectLinkCreateDocument,
        ProjectLinkDeleteDocument: ProjectLinkDeleteDocument,
        ProjectUpdateDocument: ProjectUpdateDocument,
        PushSubscriptionCreateDocument: PushSubscriptionCreateDocument,
        PushSubscriptionDeleteDocument: PushSubscriptionDeleteDocument,
        ReactionCreateDocument: ReactionCreateDocument,
        ReactionDeleteDocument: ReactionDeleteDocument,
        RefreshGoogleSheetsDataDocument: RefreshGoogleSheetsDataDocument,
        ResentOrganizationInviteDocument: ResentOrganizationInviteDocument,
        SamlTokenUserAccountAuthDocument: SamlTokenUserAccountAuthDocument,
        SubscriptionArchiveDocument: SubscriptionArchiveDocument,
        SubscriptionSessionCreateDocument: SubscriptionSessionCreateDocument,
        SubscriptionUpdateDocument: SubscriptionUpdateDocument,
        SubscriptionUpdateSessionCreateDocument: SubscriptionUpdateSessionCreateDocument,
        SubscriptionUpgradeDocument: SubscriptionUpgradeDocument,
        TeamArchiveDocument: TeamArchiveDocument,
        TeamCreateDocument: TeamCreateDocument,
        TeamDeleteDocument: TeamDeleteDocument,
        TeamMembershipCreateDocument: TeamMembershipCreateDocument,
        TeamMembershipDeleteDocument: TeamMembershipDeleteDocument,
        TeamMembershipUpdateDocument: TeamMembershipUpdateDocument,
        TeamUpdateDocument: TeamUpdateDocument,
        TemplateCreateDocument: TemplateCreateDocument,
        TemplateDeleteDocument: TemplateDeleteDocument,
        TemplateUpdateDocument: TemplateUpdateDocument,
        UserDemoteAdminDocument: UserDemoteAdminDocument,
        UserFlagUpdateDocument: UserFlagUpdateDocument,
        UserPromoteAdminDocument: UserPromoteAdminDocument,
        UserSettingsFlagIncrementDocument: UserSettingsFlagIncrementDocument,
        UserSettingsFlagsResetDocument: UserSettingsFlagsResetDocument,
        UserSettingsUpdateDocument: UserSettingsUpdateDocument,
        UserSubscribeToNewsletterDocument: UserSubscribeToNewsletterDocument,
        UserSuspendDocument: UserSuspendDocument,
        UserUnsuspendDocument: UserUnsuspendDocument,
        UserUpdateDocument: UserUpdateDocument,
        ViewPreferencesCreateDocument: ViewPreferencesCreateDocument,
        ViewPreferencesDeleteDocument: ViewPreferencesDeleteDocument,
        ViewPreferencesUpdateDocument: ViewPreferencesUpdateDocument,
        WebhookCreateDocument: WebhookCreateDocument,
        WebhookDeleteDocument: WebhookDeleteDocument,
        WebhookUpdateDocument: WebhookUpdateDocument,
        WorkflowStateArchiveDocument: WorkflowStateArchiveDocument,
        WorkflowStateCreateDocument: WorkflowStateCreateDocument,
        WorkflowStateUpdateDocument: WorkflowStateUpdateDocument
    });

    /**
     * Base class to provide a request function
     *
     * @param request - function to call the graphql client
     */
    class Request {
        constructor(request) {
            this._request = request;
        }
    }
    /**
     * Abstract class for connection models containing a list of nodes and pagination information
     * Follows the Relay spec
     */
    class LinearConnection extends Request {
    }
    /**
     * The base connection class to provide pagination
     * Follows the Relay spec
     *
     * @param request - function to call the graphql client
     * @param fetch - Function to refetch the connection given different pagination variables
     * @param nodes - The list of models to initialize the connection
     * @param pageInfo - The pagination information to initialize the connection
     */
    class Connection extends LinearConnection {
        constructor(request, fetch, nodes, pageInfo) {
            super(request);
            this._fetch = fetch;
            this.nodes = nodes;
            this.pageInfo = pageInfo;
        }
        /** Add nodes to the end of the existing nodes */
        _appendNodes(nodes) {
            var _a;
            this.nodes = nodes ? [...((_a = this.nodes) !== null && _a !== void 0 ? _a : []), ...nodes] : this.nodes;
        }
        /** Add nodes to the start of the existing nodes */
        _prependNodes(nodes) {
            var _a;
            this.nodes = nodes ? [...nodes, ...((_a = this.nodes) !== null && _a !== void 0 ? _a : [])] : this.nodes;
        }
        /** Update the pagination end cursor */
        _appendPageInfo(pageInfo) {
            var _a, _b;
            if (this.pageInfo) {
                this.pageInfo.endCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.endCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
                this.pageInfo.hasNextPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasNextPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasNextPage;
            }
        }
        /** Update the pagination start cursor */
        _prependPageInfo(pageInfo) {
            var _a, _b;
            if (this.pageInfo) {
                this.pageInfo.startCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.startCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
                this.pageInfo.hasPreviousPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasPreviousPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasPreviousPage;
            }
        }
        /** Fetch the next page of results and append to nodes */
        fetchNext() {
            var _a, _b;
            return ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasNextPage) ? this._fetch({ after: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.endCursor }).then(response => {
                this._appendNodes(response === null || response === void 0 ? void 0 : response.nodes);
                this._appendPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
                return this;
            })
                : Promise.resolve(this);
        }
        /** Fetch the previous page of results and prepend to nodes */
        fetchPrevious() {
            var _a, _b;
            return ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasPreviousPage) ? this._fetch({ before: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.startCursor }).then(response => {
                this._prependNodes(response === null || response === void 0 ? void 0 : response.nodes);
                this._prependPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
                return this;
            })
                : Promise.resolve(this);
        }
    }
    /**
     * Function to parse custom scalars into Date types
     *
     * @param value - value to parse
     */
    function parseDate(value) {
        try {
            return value ? new Date(value) : undefined;
        }
        catch (e) {
            return undefined;
        }
    }
    /**
     * Function to parse custom scalars into JSON objects
     *
     * @param value - value to parse
     */
    function parseJson(value) {
        try {
            return value ? JSON.parse(value) : undefined;
        }
        catch (e) {
            return undefined;
        }
    }
    /**
     * An API key. Grants access to the user's resources.
     *
     * @param request - function to call the graphql client
     * @param data - L.ApiKeyFragment response data
     */
    class ApiKey extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.label = (_d = data.label) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
        }
        /** Deletes an API key. */
        delete() {
            return this.id ? new ApiKeyDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * ApiKeyConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ApiKeyConnection model
     * @param data - ApiKeyConnection response data
     */
    class ApiKeyConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new ApiKey(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * ApiKeyPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ApiKeyPayloadFragment response data
     */
    class ApiKeyPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.apiKey = data.apiKey ? new ApiKey(request, data.apiKey) : undefined;
        }
    }
    /**
     * Public information of the OAuth application.
     *
     * @param request - function to call the graphql client
     * @param data - L.ApplicationFragment response data
     */
    class Application extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.clientId = (_a = data.clientId) !== null && _a !== void 0 ? _a : undefined;
            this.description = (_b = data.description) !== null && _b !== void 0 ? _b : undefined;
            this.developer = (_c = data.developer) !== null && _c !== void 0 ? _c : undefined;
            this.developerUrl = (_d = data.developerUrl) !== null && _d !== void 0 ? _d : undefined;
            this.imageUrl = (_e = data.imageUrl) !== null && _e !== void 0 ? _e : undefined;
            this.name = (_f = data.name) !== null && _f !== void 0 ? _f : undefined;
        }
    }
    /**
     * ArchivePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ArchivePayloadFragment response data
     */
    class ArchivePayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * Contains requested archived model objects.
     *
     * @param request - function to call the graphql client
     * @param data - L.ArchiveResponseFragment response data
     */
    class ArchiveResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archive = (_a = data.archive) !== null && _a !== void 0 ? _a : undefined;
            this.databaseVersion = (_b = data.databaseVersion) !== null && _b !== void 0 ? _b : undefined;
            this.totalCount = (_c = data.totalCount) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * [Alpha] Issue attachment (e.g. support ticket, pull request).
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentFragment response data
     */
    class Attachment extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.groupBySource = (_c = data.groupBySource) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.metadata = (_e = parseJson(data.metadata)) !== null && _e !== void 0 ? _e : undefined;
            this.source = (_f = parseJson(data.source)) !== null && _f !== void 0 ? _f : undefined;
            this.subtitle = (_g = data.subtitle) !== null && _g !== void 0 ? _g : undefined;
            this.title = (_h = data.title) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.url = (_k = data.url) !== null && _k !== void 0 ? _k : undefined;
            this._issue = (_l = data.issue) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The issue this attachment belongs to. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** [Alpha] Archives an issue attachment. */
        archive() {
            return this.id ? new AttachmentArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** [Alpha] Updates an existing issue attachment. */
        update(input) {
            return this.id ? new AttachmentUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * AttachmentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this AttachmentConnection model
     * @param data - AttachmentConnection response data
     */
    class AttachmentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Attachment(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * AttachmentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentPayloadFragment response data
     */
    class AttachmentPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._attachment = (_c = data.attachment) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The issue attachment that was created. */
        get attachment() {
            var _a, _b;
            return ((_a = this._attachment) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentQuery(this._request).fetch((_b = this._attachment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * AuthResolverResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthResolverResponseFragment response data
     */
    class AuthResolverResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.allowDomainAccess = (_a = data.allowDomainAccess) !== null && _a !== void 0 ? _a : undefined;
            this.email = (_b = data.email) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.token = (_d = data.token) !== null && _d !== void 0 ? _d : undefined;
            this.availableOrganizations = data.availableOrganizations
                ? data.availableOrganizations.map(node => new Organization(request, node))
                : undefined;
            this.users = data.users ? data.users.map(node => new User(request, node)) : undefined;
        }
    }
    /**
     * Public information of the OAuth application, plus the authorized scopes for a given user.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthorizedApplicationFragment response data
     */
    class AuthorizedApplication extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.appId = (_a = data.appId) !== null && _a !== void 0 ? _a : undefined;
            this.clientId = (_b = data.clientId) !== null && _b !== void 0 ? _b : undefined;
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.developer = (_d = data.developer) !== null && _d !== void 0 ? _d : undefined;
            this.developerUrl = (_e = data.developerUrl) !== null && _e !== void 0 ? _e : undefined;
            this.imageUrl = (_f = data.imageUrl) !== null && _f !== void 0 ? _f : undefined;
            this.name = (_g = data.name) !== null && _g !== void 0 ? _g : undefined;
            this.scope = (_h = data.scope) !== null && _h !== void 0 ? _h : undefined;
        }
    }
    /**
     * BillingDetailsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.BillingDetailsPayloadFragment response data
     */
    class BillingDetailsPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.email = (_a = data.email) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.paymentMethod = data.paymentMethod ? new Card(request, data.paymentMethod) : undefined;
            this.invoices = data.invoices ? data.invoices.map(node => new Invoice(request, node)) : undefined;
        }
    }
    /**
     * BillingEmailPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.BillingEmailPayloadFragment response data
     */
    class BillingEmailPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.email = (_a = data.email) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * Card model
     *
     * @param request - function to call the graphql client
     * @param data - L.CardFragment response data
     */
    class Card extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.brand = (_a = data.brand) !== null && _a !== void 0 ? _a : undefined;
            this.last4 = (_b = data.last4) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * CollaborationDocumentUpdatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CollaborationDocumentUpdatePayloadFragment response data
     */
    class CollaborationDocumentUpdatePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
            this.steps = data.steps ? new StepsResponse(request, data.steps) : undefined;
        }
    }
    /**
     * A comment associated with an issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.CommentFragment response data
     */
    class Comment extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.body = (_b = data.body) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.editedAt = (_d = parseDate(data.editedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = (_e = data.id) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.url = (_g = data.url) !== null && _g !== void 0 ? _g : undefined;
            this._issue = (_h = data.issue) !== null && _h !== void 0 ? _h : undefined;
            this._user = (_j = data.user) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The issue that the comment is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who wrote the comment. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a comment. */
        delete() {
            return this.id ? new CommentDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a comment. */
        update(input) {
            return this.id ? new CommentUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * CommentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CommentConnection model
     * @param data - CommentConnection response data
     */
    class CommentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Comment(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * CommentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CommentPayloadFragment response data
     */
    class CommentPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._comment = (_c = data.comment) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The comment that was created or updated. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch((_b = this._comment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * GitHub's commit data
     *
     * @param request - function to call the graphql client
     * @param data - L.CommitPayloadFragment response data
     */
    class CommitPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.added = (_a = data.added) !== null && _a !== void 0 ? _a : undefined;
            this.id = (_b = data.id) !== null && _b !== void 0 ? _b : undefined;
            this.message = (_c = data.message) !== null && _c !== void 0 ? _c : undefined;
            this.modified = (_d = data.modified) !== null && _d !== void 0 ? _d : undefined;
            this.removed = (_e = data.removed) !== null && _e !== void 0 ? _e : undefined;
            this.timestamp = (_f = data.timestamp) !== null && _f !== void 0 ? _f : undefined;
            this.url = (_g = data.url) !== null && _g !== void 0 ? _g : undefined;
        }
    }
    /**
     * ContactPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ContactPayloadFragment response data
     */
    class ContactPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * CreateCsvExportReportPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CreateCsvExportReportPayloadFragment response data
     */
    class CreateCsvExportReportPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * CreateOrJoinOrganizationResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.CreateOrJoinOrganizationResponseFragment response data
     */
    class CreateOrJoinOrganizationResponse extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this._user = (_a = data.user) !== null && _a !== void 0 ? _a : undefined;
        }
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A custom view that has been saved by a user.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewFragment response data
     */
    class CustomView extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.filters = (_e = parseJson(data.filters)) !== null && _e !== void 0 ? _e : undefined;
            this.icon = (_f = data.icon) !== null && _f !== void 0 ? _f : undefined;
            this.id = (_g = data.id) !== null && _g !== void 0 ? _g : undefined;
            this.name = (_h = data.name) !== null && _h !== void 0 ? _h : undefined;
            this.shared = (_j = data.shared) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : undefined;
            this._creator = (_l = data.creator) !== null && _l !== void 0 ? _l : undefined;
            this._team = (_m = data.team) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The user who created the custom view. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization of the custom view. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team associated with the custom view. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a custom view. */
        delete() {
            return this.id ? new CustomViewDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a custom view. */
        update(input) {
            return this.id ? new CustomViewUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * CustomViewConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CustomViewConnection model
     * @param data - CustomViewConnection response data
     */
    class CustomViewConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new CustomView(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * CustomViewPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewPayloadFragment response data
     */
    class CustomViewPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._customView = (_c = data.customView) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The custom view that was created or updated. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A set of issues to be resolved in a specified amount of time.
     *
     * @param request - function to call the graphql client
     * @param data - L.CycleFragment response data
     */
    class Cycle extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.completedAt = (_b = parseDate(data.completedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.completedIssueCountHistory = (_c = data.completedIssueCountHistory) !== null && _c !== void 0 ? _c : undefined;
            this.completedScopeHistory = (_d = data.completedScopeHistory) !== null && _d !== void 0 ? _d : undefined;
            this.createdAt = (_e = parseDate(data.createdAt)) !== null && _e !== void 0 ? _e : undefined;
            this.endsAt = (_f = parseDate(data.endsAt)) !== null && _f !== void 0 ? _f : undefined;
            this.id = (_g = data.id) !== null && _g !== void 0 ? _g : undefined;
            this.issueCountHistory = (_h = data.issueCountHistory) !== null && _h !== void 0 ? _h : undefined;
            this.name = (_j = data.name) !== null && _j !== void 0 ? _j : undefined;
            this.number = (_k = data.number) !== null && _k !== void 0 ? _k : undefined;
            this.scopeHistory = (_l = data.scopeHistory) !== null && _l !== void 0 ? _l : undefined;
            this.startsAt = (_m = parseDate(data.startsAt)) !== null && _m !== void 0 ? _m : undefined;
            this.updatedAt = (_o = parseDate(data.updatedAt)) !== null && _o !== void 0 ? _o : undefined;
            this._team = (_p = data.team) !== null && _p !== void 0 ? _p : undefined;
        }
        /** The team that the cycle is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Issues associated with the cycle. */
        issues(variables) {
            return this.id ? new Cycle_IssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Issues that weren't completed when the cycle was closed. */
        uncompletedIssuesUponClose(variables) {
            return this.id
                ? new Cycle_UncompletedIssuesUponCloseQuery(this._request, this.id, variables).fetch(variables)
                : undefined;
        }
        /** Archives a cycle. */
        archive() {
            return this.id ? new CycleArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a cycle. */
        update(input) {
            return this.id ? new CycleUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * CycleConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CycleConnection model
     * @param data - CycleConnection response data
     */
    class CycleConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Cycle(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * CyclePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CyclePayloadFragment response data
     */
    class CyclePayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._cycle = (_c = data.cycle) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The Cycle that was created or updated. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * DebugPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.DebugPayloadFragment response data
     */
    class DebugPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Collaborative editing steps for documents.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentStepFragment response data
     */
    class DocumentStep extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.clientId = (_b = data.clientId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.step = (_e = parseJson(data.step)) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.version = (_g = data.version) !== null && _g !== void 0 ? _g : undefined;
        }
    }
    /**
     * EmailUnsubscribePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailUnsubscribePayloadFragment response data
     */
    class EmailUnsubscribePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * EmailUserAccountAuthChallengeResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailUserAccountAuthChallengeResponseFragment response data
     */
    class EmailUserAccountAuthChallengeResponse extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.authType = (_a = data.authType) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * A custom emoji.
     *
     * @param request - function to call the graphql client
     * @param data - L.EmojiFragment response data
     */
    class Emoji extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.name = (_d = data.name) !== null && _d !== void 0 ? _d : undefined;
            this.source = (_e = data.source) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.url = (_g = data.url) !== null && _g !== void 0 ? _g : undefined;
            this._creator = (_h = data.creator) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The user who created the emoji. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the emoji belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Deletes an emoji. */
        delete() {
            return this.id ? new EmojiDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * EmojiConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this EmojiConnection model
     * @param data - EmojiConnection response data
     */
    class EmojiConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Emoji(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * EmojiPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmojiPayloadFragment response data
     */
    class EmojiPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._emoji = (_c = data.emoji) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The emoji that was created. */
        get emoji() {
            var _a, _b;
            return ((_a = this._emoji) === null || _a === void 0 ? void 0 : _a.id) ? new EmojiQuery(this._request).fetch((_b = this._emoji) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * EventPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EventPayloadFragment response data
     */
    class EventPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * User favorites presented in the sidebar.
     *
     * @param request - function to call the graphql client
     * @param data - L.FavoriteFragment response data
     */
    class Favorite extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.sortOrder = (_d = data.sortOrder) !== null && _d !== void 0 ? _d : undefined;
            this.type = (_e = data.type) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._issue = (_h = data.issue) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._projectTeam = (_l = data.projectTeam) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** Favorited cycle. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Favorited issue. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Favorited issue label. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Favorited project. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Favorited project team. */
        get projectTeam() {
            var _a, _b;
            return ((_a = this._projectTeam) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._projectTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The owner of the favorite. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a favorite reference. */
        delete() {
            return this.id ? new FavoriteDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a favorite. */
        update(input) {
            return this.id ? new FavoriteUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * FavoriteConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this FavoriteConnection model
     * @param data - FavoriteConnection response data
     */
    class FavoriteConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Favorite(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * FavoritePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FavoritePayloadFragment response data
     */
    class FavoritePayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._favorite = (_c = data.favorite) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The object that was added as a favorite. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * FeedbackPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FeedbackPayloadFragment response data
     */
    class FeedbackPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Object representing Figma preview information.
     *
     * @param request - function to call the graphql client
     * @param data - L.FigmaEmbedFragment response data
     */
    class FigmaEmbed extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.lastModified = (_a = parseDate(data.lastModified)) !== null && _a !== void 0 ? _a : undefined;
            this.name = (_b = data.name) !== null && _b !== void 0 ? _b : undefined;
            this.nodeName = (_c = data.nodeName) !== null && _c !== void 0 ? _c : undefined;
            this.url = (_d = data.url) !== null && _d !== void 0 ? _d : undefined;
        }
    }
    /**
     * FigmaEmbedPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FigmaEmbedPayloadFragment response data
     */
    class FigmaEmbedPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
            this.figmaEmbed = data.figmaEmbed ? new FigmaEmbed(request, data.figmaEmbed) : undefined;
        }
    }
    /**
     * A recorded entry of a file uploaded by a user.
     *
     * @param request - function to call the graphql client
     * @param data - L.FileUploadFragment response data
     */
    class FileUpload extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.assetUrl = (_a = data.assetUrl) !== null && _a !== void 0 ? _a : undefined;
            this.contentType = (_b = data.contentType) !== null && _b !== void 0 ? _b : undefined;
            this.filename = (_c = data.filename) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.metaData = (_e = parseJson(data.metaData)) !== null && _e !== void 0 ? _e : undefined;
            this.size = (_f = data.size) !== null && _f !== void 0 ? _f : undefined;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The user who uploaded the file. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization the upload belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * Relevant information for the GitHub organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.GithubOrgFragment response data
     */
    class GithubOrg extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.id = (_a = data.id) !== null && _a !== void 0 ? _a : undefined;
            this.login = (_b = data.login) !== null && _b !== void 0 ? _b : undefined;
            this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
            this.repositories = data.repositories ? data.repositories.map(node => new GithubRepo(request, node)) : undefined;
        }
    }
    /**
     * Relevant information for the GitHub repository.
     *
     * @param request - function to call the graphql client
     * @param data - L.GithubRepoFragment response data
     */
    class GithubRepo extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.id = (_a = data.id) !== null && _a !== void 0 ? _a : undefined;
            this.name = (_b = data.name) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * Google Sheets specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.GoogleSheetsSettingsFragment response data
     */
    class GoogleSheetsSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.sheetId = (_a = data.sheetId) !== null && _a !== void 0 ? _a : undefined;
            this.spreadsheetId = (_b = data.spreadsheetId) !== null && _b !== void 0 ? _b : undefined;
            this.spreadsheetUrl = (_c = data.spreadsheetUrl) !== null && _c !== void 0 ? _c : undefined;
            this.updatedIssuesAt = (_d = parseDate(data.updatedIssuesAt)) !== null && _d !== void 0 ? _d : undefined;
        }
    }
    /**
     * ImageUploadFromUrlPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ImageUploadFromUrlPayloadFragment response data
     */
    class ImageUploadFromUrlPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.url = (_c = data.url) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * An integration with an external service.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationFragment response data
     */
    class Integration extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.service = (_d = data.service) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
            this._team = (_g = data.team) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The user that added the integration. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the integration is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team that the integration is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes an integration. */
        delete() {
            return this.id ? new IntegrationDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Archives an integration resource. */
        resourceArchive() {
            return this.id ? new IntegrationResourceArchiveMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * IntegrationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IntegrationConnection model
     * @param data - IntegrationConnection response data
     */
    class IntegrationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Integration(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * IntegrationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationPayloadFragment response data
     */
    class IntegrationPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._integration = (_c = data.integration) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * An integration resource created by an external service.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationResourceFragment response data
     */
    class IntegrationResource extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.resourceId = (_d = data.resourceId) !== null && _d !== void 0 ? _d : undefined;
            this.resourceType = (_e = data.resourceType) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.data = data.data ? new IntegrationResourceData(request, data.data) : undefined;
            this.pullRequest = data.pullRequest ? new PullRequestPayload(request, data.pullRequest) : undefined;
            this._integration = (_g = data.integration) !== null && _g !== void 0 ? _g : undefined;
            this._issue = (_h = data.issue) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The integration that the resource is associated with. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that the resource is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Archives an integration resource. */
        archive() {
            return this.id ? new IntegrationResourceArchiveMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * IntegrationResourceConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IntegrationResourceConnection model
     * @param data - IntegrationResourceConnection response data
     */
    class IntegrationResourceConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new IntegrationResource(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * Integration resource's payload
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationResourceDataFragment response data
     */
    class IntegrationResourceData extends Request {
        constructor(request, data) {
            super(request);
            this.githubCommit = data.githubCommit ? new CommitPayload(request, data.githubCommit) : undefined;
            this.githubPullRequest = data.githubPullRequest
                ? new PullRequestPayload(request, data.githubPullRequest)
                : undefined;
            this.gitlabMergeRequest = data.gitlabMergeRequest
                ? new PullRequestPayload(request, data.gitlabMergeRequest)
                : undefined;
            this.sentryIssue = data.sentryIssue ? new SentryIssuePayload(request, data.sentryIssue) : undefined;
        }
    }
    /**
     * The integration resource's settings
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationSettingsFragment response data
     */
    class IntegrationSettings extends Request {
        constructor(request, data) {
            super(request);
            this.googleSheets = data.googleSheets ? new GoogleSheetsSettings(request, data.googleSheets) : undefined;
            this.sentry = data.sentry ? new SentrySettings(request, data.sentry) : undefined;
            this.slackPost = data.slackPost ? new SlackPostSettings(request, data.slackPost) : undefined;
            this.slackProjectPost = data.slackProjectPost ? new SlackPostSettings(request, data.slackProjectPost) : undefined;
            this.zendesk = data.zendesk ? new ZendeskSettings(request, data.zendesk) : undefined;
        }
    }
    /**
     * InviteData model
     *
     * @param request - function to call the graphql client
     * @param data - L.InviteDataFragment response data
     */
    class InviteData extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.avatarURLs = (_a = data.avatarURLs) !== null && _a !== void 0 ? _a : undefined;
            this.inviterName = (_b = data.inviterName) !== null && _b !== void 0 ? _b : undefined;
            this.organizationDomain = (_c = data.organizationDomain) !== null && _c !== void 0 ? _c : undefined;
            this.organizationLogoUrl = (_d = data.organizationLogoUrl) !== null && _d !== void 0 ? _d : undefined;
            this.organizationName = (_e = data.organizationName) !== null && _e !== void 0 ? _e : undefined;
            this.teamIds = (_f = data.teamIds) !== null && _f !== void 0 ? _f : undefined;
            this.teamNames = (_g = data.teamNames) !== null && _g !== void 0 ? _g : undefined;
            this.userCount = (_h = data.userCount) !== null && _h !== void 0 ? _h : undefined;
        }
    }
    /**
     * InvitePagePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.InvitePagePayloadFragment response data
     */
    class InvitePagePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
            this.inviteData = data.inviteData ? new InviteData(request, data.inviteData) : undefined;
        }
    }
    /**
     * Invoice model
     *
     * @param request - function to call the graphql client
     * @param data - L.InvoiceFragment response data
     */
    class Invoice extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.created = (_a = parseDate(data.created)) !== null && _a !== void 0 ? _a : undefined;
            this.dueDate = (_b = parseDate(data.dueDate)) !== null && _b !== void 0 ? _b : undefined;
            this.status = (_c = data.status) !== null && _c !== void 0 ? _c : undefined;
            this.total = (_d = data.total) !== null && _d !== void 0 ? _d : undefined;
            this.url = (_e = data.url) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * An issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueFragment response data
     */
    class Issue extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.autoClosedAt = (_c = parseDate(data.autoClosedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.boardOrder = (_d = data.boardOrder) !== null && _d !== void 0 ? _d : undefined;
            this.branchName = (_e = data.branchName) !== null && _e !== void 0 ? _e : undefined;
            this.canceledAt = (_f = parseDate(data.canceledAt)) !== null && _f !== void 0 ? _f : undefined;
            this.completedAt = (_g = parseDate(data.completedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.createdAt = (_h = parseDate(data.createdAt)) !== null && _h !== void 0 ? _h : undefined;
            this.description = (_j = data.description) !== null && _j !== void 0 ? _j : undefined;
            this.dueDate = (_k = parseDate(data.dueDate)) !== null && _k !== void 0 ? _k : undefined;
            this.estimate = (_l = data.estimate) !== null && _l !== void 0 ? _l : undefined;
            this.id = (_m = data.id) !== null && _m !== void 0 ? _m : undefined;
            this.identifier = (_o = data.identifier) !== null && _o !== void 0 ? _o : undefined;
            this.number = (_p = data.number) !== null && _p !== void 0 ? _p : undefined;
            this.previousIdentifiers = (_q = data.previousIdentifiers) !== null && _q !== void 0 ? _q : undefined;
            this.priority = (_r = data.priority) !== null && _r !== void 0 ? _r : undefined;
            this.priorityLabel = (_s = data.priorityLabel) !== null && _s !== void 0 ? _s : undefined;
            this.startedAt = (_t = parseDate(data.startedAt)) !== null && _t !== void 0 ? _t : undefined;
            this.subIssueSortOrder = (_u = data.subIssueSortOrder) !== null && _u !== void 0 ? _u : undefined;
            this.title = (_v = data.title) !== null && _v !== void 0 ? _v : undefined;
            this.trashed = (_w = data.trashed) !== null && _w !== void 0 ? _w : undefined;
            this.updatedAt = (_x = parseDate(data.updatedAt)) !== null && _x !== void 0 ? _x : undefined;
            this.url = (_y = data.url) !== null && _y !== void 0 ? _y : undefined;
            this._assignee = (_z = data.assignee) !== null && _z !== void 0 ? _z : undefined;
            this._creator = (_0 = data.creator) !== null && _0 !== void 0 ? _0 : undefined;
            this._cycle = (_1 = data.cycle) !== null && _1 !== void 0 ? _1 : undefined;
            this._parent = (_2 = data.parent) !== null && _2 !== void 0 ? _2 : undefined;
            this._project = (_3 = data.project) !== null && _3 !== void 0 ? _3 : undefined;
            this._state = (_4 = data.state) !== null && _4 !== void 0 ? _4 : undefined;
            this._team = (_5 = data.team) !== null && _5 !== void 0 ? _5 : undefined;
        }
        /** The user to whom the issue is assigned to. */
        get assignee() {
            var _a, _b;
            return ((_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._assignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the issue. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The cycle that the issue is associated with. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The parent of the issue. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentIssueQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the issue is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The workflow state that the issue is associated with. */
        get state() {
            var _a, _b;
            return ((_a = this._state) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._state) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the issue is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Attachments associated with the issue. */
        attachments(variables) {
            return this.id ? new Issue_AttachmentsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Children of the issue. */
        children(variables) {
            return this.id ? new Issue_ChildrenQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Comments associated with the issue. */
        comments(variables) {
            return this.id ? new Issue_CommentsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** History entries associated with the issue. */
        history(variables) {
            return this.id ? new Issue_HistoryQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Inverse relations associated with this issue. */
        inverseRelations(variables) {
            return this.id ? new Issue_InverseRelationsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Labels associated with this issue. */
        labels(variables) {
            return this.id ? new Issue_LabelsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Relations associated with this issue. */
        relations(variables) {
            return this.id ? new Issue_RelationsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Users who are subscribed to the issue. */
        subscribers(variables) {
            return this.id ? new Issue_SubscribersQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Archives an issue. */
        archive(variables) {
            return this.id ? new IssueArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Unarchives an issue. */
        unarchive() {
            return this.id ? new IssueUnarchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an issue. */
        update(input) {
            return this.id ? new IssueUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * IssueConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueConnection model
     * @param data - IssueConnection response data
     */
    class IssueConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Issue(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * A record of changes to an issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueHistoryFragment response data
     */
    class IssueHistory extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;
            super(request);
            this.addedLabelIds = (_a = data.addedLabelIds) !== null && _a !== void 0 ? _a : undefined;
            this.archived = (_b = data.archived) !== null && _b !== void 0 ? _b : undefined;
            this.archivedAt = (_c = parseDate(data.archivedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.autoArchived = (_d = data.autoArchived) !== null && _d !== void 0 ? _d : undefined;
            this.autoClosed = (_e = data.autoClosed) !== null && _e !== void 0 ? _e : undefined;
            this.createdAt = (_f = parseDate(data.createdAt)) !== null && _f !== void 0 ? _f : undefined;
            this.fromDueDate = (_g = parseDate(data.fromDueDate)) !== null && _g !== void 0 ? _g : undefined;
            this.fromEstimate = (_h = data.fromEstimate) !== null && _h !== void 0 ? _h : undefined;
            this.fromPriority = (_j = data.fromPriority) !== null && _j !== void 0 ? _j : undefined;
            this.fromTitle = (_k = data.fromTitle) !== null && _k !== void 0 ? _k : undefined;
            this.id = (_l = data.id) !== null && _l !== void 0 ? _l : undefined;
            this.relationChanges = (_m = data.relationChanges) !== null && _m !== void 0 ? _m : undefined;
            this.removedLabelIds = (_o = data.removedLabelIds) !== null && _o !== void 0 ? _o : undefined;
            this.source = (_p = parseJson(data.source)) !== null && _p !== void 0 ? _p : undefined;
            this.toDueDate = (_q = parseDate(data.toDueDate)) !== null && _q !== void 0 ? _q : undefined;
            this.toEstimate = (_r = data.toEstimate) !== null && _r !== void 0 ? _r : undefined;
            this.toPriority = (_s = data.toPriority) !== null && _s !== void 0 ? _s : undefined;
            this.toTitle = (_t = data.toTitle) !== null && _t !== void 0 ? _t : undefined;
            this.updatedAt = (_u = parseDate(data.updatedAt)) !== null && _u !== void 0 ? _u : undefined;
            this.updatedDescription = (_v = data.updatedDescription) !== null && _v !== void 0 ? _v : undefined;
            this._actor = (_w = data.actor) !== null && _w !== void 0 ? _w : undefined;
            this._fromAssignee = (_x = data.fromAssignee) !== null && _x !== void 0 ? _x : undefined;
            this._fromCycle = (_y = data.fromCycle) !== null && _y !== void 0 ? _y : undefined;
            this._fromParent = (_z = data.fromParent) !== null && _z !== void 0 ? _z : undefined;
            this._fromProject = (_0 = data.fromProject) !== null && _0 !== void 0 ? _0 : undefined;
            this._fromState = (_1 = data.fromState) !== null && _1 !== void 0 ? _1 : undefined;
            this._fromTeam = (_2 = data.fromTeam) !== null && _2 !== void 0 ? _2 : undefined;
            this._issue = (_3 = data.issue) !== null && _3 !== void 0 ? _3 : undefined;
            this._toAssignee = (_4 = data.toAssignee) !== null && _4 !== void 0 ? _4 : undefined;
            this._toCycle = (_5 = data.toCycle) !== null && _5 !== void 0 ? _5 : undefined;
            this._toParent = (_6 = data.toParent) !== null && _6 !== void 0 ? _6 : undefined;
            this._toProject = (_7 = data.toProject) !== null && _7 !== void 0 ? _7 : undefined;
            this._toState = (_8 = data.toState) !== null && _8 !== void 0 ? _8 : undefined;
            this._toTeam = (_9 = data.toTeam) !== null && _9 !== void 0 ? _9 : undefined;
        }
        /** The user who made these changes. If null, possibly means that the change made by an integration. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user from whom the issue was re-assigned from. */
        get fromAssignee() {
            var _a, _b;
            return ((_a = this._fromAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._fromAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The previous cycle of the issue. */
        get fromCycle() {
            var _a, _b;
            return ((_a = this._fromCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._fromCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The previous parent of the issue. */
        get fromParent() {
            var _a, _b;
            return ((_a = this._fromParent) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentIssueQuery(this._request).fetch((_b = this._fromParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The previous project of the issue. */
        get fromProject() {
            var _a, _b;
            return ((_a = this._fromProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._fromProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The previous workflow state of the issue. */
        get fromState() {
            var _a, _b;
            return ((_a = this._fromState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._fromState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team from which the issue was moved from. */
        get fromTeam() {
            var _a, _b;
            return ((_a = this._fromTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._fromTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that was changed. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user to whom the issue was assigned to. */
        get toAssignee() {
            var _a, _b;
            return ((_a = this._toAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._toAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The new cycle of the issue. */
        get toCycle() {
            var _a, _b;
            return ((_a = this._toCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._toCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The new parent of the issue. */
        get toParent() {
            var _a, _b;
            return ((_a = this._toParent) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentIssueQuery(this._request).fetch((_b = this._toParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The new project of the issue. */
        get toProject() {
            var _a, _b;
            return ((_a = this._toProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._toProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The new workflow state of the issue. */
        get toState() {
            var _a, _b;
            return ((_a = this._toState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._toState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team to which the issue was moved to. */
        get toTeam() {
            var _a, _b;
            return ((_a = this._toTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._toTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssueHistoryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueHistoryConnection model
     * @param data - IssueHistoryConnection response data
     */
    class IssueHistoryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new IssueHistory(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * An import job for data from an external service
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportFragment response data
     */
    class IssueImport extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.creatorId = (_c = data.creatorId) !== null && _c !== void 0 ? _c : undefined;
            this.error = (_d = data.error) !== null && _d !== void 0 ? _d : undefined;
            this.id = (_e = data.id) !== null && _e !== void 0 ? _e : undefined;
            this.service = (_f = data.service) !== null && _f !== void 0 ? _f : undefined;
            this.status = (_g = data.status) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : undefined;
        }
        /** Deletes an import job. */
        delete(issueImportId) {
            return new IssueImportDeleteMutation(this._request).fetch(issueImportId);
        }
    }
    /**
     * IssueImportDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportDeletePayloadFragment response data
     */
    class IssueImportDeletePayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
        }
    }
    /**
     * IssueImportPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportPayloadFragment response data
     */
    class IssueImportPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
        }
    }
    /**
     * Labels that can be associated with issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueLabelFragment response data
     */
    class IssueLabel extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.id = (_e = data.id) !== null && _e !== void 0 ? _e : undefined;
            this.name = (_f = data.name) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : undefined;
            this._creator = (_h = data.creator) !== null && _h !== void 0 ? _h : undefined;
            this._team = (_j = data.team) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The user who created the label. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team to which the label belongs to. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Issues associated with the label. */
        issues(variables) {
            return this.id ? new IssueLabel_IssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Archives an issue label. */
        archive() {
            return this.id ? new IssueLabelArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an label. */
        update(input) {
            return this.id ? new IssueLabelUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * IssueLabelConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueLabelConnection model
     * @param data - IssueLabelConnection response data
     */
    class IssueLabelConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new IssueLabel(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * IssueLabelPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueLabelPayloadFragment response data
     */
    class IssueLabelPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._issueLabel = (_c = data.issueLabel) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The label that was created or updated. */
        get issueLabel() {
            var _a, _b;
            return ((_a = this._issueLabel) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._issueLabel) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssuePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssuePayloadFragment response data
     */
    class IssuePayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._issue = (_c = data.issue) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The issue that was created or updated. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssuePriorityValue model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssuePriorityValueFragment response data
     */
    class IssuePriorityValue extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.label = (_a = data.label) !== null && _a !== void 0 ? _a : undefined;
            this.priority = (_b = data.priority) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * A relation between two issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationFragment response data
     */
    class IssueRelation extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.type = (_d = data.type) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this._issue = (_f = data.issue) !== null && _f !== void 0 ? _f : undefined;
            this._relatedIssue = (_g = data.relatedIssue) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The issue whose relationship is being described. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The related issue. */
        get relatedIssue() {
            var _a, _b;
            return ((_a = this._relatedIssue) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentIssueQuery(this._request).fetch((_b = this._relatedIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes an issue relation. */
        delete() {
            return this.id ? new IssueRelationDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an issue relation. */
        update(input) {
            return this.id ? new IssueRelationUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * IssueRelationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueRelationConnection model
     * @param data - IssueRelationConnection response data
     */
    class IssueRelationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new IssueRelation(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * IssueRelationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationPayloadFragment response data
     */
    class IssueRelationPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._issueRelation = (_c = data.issueRelation) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The issue relation that was created or updated. */
        get issueRelation() {
            var _a, _b;
            return ((_a = this._issueRelation) === null || _a === void 0 ? void 0 : _a.id) ? new IssueRelationQuery(this._request).fetch((_b = this._issueRelation) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A milestone that contains projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.MilestoneFragment response data
     */
    class Milestone extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.name = (_d = data.name) !== null && _d !== void 0 ? _d : undefined;
            this.sortOrder = (_e = data.sortOrder) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The organization that the milestone belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Projects associated with the milestone. */
        projects(variables) {
            return this.id ? new Milestone_ProjectsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Deletes a milestone. */
        delete() {
            return this.id ? new MilestoneDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a milestone. */
        update(input) {
            return this.id ? new MilestoneUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * MilestoneConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this MilestoneConnection model
     * @param data - MilestoneConnection response data
     */
    class MilestoneConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Milestone(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * MilestonePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.MilestonePayloadFragment response data
     */
    class MilestonePayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._milestone = (_c = data.milestone) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The milesteone that was created or updated. */
        get milestone() {
            var _a, _b;
            return ((_a = this._milestone) === null || _a === void 0 ? void 0 : _a.id) ? new MilestoneQuery(this._request).fetch((_b = this._milestone) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A notification sent to a user.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationFragment response data
     */
    class Notification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.reactionEmoji = (_e = data.reactionEmoji) !== null && _e !== void 0 ? _e : undefined;
            this.readAt = (_f = parseDate(data.readAt)) !== null && _f !== void 0 ? _f : undefined;
            this.type = (_g = data.type) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : undefined;
            this._comment = (_j = data.comment) !== null && _j !== void 0 ? _j : undefined;
            this._issue = (_k = data.issue) !== null && _k !== void 0 ? _k : undefined;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The comment which the notification is associated with. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch((_b = this._comment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that the notification is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team which the notification is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The recipient of the notification. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Archives a notification. */
        archive() {
            return this.id ? new NotificationArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** [Deprecated] Deletes a notification. */
        delete() {
            return this.id ? new NotificationDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Unarchives a notification. */
        unarchive() {
            return this.id ? new NotificationUnarchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a notification. */
        update(input) {
            return this.id ? new NotificationUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * NotificationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this NotificationConnection model
     * @param data - NotificationConnection response data
     */
    class NotificationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Notification(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * NotificationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationPayloadFragment response data
     */
    class NotificationPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._notification = (_c = data.notification) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The notification that was created or updated. */
        get notification() {
            var _a, _b;
            return ((_a = this._notification) === null || _a === void 0 ? void 0 : _a.id) ? new NotificationQuery(this._request).fetch((_b = this._notification) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Notification subscriptions for models.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationSubscriptionFragment response data
     */
    class NotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.type = (_d = data.type) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this._project = (_f = data.project) !== null && _f !== void 0 ? _f : undefined;
            this._team = (_g = data.team) !== null && _g !== void 0 ? _g : undefined;
            this._user = (_h = data.user) !== null && _h !== void 0 ? _h : undefined;
        }
        /** Subscribed project. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Subscribed team. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user associated with notification subscriptions. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a notification subscription reference. */
        delete() {
            return this.id ? new NotificationSubscriptionDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * NotificationSubscriptionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this NotificationSubscriptionConnection model
     * @param data - NotificationSubscriptionConnection response data
     */
    class NotificationSubscriptionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new NotificationSubscription(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * NotificationSubscriptionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationSubscriptionPayloadFragment response data
     */
    class NotificationSubscriptionPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._notificationSubscription = (_c = data.notificationSubscription) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The notification subscription that was created or updated. */
        get notificationSubscription() {
            var _a, _b;
            return ((_a = this._notificationSubscription) === null || _a === void 0 ? void 0 : _a.id) ? new NotificationSubscriptionQuery(this._request).fetch((_b = this._notificationSubscription) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
    }
    /**
     * GitHub OAuth token, plus information about the organizations the user is a member of.
     *
     * @param request - function to call the graphql client
     * @param data - L.OAuthTokenPayloadFragment response data
     */
    class OAuthTokenPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.token = (_a = data.token) !== null && _a !== void 0 ? _a : undefined;
            this.organizations = data.organizations ? data.organizations.map(node => new GithubOrg(request, node)) : undefined;
        }
    }
    /**
     * OAuth2 client application
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthClientFragment response data
     */
    class OauthClient extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.clientId = (_b = data.clientId) !== null && _b !== void 0 ? _b : undefined;
            this.clientSecret = (_c = data.clientSecret) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : undefined;
            this.description = (_e = data.description) !== null && _e !== void 0 ? _e : undefined;
            this.developer = (_f = data.developer) !== null && _f !== void 0 ? _f : undefined;
            this.developerUrl = (_g = data.developerUrl) !== null && _g !== void 0 ? _g : undefined;
            this.id = (_h = data.id) !== null && _h !== void 0 ? _h : undefined;
            this.imageUrl = (_j = data.imageUrl) !== null && _j !== void 0 ? _j : undefined;
            this.name = (_k = data.name) !== null && _k !== void 0 ? _k : undefined;
            this.redirectUris = (_l = data.redirectUris) !== null && _l !== void 0 ? _l : undefined;
            this.updatedAt = (_m = parseDate(data.updatedAt)) !== null && _m !== void 0 ? _m : undefined;
        }
        /** Archives an OAuth client. */
        archive() {
            return this.id ? new OauthClientArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an OAuth client. */
        rotateSecret() {
            return this.id ? new OauthClientRotateSecretMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an OAuth client. */
        update(input) {
            return this.id ? new OauthClientUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * OauthClientPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthClientPayloadFragment response data
     */
    class OauthClientPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.oauthClient = data.oauthClient ? new OauthClient(request, data.oauthClient) : undefined;
        }
    }
    /**
     * OauthTokenRevokePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthTokenRevokePayloadFragment response data
     */
    class OauthTokenRevokePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * An organization. Organizations are root-level objects that contain user accounts and teams.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationFragment response data
     */
    class Organization extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            super(request);
            this.allowedAuthServices = (_a = data.allowedAuthServices) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.createdIssueCount = (_d = data.createdIssueCount) !== null && _d !== void 0 ? _d : undefined;
            this.gitBranchFormat = (_e = data.gitBranchFormat) !== null && _e !== void 0 ? _e : undefined;
            this.gitLinkbackMessagesEnabled = (_f = data.gitLinkbackMessagesEnabled) !== null && _f !== void 0 ? _f : undefined;
            this.gitPublicLinkbackMessagesEnabled = (_g = data.gitPublicLinkbackMessagesEnabled) !== null && _g !== void 0 ? _g : undefined;
            this.id = (_h = data.id) !== null && _h !== void 0 ? _h : undefined;
            this.logoUrl = (_j = data.logoUrl) !== null && _j !== void 0 ? _j : undefined;
            this.name = (_k = data.name) !== null && _k !== void 0 ? _k : undefined;
            this.periodUploadVolume = (_l = data.periodUploadVolume) !== null && _l !== void 0 ? _l : undefined;
            this.roadmapEnabled = (_m = data.roadmapEnabled) !== null && _m !== void 0 ? _m : undefined;
            this.samlEnabled = (_o = data.samlEnabled) !== null && _o !== void 0 ? _o : undefined;
            this.updatedAt = (_p = parseDate(data.updatedAt)) !== null && _p !== void 0 ? _p : undefined;
            this.urlKey = (_q = data.urlKey) !== null && _q !== void 0 ? _q : undefined;
            this.userCount = (_r = data.userCount) !== null && _r !== void 0 ? _r : undefined;
        }
        /** The organization's subscription to a paid plan. */
        get subscription() {
            return new SubscriptionQuery(this._request).fetch();
        }
        /** Integrations associated with the organization. */
        integrations(variables) {
            return new Organization_IntegrationsQuery(this._request, variables).fetch(variables);
        }
        /** Milestones associated with the organization. */
        milestones(variables) {
            return new Organization_MilestonesQuery(this._request, variables).fetch(variables);
        }
        /** Teams associated with the organization. */
        teams(variables) {
            return new Organization_TeamsQuery(this._request, variables).fetch(variables);
        }
        /** Users associated with the organization. */
        users(variables) {
            return new Organization_UsersQuery(this._request, variables).fetch(variables);
        }
        /** Delete's an organization. Administrator privileges required. */
        delete(input) {
            return new OrganizationDeleteMutation(this._request).fetch(input);
        }
        /** Updates the user's organization. */
        update(input) {
            return new OrganizationUpdateMutation(this._request).fetch(input);
        }
    }
    /**
     * OrganizationDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDeletePayloadFragment response data
     */
    class OrganizationDeletePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Defines the use of a domain by an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDomainFragment response data
     */
    class OrganizationDomain extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.name = (_d = data.name) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.verificationEmail = (_f = data.verificationEmail) !== null && _f !== void 0 ? _f : undefined;
            this.verified = (_g = data.verified) !== null && _g !== void 0 ? _g : undefined;
            this._creator = (_h = data.creator) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The user who added the domain. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a domain. */
        delete() {
            return this.id ? new OrganizationDomainDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * OrganizationDomainPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDomainPayloadFragment response data
     */
    class OrganizationDomainPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.organizationDomain = data.organizationDomain
                ? new OrganizationDomain(request, data.organizationDomain)
                : undefined;
        }
    }
    /**
     * OrganizationDomainSimplePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDomainSimplePayloadFragment response data
     */
    class OrganizationDomainSimplePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * OrganizationExistsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationExistsPayloadFragment response data
     */
    class OrganizationExistsPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.exists = (_a = data.exists) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * An invitation to the organization that has been sent via email.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInviteFragment response data
     */
    class OrganizationInvite extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.acceptedAt = (_a = parseDate(data.acceptedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.email = (_d = data.email) !== null && _d !== void 0 ? _d : undefined;
            this.expiresAt = (_e = parseDate(data.expiresAt)) !== null && _e !== void 0 ? _e : undefined;
            this.external = (_f = data.external) !== null && _f !== void 0 ? _f : undefined;
            this.id = (_g = data.id) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : undefined;
            this._invitee = (_j = data.invitee) !== null && _j !== void 0 ? _j : undefined;
            this._inviter = (_k = data.inviter) !== null && _k !== void 0 ? _k : undefined;
        }
        /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
        get invitee() {
            var _a, _b;
            return ((_a = this._invitee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._invitee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the invitation. */
        get inviter() {
            var _a, _b;
            return ((_a = this._inviter) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._inviter) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the invite is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** undefined */
        issues(variables) {
            return this.id ? new OrganizationInvite_IssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Deletes an organization invite. */
        delete() {
            return this.id ? new OrganizationInviteDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * OrganizationInviteConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this OrganizationInviteConnection model
     * @param data - OrganizationInviteConnection response data
     */
    class OrganizationInviteConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new OrganizationInvite(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * OrganizationInvitePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInvitePayloadFragment response data
     */
    class OrganizationInvitePayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.organizationInvite = data.organizationInvite
                ? new OrganizationInvite(request, data.organizationInvite)
                : undefined;
        }
    }
    /**
     * OrganizationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationPayloadFragment response data
     */
    class OrganizationPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
        /** The organization that was created or updated. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * PageInfo model
     *
     * @param request - function to call the graphql client
     * @param data - L.PageInfoFragment response data
     */
    class PageInfo extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.endCursor = (_a = data.endCursor) !== null && _a !== void 0 ? _a : undefined;
            this.hasNextPage = (_b = data.hasNextPage) !== null && _b !== void 0 ? _b : undefined;
            this.hasPreviousPage = (_c = data.hasPreviousPage) !== null && _c !== void 0 ? _c : undefined;
            this.startCursor = (_d = data.startCursor) !== null && _d !== void 0 ? _d : undefined;
        }
    }
    /**
     * A project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectFragment response data
     */
    class Project extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.canceledAt = (_b = parseDate(data.canceledAt)) !== null && _b !== void 0 ? _b : undefined;
            this.color = (_c = data.color) !== null && _c !== void 0 ? _c : undefined;
            this.completedAt = (_d = parseDate(data.completedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.completedIssueCountHistory = (_e = data.completedIssueCountHistory) !== null && _e !== void 0 ? _e : undefined;
            this.completedScopeHistory = (_f = data.completedScopeHistory) !== null && _f !== void 0 ? _f : undefined;
            this.createdAt = (_g = parseDate(data.createdAt)) !== null && _g !== void 0 ? _g : undefined;
            this.description = (_h = data.description) !== null && _h !== void 0 ? _h : undefined;
            this.icon = (_j = data.icon) !== null && _j !== void 0 ? _j : undefined;
            this.id = (_k = data.id) !== null && _k !== void 0 ? _k : undefined;
            this.issueCountHistory = (_l = data.issueCountHistory) !== null && _l !== void 0 ? _l : undefined;
            this.name = (_m = data.name) !== null && _m !== void 0 ? _m : undefined;
            this.scopeHistory = (_o = data.scopeHistory) !== null && _o !== void 0 ? _o : undefined;
            this.slackIssueComments = (_p = data.slackIssueComments) !== null && _p !== void 0 ? _p : undefined;
            this.slackIssueStatuses = (_q = data.slackIssueStatuses) !== null && _q !== void 0 ? _q : undefined;
            this.slackNewIssue = (_r = data.slackNewIssue) !== null && _r !== void 0 ? _r : undefined;
            this.slugId = (_s = data.slugId) !== null && _s !== void 0 ? _s : undefined;
            this.sortOrder = (_t = data.sortOrder) !== null && _t !== void 0 ? _t : undefined;
            this.startedAt = (_u = parseDate(data.startedAt)) !== null && _u !== void 0 ? _u : undefined;
            this.state = (_v = data.state) !== null && _v !== void 0 ? _v : undefined;
            this.targetDate = (_w = parseDate(data.targetDate)) !== null && _w !== void 0 ? _w : undefined;
            this.updatedAt = (_x = parseDate(data.updatedAt)) !== null && _x !== void 0 ? _x : undefined;
            this._creator = (_y = data.creator) !== null && _y !== void 0 ? _y : undefined;
            this._lead = (_z = data.lead) !== null && _z !== void 0 ? _z : undefined;
            this._milestone = (_0 = data.milestone) !== null && _0 !== void 0 ? _0 : undefined;
        }
        /** The user who created the project. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project lead. */
        get lead() {
            var _a, _b;
            return ((_a = this._lead) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lead) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The milestone that this project is associated with. */
        get milestone() {
            var _a, _b;
            return ((_a = this._milestone) === null || _a === void 0 ? void 0 : _a.id) ? new MilestoneQuery(this._request).fetch((_b = this._milestone) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Issues associated with the project. */
        issues(variables) {
            return this.id ? new Project_IssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Links associated with the project. */
        links(variables) {
            return this.id ? new Project_LinksQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Users that are members of the project. */
        members(variables) {
            return this.id ? new Project_MembersQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Teams associated with this project. */
        teams(variables) {
            return this.id ? new Project_TeamsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Archives a project. */
        archive() {
            return this.id ? new ProjectArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a project. */
        update(input) {
            return this.id ? new ProjectUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * ProjectConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectConnection model
     * @param data - ProjectConnection response data
     */
    class ProjectConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Project(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * An external link for a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectLinkFragment response data
     */
    class ProjectLink extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.label = (_d = data.label) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.url = (_f = data.url) !== null && _f !== void 0 ? _f : undefined;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
            this._project = (_h = data.project) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The user who created the link. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the link is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a project link. */
        delete() {
            return this.id ? new ProjectLinkDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * ProjectLinkConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectLinkConnection model
     * @param data - ProjectLinkConnection response data
     */
    class ProjectLinkConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new ProjectLink(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * ProjectLinkPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectLinkPayloadFragment response data
     */
    class ProjectLinkPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._projectLink = (_c = data.projectLink) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The project that was created or updated. */
        get projectLink() {
            var _a, _b;
            return ((_a = this._projectLink) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectLinkQuery(this._request).fetch((_b = this._projectLink) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * ProjectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectPayloadFragment response data
     */
    class ProjectPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._project = (_c = data.project) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The project that was created or updated. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Pull request data
     *
     * @param request - function to call the graphql client
     * @param data - L.PullRequestPayloadFragment response data
     */
    class PullRequestPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
            super(request);
            this.branch = (_a = data.branch) !== null && _a !== void 0 ? _a : undefined;
            this.closedAt = (_b = data.closedAt) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = data.createdAt) !== null && _c !== void 0 ? _c : undefined;
            this.draft = (_d = data.draft) !== null && _d !== void 0 ? _d : undefined;
            this.id = (_e = data.id) !== null && _e !== void 0 ? _e : undefined;
            this.mergedAt = (_f = data.mergedAt) !== null && _f !== void 0 ? _f : undefined;
            this.number = (_g = data.number) !== null && _g !== void 0 ? _g : undefined;
            this.repoLogin = (_h = data.repoLogin) !== null && _h !== void 0 ? _h : undefined;
            this.repoName = (_j = data.repoName) !== null && _j !== void 0 ? _j : undefined;
            this.status = (_k = data.status) !== null && _k !== void 0 ? _k : undefined;
            this.title = (_l = data.title) !== null && _l !== void 0 ? _l : undefined;
            this.updatedAt = (_m = data.updatedAt) !== null && _m !== void 0 ? _m : undefined;
            this.url = (_o = data.url) !== null && _o !== void 0 ? _o : undefined;
            this.userId = (_p = data.userId) !== null && _p !== void 0 ? _p : undefined;
            this.userLogin = (_q = data.userLogin) !== null && _q !== void 0 ? _q : undefined;
        }
    }
    /**
     * A user's web browser push notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionFragment response data
     */
    class PushSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : undefined;
        }
        /** Deletes a push subscription. */
        delete() {
            return this.id ? new PushSubscriptionDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * PushSubscriptionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this PushSubscriptionConnection model
     * @param data - PushSubscriptionConnection response data
     */
    class PushSubscriptionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new PushSubscription(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * PushSubscriptionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionPayloadFragment response data
     */
    class PushSubscriptionPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * A reaction associated with a comment.
     *
     * @param request - function to call the graphql client
     * @param data - L.ReactionFragment response data
     */
    class Reaction extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.emoji = (_c = data.emoji) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this._comment = (_f = data.comment) !== null && _f !== void 0 ? _f : undefined;
            this._user = (_g = data.user) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The comment that the reaction is associated with. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch((_b = this._comment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who reacted. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a reaction. */
        delete() {
            return this.id ? new ReactionDeleteMutation(this._request).fetch(this.id) : undefined;
        }
    }
    /**
     * ReactionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ReactionConnection model
     * @param data - ReactionConnection response data
     */
    class ReactionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Reaction(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * ReactionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ReactionPayloadFragment response data
     */
    class ReactionPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._reaction = (_c = data.reaction) !== null && _c !== void 0 ? _c : undefined;
        }
        get reaction() {
            var _a, _b;
            return ((_a = this._reaction) === null || _a === void 0 ? void 0 : _a.id) ? new ReactionQuery(this._request).fetch((_b = this._reaction) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * RotateSecretPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RotateSecretPayloadFragment response data
     */
    class RotateSecretPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * The integration resource's settings
     *
     * @param request - function to call the graphql client
     * @param data - L.SamlConfigurationFragment response data
     */
    class SamlConfiguration extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.allowedDomains = (_a = data.allowedDomains) !== null && _a !== void 0 ? _a : undefined;
            this.ssoBinding = (_b = data.ssoBinding) !== null && _b !== void 0 ? _b : undefined;
            this.ssoEndpoint = (_c = data.ssoEndpoint) !== null && _c !== void 0 ? _c : undefined;
            this.ssoSignAlgo = (_d = data.ssoSignAlgo) !== null && _d !== void 0 ? _d : undefined;
            this.ssoSigningCert = (_e = data.ssoSigningCert) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * Sentry issue data
     *
     * @param request - function to call the graphql client
     * @param data - L.SentryIssuePayloadFragment response data
     */
    class SentryIssuePayload extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.actorName = (_b = data.actorName) !== null && _b !== void 0 ? _b : undefined;
            this.actorType = (_c = data.actorType) !== null && _c !== void 0 ? _c : undefined;
            this.firstSeen = (_d = data.firstSeen) !== null && _d !== void 0 ? _d : undefined;
            this.firstVersion = (_e = data.firstVersion) !== null && _e !== void 0 ? _e : undefined;
            this.issueId = (_f = data.issueId) !== null && _f !== void 0 ? _f : undefined;
            this.issueTitle = (_g = data.issueTitle) !== null && _g !== void 0 ? _g : undefined;
            this.projectId = (_h = data.projectId) !== null && _h !== void 0 ? _h : undefined;
            this.projectSlug = (_j = data.projectSlug) !== null && _j !== void 0 ? _j : undefined;
            this.shortId = (_k = data.shortId) !== null && _k !== void 0 ? _k : undefined;
            this.webUrl = (_l = data.webUrl) !== null && _l !== void 0 ? _l : undefined;
        }
    }
    /**
     * Sentry specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SentrySettingsFragment response data
     */
    class SentrySettings extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.organizationSlug = (_a = data.organizationSlug) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Slack notification specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackPostSettingsFragment response data
     */
    class SlackPostSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.channel = (_a = data.channel) !== null && _a !== void 0 ? _a : undefined;
            this.channelId = (_b = data.channelId) !== null && _b !== void 0 ? _b : undefined;
            this.configurationUrl = (_c = data.configurationUrl) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * SsoUrlFromEmailResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.SsoUrlFromEmailResponseFragment response data
     */
    class SsoUrlFromEmailResponse extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.samlSsoUrl = (_a = data.samlSsoUrl) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * StepsResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.StepsResponseFragment response data
     */
    class StepsResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.clientIds = (_a = data.clientIds) !== null && _a !== void 0 ? _a : undefined;
            this.steps = (_b = data.steps) !== null && _b !== void 0 ? _b : undefined;
            this.version = (_c = data.version) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * The subscription of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.SubscriptionFragment response data
     */
    class Subscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.canceledAt = (_b = parseDate(data.canceledAt)) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.pendingChangeType = (_e = data.pendingChangeType) !== null && _e !== void 0 ? _e : undefined;
            this.seats = (_f = data.seats) !== null && _f !== void 0 ? _f : undefined;
            this.type = (_g = data.type) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : undefined;
            this._creator = (_j = data.creator) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The creator of the subscription. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the subscription is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Archives a subscription. */
        archive() {
            return this.id ? new SubscriptionArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a subscription. */
        update(input) {
            return this.id ? new SubscriptionUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
        /** Upgrades a subscription plan. */
        upgrade() {
            return this.id && this.type ? new SubscriptionUpgradeMutation(this._request).fetch(this.id, this.type) : undefined;
        }
    }
    /**
     * SubscriptionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SubscriptionPayloadFragment response data
     */
    class SubscriptionPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.canceledAt = (_a = parseDate(data.canceledAt)) !== null && _a !== void 0 ? _a : undefined;
            this.lastSyncId = (_b = data.lastSyncId) !== null && _b !== void 0 ? _b : undefined;
            this.success = (_c = data.success) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The subscription entity being mutated. */
        get subscription() {
            return new SubscriptionQuery(this._request).fetch();
        }
    }
    /**
     * SubscriptionSessionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SubscriptionSessionPayloadFragment response data
     */
    class SubscriptionSessionPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.session = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Contains either the full serialized state of the application or delta packets that the requester can
     *   apply to the local data set in order to be up-to-date.
     *
     * @param request - function to call the graphql client
     * @param data - L.SyncResponseFragment response data
     */
    class SyncResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.databaseVersion = (_a = data.databaseVersion) !== null && _a !== void 0 ? _a : undefined;
            this.delta = (_b = data.delta) !== null && _b !== void 0 ? _b : undefined;
            this.lastSyncId = (_c = data.lastSyncId) !== null && _c !== void 0 ? _c : undefined;
            this.state = (_d = data.state) !== null && _d !== void 0 ? _d : undefined;
            this.subscribedSyncGroups = (_e = data.subscribedSyncGroups) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * SynchronizedPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SynchronizedPayloadFragment response data
     */
    class SynchronizedPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * An organizational unit that contains issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamFragment response data
     */
    class Team extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivePeriod = (_b = data.autoArchivePeriod) !== null && _b !== void 0 ? _b : undefined;
            this.autoClosePeriod = (_c = data.autoClosePeriod) !== null && _c !== void 0 ? _c : undefined;
            this.autoCloseStateId = (_d = data.autoCloseStateId) !== null && _d !== void 0 ? _d : undefined;
            this.createdAt = (_e = parseDate(data.createdAt)) !== null && _e !== void 0 ? _e : undefined;
            this.cycleCalenderUrl = (_f = data.cycleCalenderUrl) !== null && _f !== void 0 ? _f : undefined;
            this.cycleCooldownTime = (_g = data.cycleCooldownTime) !== null && _g !== void 0 ? _g : undefined;
            this.cycleDuration = (_h = data.cycleDuration) !== null && _h !== void 0 ? _h : undefined;
            this.cycleIssueAutoAssignCompleted = (_j = data.cycleIssueAutoAssignCompleted) !== null && _j !== void 0 ? _j : undefined;
            this.cycleIssueAutoAssignStarted = (_k = data.cycleIssueAutoAssignStarted) !== null && _k !== void 0 ? _k : undefined;
            this.cycleLockToActive = (_l = data.cycleLockToActive) !== null && _l !== void 0 ? _l : undefined;
            this.cycleStartDay = (_m = data.cycleStartDay) !== null && _m !== void 0 ? _m : undefined;
            this.cyclesEnabled = (_o = data.cyclesEnabled) !== null && _o !== void 0 ? _o : undefined;
            this.defaultIssueEstimate = (_p = data.defaultIssueEstimate) !== null && _p !== void 0 ? _p : undefined;
            this.defaultTemplateForMembersId = (_q = data.defaultTemplateForMembersId) !== null && _q !== void 0 ? _q : undefined;
            this.defaultTemplateForNonMembersId = (_r = data.defaultTemplateForNonMembersId) !== null && _r !== void 0 ? _r : undefined;
            this.description = (_s = data.description) !== null && _s !== void 0 ? _s : undefined;
            this.groupIssueHistory = (_t = data.groupIssueHistory) !== null && _t !== void 0 ? _t : undefined;
            this.id = (_u = data.id) !== null && _u !== void 0 ? _u : undefined;
            this.inviteHash = (_v = data.inviteHash) !== null && _v !== void 0 ? _v : undefined;
            this.issueEstimationAllowZero = (_w = data.issueEstimationAllowZero) !== null && _w !== void 0 ? _w : undefined;
            this.issueEstimationExtended = (_x = data.issueEstimationExtended) !== null && _x !== void 0 ? _x : undefined;
            this.issueEstimationType = (_y = data.issueEstimationType) !== null && _y !== void 0 ? _y : undefined;
            this.key = (_z = data.key) !== null && _z !== void 0 ? _z : undefined;
            this.name = (_0 = data.name) !== null && _0 !== void 0 ? _0 : undefined;
            this.private = (_1 = data.private) !== null && _1 !== void 0 ? _1 : undefined;
            this.slackIssueComments = (_2 = data.slackIssueComments) !== null && _2 !== void 0 ? _2 : undefined;
            this.slackIssueStatuses = (_3 = data.slackIssueStatuses) !== null && _3 !== void 0 ? _3 : undefined;
            this.slackNewIssue = (_4 = data.slackNewIssue) !== null && _4 !== void 0 ? _4 : undefined;
            this.timezone = (_5 = data.timezone) !== null && _5 !== void 0 ? _5 : undefined;
            this.upcomingCycleCount = (_6 = data.upcomingCycleCount) !== null && _6 !== void 0 ? _6 : undefined;
            this.updatedAt = (_7 = parseDate(data.updatedAt)) !== null && _7 !== void 0 ? _7 : undefined;
            this._activeCycle = (_8 = data.activeCycle) !== null && _8 !== void 0 ? _8 : undefined;
            this._draftWorkflowState = (_9 = data.draftWorkflowState) !== null && _9 !== void 0 ? _9 : undefined;
            this._markedAsDuplicateWorkflowState = (_10 = data.markedAsDuplicateWorkflowState) !== null && _10 !== void 0 ? _10 : undefined;
            this._mergeWorkflowState = (_11 = data.mergeWorkflowState) !== null && _11 !== void 0 ? _11 : undefined;
            this._reviewWorkflowState = (_12 = data.reviewWorkflowState) !== null && _12 !== void 0 ? _12 : undefined;
            this._startWorkflowState = (_13 = data.startWorkflowState) !== null && _13 !== void 0 ? _13 : undefined;
        }
        /** Team's currently active cycle. */
        get activeCycle() {
            var _a, _b;
            return ((_a = this._activeCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._activeCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The workflow state into which issues are moved when a PR has been opened as draft. */
        get draftWorkflowState() {
            var _a, _b;
            return ((_a = this._draftWorkflowState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._draftWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
        get markedAsDuplicateWorkflowState() {
            var _a, _b;
            return ((_a = this._markedAsDuplicateWorkflowState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._markedAsDuplicateWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when a PR has been merged. */
        get mergeWorkflowState() {
            var _a, _b;
            return ((_a = this._mergeWorkflowState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._mergeWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The organization that the team is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The workflow state into which issues are moved when a review has been requested for the PR. */
        get reviewWorkflowState() {
            var _a, _b;
            return ((_a = this._reviewWorkflowState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._reviewWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when a PR has been opened. */
        get startWorkflowState() {
            var _a, _b;
            return ((_a = this._startWorkflowState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._startWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** Cycles associated with the team. */
        cycles(variables) {
            return this.id ? new Team_CyclesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Issues associated with the team. */
        issues(variables) {
            return this.id ? new Team_IssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Labels associated with the team. */
        labels(variables) {
            return this.id ? new Team_LabelsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Users who are members of this team. */
        members(variables) {
            return this.id ? new Team_MembersQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Memberships associated with the team. For easier access of the same data, use `members` query. */
        memberships(variables) {
            return this.id ? new Team_MembershipsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Projects associated with the team. */
        projects(variables) {
            return this.id ? new Team_ProjectsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** The states that define the workflow associated with the team. */
        states(variables) {
            return this.id ? new Team_StatesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Templates associated with the team. */
        templates(variables) {
            return this.id ? new Team_TemplatesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Webhooks associated with the team. */
        webhooks(variables) {
            return this.id ? new Team_WebhooksQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Archives a team. */
        archive() {
            return this.id ? new TeamArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Deletes a team. */
        delete() {
            return this.id ? new TeamDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a team. */
        update(input) {
            return this.id ? new TeamUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * TeamConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TeamConnection model
     * @param data - TeamConnection response data
     */
    class TeamConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Team(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * Defines the membership of a user to a team.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamMembershipFragment response data
     */
    class TeamMembership extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.owner = (_d = data.owner) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this._team = (_f = data.team) !== null && _f !== void 0 ? _f : undefined;
            this._user = (_g = data.user) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The team that the membership is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that the membership is associated with. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a team membership. */
        delete() {
            return this.id ? new TeamMembershipDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a team membership. */
        update(input) {
            return this.id ? new TeamMembershipUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * TeamMembershipConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TeamMembershipConnection model
     * @param data - TeamMembershipConnection response data
     */
    class TeamMembershipConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new TeamMembership(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * TeamMembershipPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamMembershipPayloadFragment response data
     */
    class TeamMembershipPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._teamMembership = (_c = data.teamMembership) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The team membership that was created or updated. */
        get teamMembership() {
            var _a, _b;
            return ((_a = this._teamMembership) === null || _a === void 0 ? void 0 : _a.id) ? new TeamMembershipQuery(this._request).fetch((_b = this._teamMembership) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
    }
    /**
     * TeamPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamPayloadFragment response data
     */
    class TeamPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._team = (_c = data.team) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The team that was created or updated. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A template object used for creating new issues faster.
     *
     * @param request - function to call the graphql client
     * @param data - L.TemplateFragment response data
     */
    class Template extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.name = (_e = data.name) !== null && _e !== void 0 ? _e : undefined;
            this.templateData = (_f = parseJson(data.templateData)) !== null && _f !== void 0 ? _f : undefined;
            this.type = (_g = data.type) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : undefined;
            this._creator = (_j = data.creator) !== null && _j !== void 0 ? _j : undefined;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
        }
        /** The user who created the template. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the template is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a template. */
        delete() {
            return this.id ? new TemplateDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an existing template. */
        update(input) {
            return this.id ? new TemplateUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * TemplateConnection model
     *
     * @param request - function to call the graphql client
     * @param data - L.TemplateConnectionFragment response data
     */
    class TemplateConnection extends Request {
        constructor(request, data) {
            super(request);
            this.pageInfo = data.pageInfo ? new PageInfo(request, data.pageInfo) : undefined;
        }
        get nodes() {
            return new TemplatesQuery(this._request).fetch();
        }
    }
    /**
     * TemplatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TemplatePayloadFragment response data
     */
    class TemplatePayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._template = (_c = data.template) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The template that was created or updated. */
        get template() {
            var _a, _b;
            return ((_a = this._template) === null || _a === void 0 ? void 0 : _a.id) ? new TemplateQuery(this._request).fetch((_b = this._template) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Object representing Google Cloud upload policy, plus additional data.
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadFileFragment response data
     */
    class UploadFile extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.assetUrl = (_a = data.assetUrl) !== null && _a !== void 0 ? _a : undefined;
            this.contentType = (_b = data.contentType) !== null && _b !== void 0 ? _b : undefined;
            this.filename = (_c = data.filename) !== null && _c !== void 0 ? _c : undefined;
            this.metaData = (_d = parseJson(data.metaData)) !== null && _d !== void 0 ? _d : undefined;
            this.size = (_e = data.size) !== null && _e !== void 0 ? _e : undefined;
            this.uploadUrl = (_f = data.uploadUrl) !== null && _f !== void 0 ? _f : undefined;
            this.headers = data.headers ? data.headers.map(node => new UploadFileHeader(request, node)) : undefined;
        }
    }
    /**
     * UploadFileHeader model
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadFileHeaderFragment response data
     */
    class UploadFileHeader extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.key = (_a = data.key) !== null && _a !== void 0 ? _a : undefined;
            this.value = (_b = data.value) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * UploadPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadPayloadFragment response data
     */
    class UploadPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.uploadFile = data.uploadFile ? new UploadFile(request, data.uploadFile) : undefined;
        }
    }
    /**
     * A user that has access to the the resources of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserFragment response data
     */
    class User extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.active = (_a = data.active) !== null && _a !== void 0 ? _a : undefined;
            this.admin = (_b = data.admin) !== null && _b !== void 0 ? _b : undefined;
            this.archivedAt = (_c = parseDate(data.archivedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.avatarUrl = (_d = data.avatarUrl) !== null && _d !== void 0 ? _d : undefined;
            this.createdAt = (_e = parseDate(data.createdAt)) !== null && _e !== void 0 ? _e : undefined;
            this.createdIssueCount = (_f = data.createdIssueCount) !== null && _f !== void 0 ? _f : undefined;
            this.disableReason = (_g = data.disableReason) !== null && _g !== void 0 ? _g : undefined;
            this.displayName = (_h = data.displayName) !== null && _h !== void 0 ? _h : undefined;
            this.email = (_j = data.email) !== null && _j !== void 0 ? _j : undefined;
            this.id = (_k = data.id) !== null && _k !== void 0 ? _k : undefined;
            this.inviteHash = (_l = data.inviteHash) !== null && _l !== void 0 ? _l : undefined;
            this.lastSeen = (_m = parseDate(data.lastSeen)) !== null && _m !== void 0 ? _m : undefined;
            this.name = (_o = data.name) !== null && _o !== void 0 ? _o : undefined;
            this.updatedAt = (_p = parseDate(data.updatedAt)) !== null && _p !== void 0 ? _p : undefined;
        }
        /** Organization in which the user belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Issues assigned to the user. */
        assignedIssues(variables) {
            return this.id ? new User_AssignedIssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Issues created by the user. */
        createdIssues(variables) {
            return this.id ? new User_CreatedIssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
        teamMemberships(variables) {
            return this.id ? new User_TeamMembershipsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Teams the user is part of. */
        teams(variables) {
            return this.id ? new User_TeamsQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Updates the user's settings. */
        settingsUpdate(input) {
            return this.id ? new UserSettingsUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
        /** Suspends a user. Can only be called by an admin. */
        suspend() {
            return this.id ? new UserSuspendMutation(this._request).fetch(this.id) : undefined;
        }
        /** Un-suspends a user. Can only be called by an admin. */
        unsuspend() {
            return this.id ? new UserUnsuspendMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a user. Only available to organization admins and the user themselves. */
        update(input) {
            return this.id ? new UserUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * A user account.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAccountFragment response data
     */
    class UserAccount extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.email = (_c = data.email) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.name = (_e = data.name) !== null && _e !== void 0 ? _e : undefined;
            this.service = (_f = data.service) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.users = data.users ? data.users.map(node => new User(request, node)) : undefined;
        }
    }
    /**
     * UserAdminPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAdminPayloadFragment response data
     */
    class UserAdminPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Public information of the OAuth application, plus whether the application has been authorized for the given scopes.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAuthorizedApplicationFragment response data
     */
    class UserAuthorizedApplication extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.clientId = (_a = data.clientId) !== null && _a !== void 0 ? _a : undefined;
            this.description = (_b = data.description) !== null && _b !== void 0 ? _b : undefined;
            this.developer = (_c = data.developer) !== null && _c !== void 0 ? _c : undefined;
            this.developerUrl = (_d = data.developerUrl) !== null && _d !== void 0 ? _d : undefined;
            this.imageUrl = (_e = data.imageUrl) !== null && _e !== void 0 ? _e : undefined;
            this.isAuthorized = (_f = data.isAuthorized) !== null && _f !== void 0 ? _f : undefined;
            this.name = (_g = data.name) !== null && _g !== void 0 ? _g : undefined;
        }
    }
    /**
     * UserConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this UserConnection model
     * @param data - UserConnection response data
     */
    class UserConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new User(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * UserPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserPayloadFragment response data
     */
    class UserPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._user = (_c = data.user) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The user that was created or updated. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * The settings of a user as a JSON object.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFragment response data
     */
    class UserSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.notificationPreferences = (_d = parseJson(data.notificationPreferences)) !== null && _d !== void 0 ? _d : undefined;
            this.unsubscribedFrom = (_e = data.unsubscribedFrom) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : undefined;
            this._user = (_g = data.user) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The user associated with these settings. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Updates the user's settings. */
        update(input) {
            return this.id ? new UserSettingsUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * UserSettingsFlagPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFlagPayloadFragment response data
     */
    class UserSettingsFlagPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.flag = (_a = data.flag) !== null && _a !== void 0 ? _a : undefined;
            this.lastSyncId = (_b = data.lastSyncId) !== null && _b !== void 0 ? _b : undefined;
            this.success = (_c = data.success) !== null && _c !== void 0 ? _c : undefined;
            this.value = (_d = data.value) !== null && _d !== void 0 ? _d : undefined;
        }
    }
    /**
     * UserSettingsFlagsResetPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFlagsResetPayloadFragment response data
     */
    class UserSettingsFlagsResetPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * UserSettingsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsPayloadFragment response data
     */
    class UserSettingsPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
        }
        /** The user's settings. */
        get userSettings() {
            return new UserSettingsQuery(this._request).fetch();
        }
    }
    /**
     * UserSubscribeToNewsletterPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSubscribeToNewsletterPayloadFragment response data
     */
    class UserSubscribeToNewsletterPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.success = (_a = data.success) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * View preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesFragment response data
     */
    class ViewPreferences extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.id = (_c = data.id) !== null && _c !== void 0 ? _c : undefined;
            this.type = (_d = data.type) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.viewType = (_f = data.viewType) !== null && _f !== void 0 ? _f : undefined;
        }
        /** Deletes a ViewPreferences. */
        delete() {
            return this.id ? new ViewPreferencesDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an existing ViewPreferences object. */
        update(input) {
            return this.id ? new ViewPreferencesUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * ViewPreferencesPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesPayloadFragment response data
     */
    class ViewPreferencesPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this.viewPreferences = data.viewPreferences ? new ViewPreferences(request, data.viewPreferences) : undefined;
        }
    }
    /**
     * A webhook used to send HTTP notifications over data updates
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookFragment response data
     */
    class Webhook extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : undefined;
            this.enabled = (_c = data.enabled) !== null && _c !== void 0 ? _c : undefined;
            this.id = (_d = data.id) !== null && _d !== void 0 ? _d : undefined;
            this.label = (_e = data.label) !== null && _e !== void 0 ? _e : undefined;
            this.resourceTypes = (_f = data.resourceTypes) !== null && _f !== void 0 ? _f : undefined;
            this.secret = (_g = data.secret) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : undefined;
            this.url = (_j = data.url) !== null && _j !== void 0 ? _j : undefined;
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The user who created the webhook. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the webhook is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a Webhook. */
        delete() {
            return this.id ? new WebhookDeleteMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates an existing Webhook. */
        update(input) {
            return this.id ? new WebhookUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * WebhookConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WebhookConnection model
     * @param data - WebhookConnection response data
     */
    class WebhookConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new Webhook(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * WebhookPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookPayloadFragment response data
     */
    class WebhookPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._webhook = (_c = data.webhook) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The webhook entity being mutated. */
        get webhook() {
            var _a, _b;
            return ((_a = this._webhook) === null || _a === void 0 ? void 0 : _a.id) ? new WebhookQuery(this._request).fetch((_b = this._webhook) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A state in a team workflow.
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStateFragment response data
     */
    class WorkflowState extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : undefined;
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.id = (_e = data.id) !== null && _e !== void 0 ? _e : undefined;
            this.name = (_f = data.name) !== null && _f !== void 0 ? _f : undefined;
            this.position = (_g = data.position) !== null && _g !== void 0 ? _g : undefined;
            this.type = (_h = data.type) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : undefined;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
        }
        /** The team to which this state belongs to. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Issues belonging in this state. */
        issues(variables) {
            return this.id ? new WorkflowState_IssuesQuery(this._request, this.id, variables).fetch(variables) : undefined;
        }
        /** Archives a state. Only states with issues that have all been archived can be archived. */
        archive() {
            return this.id ? new WorkflowStateArchiveMutation(this._request).fetch(this.id) : undefined;
        }
        /** Updates a state. */
        update(input) {
            return this.id ? new WorkflowStateUpdateMutation(this._request).fetch(this.id, input) : undefined;
        }
    }
    /**
     * WorkflowStateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WorkflowStateConnection model
     * @param data - WorkflowStateConnection response data
     */
    class WorkflowStateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, (data === null || data === void 0 ? void 0 : data.nodes) ? data.nodes.map(node => new WorkflowState(request, node)) : undefined, (data === null || data === void 0 ? void 0 : data.pageInfo) ? new PageInfo(request, data.pageInfo) : undefined);
        }
    }
    /**
     * WorkflowStatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStatePayloadFragment response data
     */
    class WorkflowStatePayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.lastSyncId = (_a = data.lastSyncId) !== null && _a !== void 0 ? _a : undefined;
            this.success = (_b = data.success) !== null && _b !== void 0 ? _b : undefined;
            this._workflowState = (_c = data.workflowState) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The state that was created or updated. */
        get workflowState() {
            var _a, _b;
            return ((_a = this._workflowState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._workflowState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Zendesk specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.ZendeskSettingsFragment response data
     */
    class ZendeskSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.botUserId = (_a = data.botUserId) !== null && _a !== void 0 ? _a : undefined;
            this.subdomain = (_b = data.subdomain) !== null && _b !== void 0 ? _b : undefined;
            this.url = (_c = data.url) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * A fetchable ApiKeys Query
     *
     * @param request - function to call the graphql client
     */
    class ApiKeysQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApiKeys query and return a ApiKeyConnection
         *
         * @param variables - variables to pass into the ApiKeysQuery
         * @returns parsed response from ApiKeysQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ApiKeysDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.apiKeys;
                    return data
                        ? new ApiKeyConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ApplicationWithAuthorization Query
     *
     * @param request - function to call the graphql client
     */
    class ApplicationWithAuthorizationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApplicationWithAuthorization query and return a UserAuthorizedApplication
         *
         * @param clientId - required clientId to pass to applicationWithAuthorization
         * @param scope - required scope to pass to applicationWithAuthorization
         * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
         * @returns parsed response from ApplicationWithAuthorizationQuery
         */
        fetch(clientId, scope, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ApplicationWithAuthorizationDocument, Object.assign({ clientId,
                    scope }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.applicationWithAuthorization;
                    return data ? new UserAuthorizedApplication(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ArchivedModelSync Query
     *
     * @param request - function to call the graphql client
     */
    class ArchivedModelSyncQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchivedModelSync query and return a ArchiveResponse
         *
         * @param identifier - required identifier to pass to archivedModelSync
         * @param modelClass - required modelClass to pass to archivedModelSync
         * @returns parsed response from ArchivedModelSyncQuery
         */
        fetch(identifier, modelClass) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ArchivedModelSyncDocument, {
                    identifier,
                    modelClass,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.archivedModelSync;
                    return data ? new ArchiveResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ArchivedModelsSync Query
     *
     * @param request - function to call the graphql client
     */
    class ArchivedModelsSyncQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchivedModelsSync query and return a ArchiveResponse
         *
         * @param modelClass - required modelClass to pass to archivedModelsSync
         * @param teamId - required teamId to pass to archivedModelsSync
         * @param variables - variables without 'modelClass', 'teamId' to pass into the ArchivedModelsSyncQuery
         * @returns parsed response from ArchivedModelsSyncQuery
         */
        fetch(modelClass, teamId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ArchivedModelsSyncDocument, Object.assign({ modelClass,
                    teamId }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.archivedModelsSync;
                    return data ? new ArchiveResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Attachment Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Attachment query and return a Attachment
         *
         * @param id - required id to pass to attachment
         * @returns parsed response from AttachmentQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.attachment;
                    return data ? new Attachment(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentIssueQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentIssue query and return a Issue
         *
         * @param id - required id to pass to attachmentIssue
         * @returns parsed response from AttachmentIssueQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssueDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.attachmentIssue;
                    return data ? new Issue(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Attachments Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Attachments query and return a AttachmentConnection
         *
         * @param variables - variables to pass into the AttachmentsQuery
         * @returns parsed response from AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.attachments;
                    return data
                        ? new AttachmentConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AuthorizedApplications Query
     *
     * @param request - function to call the graphql client
     */
    class AuthorizedApplicationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AuthorizedApplications query and return a AuthorizedApplication list
         *
         * @returns parsed response from AuthorizedApplicationsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AuthorizedApplicationsDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.authorizedApplications;
                    return data ? data.map(node => new AuthorizedApplication(this._request, node)) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AvailableUsers Query
     *
     * @param request - function to call the graphql client
     */
    class AvailableUsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AvailableUsers query and return a AuthResolverResponse
         *
         * @returns parsed response from AvailableUsersQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AvailableUsersDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.availableUsers;
                    return data ? new AuthResolverResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable BillingDetails Query
     *
     * @param request - function to call the graphql client
     */
    class BillingDetailsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the BillingDetails query and return a BillingDetailsPayload
         *
         * @returns parsed response from BillingDetailsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(BillingDetailsDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.billingDetails;
                    return data ? new BillingDetailsPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CollaborativeDocumentJoin Query
     *
     * @param request - function to call the graphql client
     */
    class CollaborativeDocumentJoinQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CollaborativeDocumentJoin query and return a CollaborationDocumentUpdatePayload
         *
         * @param clientId - required clientId to pass to collaborativeDocumentJoin
         * @param issueId - required issueId to pass to collaborativeDocumentJoin
         * @param version - required version to pass to collaborativeDocumentJoin
         * @returns parsed response from CollaborativeDocumentJoinQuery
         */
        fetch(clientId, issueId, version) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CollaborativeDocumentJoinDocument, {
                    clientId,
                    issueId,
                    version,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.collaborativeDocumentJoin;
                    return data ? new CollaborationDocumentUpdatePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Comment Query
     *
     * @param request - function to call the graphql client
     */
    class CommentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Comment query and return a Comment
         *
         * @param id - required id to pass to comment
         * @returns parsed response from CommentQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CommentDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.comment;
                    return data ? new Comment(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Comments Query
     *
     * @param request - function to call the graphql client
     */
    class CommentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Comments query and return a CommentConnection
         *
         * @param variables - variables to pass into the CommentsQuery
         * @returns parsed response from CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CommentsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.comments;
                    return data
                        ? new CommentConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CustomView Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomView query and return a CustomView
         *
         * @param id - required id to pass to customView
         * @returns parsed response from CustomViewQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CustomViewDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.customView;
                    return data ? new CustomView(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CustomViews Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViews query and return a CustomViewConnection
         *
         * @param variables - variables to pass into the CustomViewsQuery
         * @returns parsed response from CustomViewsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CustomViewsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.customViews;
                    return data
                        ? new CustomViewConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Cycle Query
     *
     * @param request - function to call the graphql client
     */
    class CycleQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Cycle query and return a Cycle
         *
         * @param id - required id to pass to cycle
         * @returns parsed response from CycleQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CycleDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.cycle;
                    return data ? new Cycle(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Cycles Query
     *
     * @param request - function to call the graphql client
     */
    class CyclesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Cycles query and return a CycleConnection
         *
         * @param variables - variables to pass into the CyclesQuery
         * @returns parsed response from CyclesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CyclesDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.cycles;
                    return data
                        ? new CycleConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Emoji Query
     *
     * @param request - function to call the graphql client
     */
    class EmojiQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Emoji query and return a Emoji
         *
         * @param id - required id to pass to emoji
         * @returns parsed response from EmojiQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EmojiDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.emoji;
                    return data ? new Emoji(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Emojis Query
     *
     * @param request - function to call the graphql client
     */
    class EmojisQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Emojis query and return a EmojiConnection
         *
         * @param variables - variables to pass into the EmojisQuery
         * @returns parsed response from EmojisQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EmojisDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.emojis;
                    return data
                        ? new EmojiConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Favorite Query
     *
     * @param request - function to call the graphql client
     */
    class FavoriteQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Favorite query and return a Favorite
         *
         * @param id - required id to pass to favorite
         * @returns parsed response from FavoriteQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FavoriteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.favorite;
                    return data ? new Favorite(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Favorites Query
     *
     * @param request - function to call the graphql client
     */
    class FavoritesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Favorites query and return a FavoriteConnection
         *
         * @param variables - variables to pass into the FavoritesQuery
         * @returns parsed response from FavoritesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FavoritesDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.favorites;
                    return data
                        ? new FavoriteConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable FigmaEmbedInfo Query
     *
     * @param request - function to call the graphql client
     */
    class FigmaEmbedInfoQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FigmaEmbedInfo query and return a FigmaEmbedPayload
         *
         * @param fileId - required fileId to pass to figmaEmbedInfo
         * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfoQuery
         * @returns parsed response from FigmaEmbedInfoQuery
         */
        fetch(fileId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FigmaEmbedInfoDocument, Object.assign({ fileId }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.figmaEmbedInfo;
                    return data ? new FigmaEmbedPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Integration Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Integration query and return a Integration
         *
         * @param id - required id to pass to integration
         * @returns parsed response from IntegrationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integration;
                    return data ? new Integration(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Integrations Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Integrations query and return a IntegrationConnection
         *
         * @param variables - variables to pass into the IntegrationsQuery
         * @returns parsed response from IntegrationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrations;
                    return data
                        ? new IntegrationConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable InviteInfo Query
     *
     * @param request - function to call the graphql client
     */
    class InviteInfoQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InviteInfo query and return a InvitePagePayload
         *
         * @param userHash - required userHash to pass to inviteInfo
         * @param variables - variables without 'userHash' to pass into the InviteInfoQuery
         * @returns parsed response from InviteInfoQuery
         */
        fetch(userHash, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(InviteInfoDocument, Object.assign({ userHash }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.inviteInfo;
                    return data ? new InvitePagePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue Query
     *
     * @param request - function to call the graphql client
     */
    class IssueQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Issue query and return a Issue
         *
         * @param id - required id to pass to issue
         * @returns parsed response from IssueQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issue;
                    return data ? new Issue(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueImportFinishGithubOAuth Query
     *
     * @param request - function to call the graphql client
     */
    class IssueImportFinishGithubOAuthQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportFinishGithubOAuth query and return a OAuthTokenPayload
         *
         * @param code - required code to pass to issueImportFinishGithubOAuth
         * @returns parsed response from IssueImportFinishGithubOAuthQuery
         */
        fetch(code) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueImportFinishGithubOAuthDocument, {
                    code,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueImportFinishGithubOAuth;
                    return data ? new OAuthTokenPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueLabel Query
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabel query and return a IssueLabel
         *
         * @param id - required id to pass to issueLabel
         * @returns parsed response from IssueLabelQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueLabelDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueLabel;
                    return data ? new IssueLabel(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueLabels Query
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabels query and return a IssueLabelConnection
         *
         * @param variables - variables to pass into the IssueLabelsQuery
         * @returns parsed response from IssueLabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueLabelsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueLabels;
                    return data
                        ? new IssueLabelConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssuePriorityValues Query
     *
     * @param request - function to call the graphql client
     */
    class IssuePriorityValuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssuePriorityValues query and return a IssuePriorityValue list
         *
         * @returns parsed response from IssuePriorityValuesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssuePriorityValuesDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issuePriorityValues;
                    return data ? data.map(node => new IssuePriorityValue(this._request, node)) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueRelation Query
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelation query and return a IssueRelation
         *
         * @param id - required id to pass to issueRelation
         * @returns parsed response from IssueRelationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueRelationDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueRelation;
                    return data ? new IssueRelation(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueRelations Query
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelations query and return a IssueRelationConnection
         *
         * @param variables - variables to pass into the IssueRelationsQuery
         * @returns parsed response from IssueRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueRelationsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueRelations;
                    return data
                        ? new IssueRelationConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueSearch Query
     *
     * @param request - function to call the graphql client
     */
    class IssueSearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueSearch query and return a IssueConnection
         *
         * @param query - required query to pass to issueSearch
         * @param variables - variables without 'query' to pass into the IssueSearchQuery
         * @returns parsed response from IssueSearchQuery
         */
        fetch(query, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueSearchDocument, Object.assign({ query }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueSearch;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(query, Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issues Query
     *
     * @param request - function to call the graphql client
     */
    class IssuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Issues query and return a IssueConnection
         *
         * @param variables - variables to pass into the IssuesQuery
         * @returns parsed response from IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssuesDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Milestone Query
     *
     * @param request - function to call the graphql client
     */
    class MilestoneQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Milestone query and return a Milestone
         *
         * @param id - required id to pass to milestone
         * @returns parsed response from MilestoneQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(MilestoneDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.milestone;
                    return data ? new Milestone(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Milestones Query
     *
     * @param request - function to call the graphql client
     */
    class MilestonesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Milestones query and return a MilestoneConnection
         *
         * @param variables - variables to pass into the MilestonesQuery
         * @returns parsed response from MilestonesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(MilestonesDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.milestones;
                    return data
                        ? new MilestoneConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Notification Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Notification query and return a Notification
         *
         * @param id - required id to pass to notification
         * @returns parsed response from NotificationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notification;
                    return data ? new Notification(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationSubscription Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscription query and return a NotificationSubscription
         *
         * @param id - required id to pass to notificationSubscription
         * @returns parsed response from NotificationSubscriptionQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationSubscriptionDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationSubscription;
                    return data ? new NotificationSubscription(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationSubscriptions Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscriptions query and return a NotificationSubscriptionConnection
         *
         * @param variables - variables to pass into the NotificationSubscriptionsQuery
         * @returns parsed response from NotificationSubscriptionsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationSubscriptionsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationSubscriptions;
                    return data
                        ? new NotificationSubscriptionConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Notifications Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Notifications query and return a NotificationConnection
         *
         * @param variables - variables to pass into the NotificationsQuery
         * @returns parsed response from NotificationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notifications;
                    return data
                        ? new NotificationConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Organization Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Organization query and return a Organization
         *
         * @returns parsed response from OrganizationQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organization;
                    return data ? new Organization(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationExists Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationExistsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationExists query and return a OrganizationExistsPayload
         *
         * @param urlKey - required urlKey to pass to organizationExists
         * @returns parsed response from OrganizationExistsQuery
         */
        fetch(urlKey) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationExistsDocument, {
                    urlKey,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationExists;
                    return data ? new OrganizationExistsPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationInvite Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInviteQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInvite query and return a IssueLabel
         *
         * @param id - required id to pass to organizationInvite
         * @returns parsed response from OrganizationInviteQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationInviteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationInvite;
                    return data ? new IssueLabel(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationInvites Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInvitesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInvites query and return a OrganizationInviteConnection
         *
         * @param variables - variables to pass into the OrganizationInvitesQuery
         * @returns parsed response from OrganizationInvitesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationInvitesDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationInvites;
                    return data
                        ? new OrganizationInviteConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Project Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Project query and return a Project
         *
         * @param id - required id to pass to project
         * @returns parsed response from ProjectQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.project;
                    return data ? new Project(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ProjectLink Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectLinkQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLink query and return a ProjectLink
         *
         * @param id - required id to pass to projectLink
         * @returns parsed response from ProjectLinkQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectLinkDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projectLink;
                    return data ? new ProjectLink(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ProjectLinks Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectLinksQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLinks query and return a ProjectLinkConnection
         *
         * @param variables - variables to pass into the ProjectLinksQuery
         * @returns parsed response from ProjectLinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectLinksDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projectLinks;
                    return data
                        ? new ProjectLinkConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Projects Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Projects query and return a ProjectConnection
         *
         * @param variables - variables to pass into the ProjectsQuery
         * @returns parsed response from ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projects;
                    return data
                        ? new ProjectConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable PushSubscriptionTest Query
     *
     * @param request - function to call the graphql client
     */
    class PushSubscriptionTestQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the PushSubscriptionTest query and return a PushSubscriptionPayload
         *
         * @returns parsed response from PushSubscriptionTestQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(PushSubscriptionTestDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.pushSubscriptionTest;
                    return data ? new PushSubscriptionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Reaction Query
     *
     * @param request - function to call the graphql client
     */
    class ReactionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Reaction query and return a Reaction
         *
         * @param id - required id to pass to reaction
         * @returns parsed response from ReactionQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ReactionDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.reaction;
                    return data ? new Reaction(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Reactions Query
     *
     * @param request - function to call the graphql client
     */
    class ReactionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Reactions query and return a ReactionConnection
         *
         * @param variables - variables to pass into the ReactionsQuery
         * @returns parsed response from ReactionsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ReactionsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.reactions;
                    return data
                        ? new ReactionConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SsoUrlFromEmail Query
     *
     * @param request - function to call the graphql client
     */
    class SsoUrlFromEmailQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SsoUrlFromEmail query and return a SsoUrlFromEmailResponse
         *
         * @param email - required email to pass to ssoUrlFromEmail
         * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
         * @returns parsed response from SsoUrlFromEmailQuery
         */
        fetch(email, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SsoUrlFromEmailDocument, Object.assign({ email }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.ssoUrlFromEmail;
                    return data ? new SsoUrlFromEmailResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Subscription Query
     *
     * @param request - function to call the graphql client
     */
    class SubscriptionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Subscription query and return a Subscription
         *
         * @returns parsed response from SubscriptionQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SubscriptionDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.subscription;
                    return data ? new Subscription(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SyncBootstrap Query
     *
     * @param request - function to call the graphql client
     */
    class SyncBootstrapQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SyncBootstrap query and return a SyncResponse
         *
         * @param variables - variables to pass into the SyncBootstrapQuery
         * @returns parsed response from SyncBootstrapQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SyncBootstrapDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.syncBootstrap;
                    return data ? new SyncResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team Query
     *
     * @param request - function to call the graphql client
     */
    class TeamQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Team query and return a Team
         *
         * @param id - required id to pass to team
         * @returns parsed response from TeamQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.team;
                    return data ? new Team(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamMembership Query
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMembership query and return a TeamMembership
         *
         * @param id - required id to pass to teamMembership
         * @returns parsed response from TeamMembershipQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamMembershipDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamMembership;
                    return data ? new TeamMembership(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamMemberships Query
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables to pass into the TeamMembershipsQuery
         * @returns parsed response from TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamMembershipsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamMemberships;
                    return data
                        ? new TeamMembershipConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Teams Query
     *
     * @param request - function to call the graphql client
     */
    class TeamsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the TeamsQuery
         * @returns parsed response from TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamsDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teams;
                    return data
                        ? new TeamConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Template Query
     *
     * @param request - function to call the graphql client
     */
    class TemplateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Template query and return a Template
         *
         * @param id - required id to pass to template
         * @returns parsed response from TemplateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TemplateDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.template;
                    return data ? new Template(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Templates Query
     *
     * @param request - function to call the graphql client
     */
    class TemplatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Templates query and return a Template list
         *
         * @returns parsed response from TemplatesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TemplatesDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.templates;
                    return data ? data.map(node => new Template(this._request, node)) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable User Query
     *
     * @param request - function to call the graphql client
     */
    class UserQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the User query and return a User
         *
         * @param id - required id to pass to user
         * @returns parsed response from UserQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.user;
                    return data ? new User(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserSettings Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings query and return a UserSettings
         *
         * @returns parsed response from UserSettingsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserSettingsDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userSettings;
                    return data ? new UserSettings(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Users Query
     *
     * @param request - function to call the graphql client
     */
    class UsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Users query and return a UserConnection
         *
         * @param variables - variables to pass into the UsersQuery
         * @returns parsed response from UsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UsersDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.users;
                    return data
                        ? new UserConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Viewer Query
     *
     * @param request - function to call the graphql client
     */
    class ViewerQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Viewer query and return a User
         *
         * @returns parsed response from ViewerQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ViewerDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.viewer;
                    return data ? new User(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Webhook Query
     *
     * @param request - function to call the graphql client
     */
    class WebhookQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Webhook query and return a Webhook
         *
         * @param id - required id to pass to webhook
         * @returns parsed response from WebhookQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WebhookDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.webhook;
                    return data ? new Webhook(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Webhooks Query
     *
     * @param request - function to call the graphql client
     */
    class WebhooksQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Webhooks query and return a WebhookConnection
         *
         * @param variables - variables to pass into the WebhooksQuery
         * @returns parsed response from WebhooksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WebhooksDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.webhooks;
                    return data
                        ? new WebhookConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WorkflowState Query
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowState query and return a WorkflowState
         *
         * @param id - required id to pass to workflowState
         * @returns parsed response from WorkflowStateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WorkflowStateDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.workflowState;
                    return data ? new WorkflowState(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WorkflowStates Query
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowStates query and return a WorkflowStateConnection
         *
         * @param variables - variables to pass into the WorkflowStatesQuery
         * @returns parsed response from WorkflowStatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WorkflowStatesDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.workflowStates;
                    return data
                        ? new WorkflowStateConnection(this._request, connection => this.fetch(Object.assign(Object.assign({}, variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ApiKeyCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ApiKeyCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApiKeyCreate mutation and return a ApiKeyPayload
         *
         * @param input - required input to pass to apiKeyCreate
         * @returns parsed response from ApiKeyCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ApiKeyCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.apiKeyCreate;
                    return data ? new ApiKeyPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ApiKeyDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class ApiKeyDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApiKeyDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to apiKeyDelete
         * @returns parsed response from ApiKeyDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ApiKeyDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.apiKeyDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to attachmentArchive
         * @returns parsed response from AttachmentArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.attachmentArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentCreate mutation and return a AttachmentPayload
         *
         * @param input - required input to pass to attachmentCreate
         * @returns parsed response from AttachmentCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.attachmentCreate;
                    return data ? new AttachmentPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentUpdate mutation and return a AttachmentPayload
         *
         * @param id - required id to pass to attachmentUpdate
         * @param input - required input to pass to attachmentUpdate
         * @returns parsed response from AttachmentUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.attachmentUpdate;
                    return data ? new AttachmentPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable BillingEmailUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class BillingEmailUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the BillingEmailUpdate mutation and return a BillingEmailPayload
         *
         * @param input - required input to pass to billingEmailUpdate
         * @returns parsed response from BillingEmailUpdateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(BillingEmailUpdateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.billingEmailUpdate;
                    return data ? new BillingEmailPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CollaborativeDocumentUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CollaborativeDocumentUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CollaborativeDocumentUpdate mutation and return a CollaborationDocumentUpdatePayload
         *
         * @param input - required input to pass to collaborativeDocumentUpdate
         * @returns parsed response from CollaborativeDocumentUpdateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CollaborativeDocumentUpdateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.collaborativeDocumentUpdate;
                    return data ? new CollaborationDocumentUpdatePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CommentCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CommentCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CommentCreate mutation and return a CommentPayload
         *
         * @param input - required input to pass to commentCreate
         * @returns parsed response from CommentCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CommentCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.commentCreate;
                    return data ? new CommentPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CommentDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class CommentDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CommentDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to commentDelete
         * @returns parsed response from CommentDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CommentDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.commentDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CommentUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CommentUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CommentUpdate mutation and return a CommentPayload
         *
         * @param id - required id to pass to commentUpdate
         * @param input - required input to pass to commentUpdate
         * @returns parsed response from CommentUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CommentUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.commentUpdate;
                    return data ? new CommentPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ContactCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ContactCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ContactCreate mutation and return a ContactPayload
         *
         * @param input - required input to pass to contactCreate
         * @returns parsed response from ContactCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ContactCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.contactCreate;
                    return data ? new ContactPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CreateCsvExportReport Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCsvExportReportMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCsvExportReport mutation and return a CreateCsvExportReportPayload
         *
         * @param variables - variables to pass into the CreateCsvExportReportMutation
         * @returns parsed response from CreateCsvExportReportMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CreateCsvExportReportDocument, variables).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.createCsvExportReport;
                    return data ? new CreateCsvExportReportPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CreateOrganizationFromOnboarding Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateOrganizationFromOnboardingMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param input - required input to pass to createOrganizationFromOnboarding
         * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
         * @returns parsed response from CreateOrganizationFromOnboardingMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CreateOrganizationFromOnboardingDocument, Object.assign({ input }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.createOrganizationFromOnboarding;
                    return data ? new CreateOrJoinOrganizationResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CustomViewCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CustomViewCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViewCreate mutation and return a CustomViewPayload
         *
         * @param input - required input to pass to customViewCreate
         * @returns parsed response from CustomViewCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CustomViewCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.customViewCreate;
                    return data ? new CustomViewPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CustomViewDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class CustomViewDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViewDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to customViewDelete
         * @returns parsed response from CustomViewDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CustomViewDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.customViewDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CustomViewUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CustomViewUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViewUpdate mutation and return a CustomViewPayload
         *
         * @param id - required id to pass to customViewUpdate
         * @param input - required input to pass to customViewUpdate
         * @returns parsed response from CustomViewUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CustomViewUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.customViewUpdate;
                    return data ? new CustomViewPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CycleArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class CycleArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CycleArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to cycleArchive
         * @returns parsed response from CycleArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CycleArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.cycleArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CycleCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CycleCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CycleCreate mutation and return a CyclePayload
         *
         * @param input - required input to pass to cycleCreate
         * @returns parsed response from CycleCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CycleCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.cycleCreate;
                    return data ? new CyclePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CycleUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CycleUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CycleUpdate mutation and return a CyclePayload
         *
         * @param id - required id to pass to cycleUpdate
         * @param input - required input to pass to cycleUpdate
         * @returns parsed response from CycleUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CycleUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.cycleUpdate;
                    return data ? new CyclePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable DebugCreateSamlOrg Mutation
     *
     * @param request - function to call the graphql client
     */
    class DebugCreateSamlOrgMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DebugCreateSamlOrg mutation and return a DebugPayload
         *
         * @returns parsed response from DebugCreateSamlOrgMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(DebugCreateSamlOrgDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.debugCreateSAMLOrg;
                    return data ? new DebugPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable DebugFailWithInternalError Mutation
     *
     * @param request - function to call the graphql client
     */
    class DebugFailWithInternalErrorMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DebugFailWithInternalError mutation and return a DebugPayload
         *
         * @returns parsed response from DebugFailWithInternalErrorMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(DebugFailWithInternalErrorDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.debugFailWithInternalError;
                    return data ? new DebugPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable DebugFailWithWarning Mutation
     *
     * @param request - function to call the graphql client
     */
    class DebugFailWithWarningMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DebugFailWithWarning mutation and return a DebugPayload
         *
         * @returns parsed response from DebugFailWithWarningMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(DebugFailWithWarningDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.debugFailWithWarning;
                    return data ? new DebugPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable EmailTokenUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailTokenUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailTokenUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to emailTokenUserAccountAuth
         * @returns parsed response from EmailTokenUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EmailTokenUserAccountAuthDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.emailTokenUserAccountAuth;
                    return data ? new AuthResolverResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable EmailUnsubscribe Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailUnsubscribeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailUnsubscribe mutation and return a EmailUnsubscribePayload
         *
         * @param input - required input to pass to emailUnsubscribe
         * @returns parsed response from EmailUnsubscribeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EmailUnsubscribeDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.emailUnsubscribe;
                    return data ? new EmailUnsubscribePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable EmailUserAccountAuthChallenge Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailUserAccountAuthChallengeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailUserAccountAuthChallenge mutation and return a EmailUserAccountAuthChallengeResponse
         *
         * @param input - required input to pass to emailUserAccountAuthChallenge
         * @returns parsed response from EmailUserAccountAuthChallengeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EmailUserAccountAuthChallengeDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.emailUserAccountAuthChallenge;
                    return data ? new EmailUserAccountAuthChallengeResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable EmojiCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmojiCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmojiCreate mutation and return a EmojiPayload
         *
         * @param input - required input to pass to emojiCreate
         * @returns parsed response from EmojiCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EmojiCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.emojiCreate;
                    return data ? new EmojiPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable EmojiDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmojiDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmojiDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to emojiDelete
         * @returns parsed response from EmojiDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EmojiDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.emojiDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable EventCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class EventCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EventCreate mutation and return a EventPayload
         *
         * @param input - required input to pass to eventCreate
         * @returns parsed response from EventCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(EventCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.eventCreate;
                    return data ? new EventPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable FavoriteCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class FavoriteCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FavoriteCreate mutation and return a FavoritePayload
         *
         * @param input - required input to pass to favoriteCreate
         * @returns parsed response from FavoriteCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FavoriteCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.favoriteCreate;
                    return data ? new FavoritePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable FavoriteDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class FavoriteDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FavoriteDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to favoriteDelete
         * @returns parsed response from FavoriteDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FavoriteDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.favoriteDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable FavoriteUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class FavoriteUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FavoriteUpdate mutation and return a FavoritePayload
         *
         * @param id - required id to pass to favoriteUpdate
         * @param input - required input to pass to favoriteUpdate
         * @returns parsed response from FavoriteUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FavoriteUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.favoriteUpdate;
                    return data ? new FavoritePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable FeedbackCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class FeedbackCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FeedbackCreate mutation and return a FeedbackPayload
         *
         * @param input - required input to pass to feedbackCreate
         * @returns parsed response from FeedbackCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FeedbackCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.feedbackCreate;
                    return data ? new FeedbackPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable FileUpload Mutation
     *
     * @param request - function to call the graphql client
     */
    class FileUploadMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FileUpload mutation and return a UploadPayload
         *
         * @param contentType - required contentType to pass to fileUpload
         * @param filename - required filename to pass to fileUpload
         * @param size - required size to pass to fileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
         * @returns parsed response from FileUploadMutation
         */
        fetch(contentType, filename, size, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FileUploadDocument, Object.assign({ contentType,
                    filename,
                    size }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.fileUpload;
                    return data ? new UploadPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable GoogleUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class GoogleUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the GoogleUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to googleUserAccountAuth
         * @returns parsed response from GoogleUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(GoogleUserAccountAuthDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.googleUserAccountAuth;
                    return data ? new AuthResolverResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ImageUploadFromUrl Mutation
     *
     * @param request - function to call the graphql client
     */
    class ImageUploadFromUrlMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ImageUploadFromUrl mutation and return a ImageUploadFromUrlPayload
         *
         * @param url - required url to pass to imageUploadFromUrl
         * @returns parsed response from ImageUploadFromUrlMutation
         */
        fetch(url) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ImageUploadFromUrlDocument, {
                    url,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.imageUploadFromUrl;
                    return data ? new ImageUploadFromUrlPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to integrationDelete
         * @returns parsed response from IntegrationDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationFigma Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationFigmaMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationFigma mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationFigma
         * @param redirectUri - required redirectUri to pass to integrationFigma
         * @returns parsed response from IntegrationFigmaMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationFigmaDocument, {
                    code,
                    redirectUri,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationFigma;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationGithubConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGithubConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGithubConnect mutation and return a IntegrationPayload
         *
         * @param installationId - required installationId to pass to integrationGithubConnect
         * @returns parsed response from IntegrationGithubConnectMutation
         */
        fetch(installationId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationGithubConnectDocument, {
                    installationId,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationGithubConnect;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationGitlabConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGitlabConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGitlabConnect mutation and return a IntegrationPayload
         *
         * @param accessToken - required accessToken to pass to integrationGitlabConnect
         * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
         * @returns parsed response from IntegrationGitlabConnectMutation
         */
        fetch(accessToken, gitlabUrl) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationGitlabConnectDocument, {
                    accessToken,
                    gitlabUrl,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationGitlabConnect;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationGoogleSheets Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGoogleSheetsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGoogleSheets mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGoogleSheets
         * @returns parsed response from IntegrationGoogleSheetsMutation
         */
        fetch(code) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationGoogleSheetsDocument, {
                    code,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationGoogleSheets;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationResourceArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationResourceArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationResourceArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to integrationResourceArchive
         * @returns parsed response from IntegrationResourceArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationResourceArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationResourceArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationSentryConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSentryConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSentryConnect mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSentryConnect
         * @param installationId - required installationId to pass to integrationSentryConnect
         * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
         * @returns parsed response from IntegrationSentryConnectMutation
         */
        fetch(code, installationId, organizationSlug) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationSentryConnectDocument, {
                    code,
                    installationId,
                    organizationSlug,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationSentryConnect;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationSlack Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlack mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlack
         * @param redirectUri - required redirectUri to pass to integrationSlack
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
         * @returns parsed response from IntegrationSlackMutation
         */
        fetch(code, redirectUri, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationSlackDocument, Object.assign({ code,
                    redirectUri }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationSlack;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationSlackImportEmojis Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackImportEmojisMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackImportEmojis mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackImportEmojis
         * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
         * @returns parsed response from IntegrationSlackImportEmojisMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationSlackImportEmojisDocument, {
                    code,
                    redirectUri,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationSlackImportEmojis;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationSlackPersonal Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackPersonalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackPersonal mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackPersonal
         * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
         * @returns parsed response from IntegrationSlackPersonalMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationSlackPersonalDocument, {
                    code,
                    redirectUri,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationSlackPersonal;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationSlackPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackPost mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackPost
         * @param redirectUri - required redirectUri to pass to integrationSlackPost
         * @param teamId - required teamId to pass to integrationSlackPost
         * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
         * @returns parsed response from IntegrationSlackPostMutation
         */
        fetch(code, redirectUri, teamId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationSlackPostDocument, Object.assign({ code,
                    redirectUri,
                    teamId }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationSlackPost;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationSlackProjectPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackProjectPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackProjectPost mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackProjectPost
         * @param projectId - required projectId to pass to integrationSlackProjectPost
         * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
         * @returns parsed response from IntegrationSlackProjectPostMutation
         */
        fetch(code, projectId, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationSlackProjectPostDocument, {
                    code,
                    projectId,
                    redirectUri,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationSlackProjectPost;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IntegrationZendesk Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationZendeskMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationZendesk mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationZendesk
         * @param redirectUri - required redirectUri to pass to integrationZendesk
         * @param scope - required scope to pass to integrationZendesk
         * @param subdomain - required subdomain to pass to integrationZendesk
         * @returns parsed response from IntegrationZendeskMutation
         */
        fetch(code, redirectUri, scope, subdomain) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IntegrationZendeskDocument, {
                    code,
                    redirectUri,
                    scope,
                    subdomain,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.integrationZendesk;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to issueArchive
         * @param variables - variables without 'id' to pass into the IssueArchiveMutation
         * @returns parsed response from IssueArchiveMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueArchiveDocument, Object.assign({ id }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueCreate mutation and return a IssuePayload
         *
         * @param input - required input to pass to issueCreate
         * @returns parsed response from IssueCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueCreate;
                    return data ? new IssuePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueImportCreateAsana Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateAsanaMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateAsana mutation and return a IssueImportPayload
         *
         * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
         * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
         * @param teamId - required teamId to pass to issueImportCreateAsana
         * @returns parsed response from IssueImportCreateAsanaMutation
         */
        fetch(asanaTeamName, asanaToken, teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueImportCreateAsanaDocument, {
                    asanaTeamName,
                    asanaToken,
                    teamId,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueImportCreateAsana;
                    return data ? new IssueImportPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueImportCreateClubhouse Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateClubhouseMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateClubhouse mutation and return a IssueImportPayload
         *
         * @param clubhouseTeamName - required clubhouseTeamName to pass to issueImportCreateClubhouse
         * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
         * @param teamId - required teamId to pass to issueImportCreateClubhouse
         * @returns parsed response from IssueImportCreateClubhouseMutation
         */
        fetch(clubhouseTeamName, clubhouseToken, teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueImportCreateClubhouseDocument, {
                    clubhouseTeamName,
                    clubhouseToken,
                    teamId,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueImportCreateClubhouse;
                    return data ? new IssueImportPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueImportCreateGithub Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateGithubMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateGithub mutation and return a IssueImportPayload
         *
         * @param githubRepoName - required githubRepoName to pass to issueImportCreateGithub
         * @param githubRepoOwner - required githubRepoOwner to pass to issueImportCreateGithub
         * @param githubToken - required githubToken to pass to issueImportCreateGithub
         * @param teamId - required teamId to pass to issueImportCreateGithub
         * @param variables - variables without 'githubRepoName', 'githubRepoOwner', 'githubToken', 'teamId' to pass into the IssueImportCreateGithubMutation
         * @returns parsed response from IssueImportCreateGithubMutation
         */
        fetch(githubRepoName, githubRepoOwner, githubToken, teamId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueImportCreateGithubDocument, Object.assign({ githubRepoName,
                    githubRepoOwner,
                    githubToken,
                    teamId }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueImportCreateGithub;
                    return data ? new IssueImportPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueImportCreateJira Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateJiraMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateJira mutation and return a IssueImportPayload
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
         * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
         * @param jiraProject - required jiraProject to pass to issueImportCreateJira
         * @param jiraToken - required jiraToken to pass to issueImportCreateJira
         * @param teamId - required teamId to pass to issueImportCreateJira
         * @returns parsed response from IssueImportCreateJiraMutation
         */
        fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, teamId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueImportCreateJiraDocument, {
                    jiraEmail,
                    jiraHostname,
                    jiraProject,
                    jiraToken,
                    teamId,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueImportCreateJira;
                    return data ? new IssueImportPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueImportDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportDelete mutation and return a IssueImportDeletePayload
         *
         * @param issueImportId - required issueImportId to pass to issueImportDelete
         * @returns parsed response from IssueImportDeleteMutation
         */
        fetch(issueImportId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueImportDeleteDocument, {
                    issueImportId,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueImportDelete;
                    return data ? new IssueImportDeletePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueLabelArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabelArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to issueLabelArchive
         * @returns parsed response from IssueLabelArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueLabelArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueLabelArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueLabelCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabelCreate mutation and return a IssueLabelPayload
         *
         * @param input - required input to pass to issueLabelCreate
         * @returns parsed response from IssueLabelCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueLabelCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueLabelCreate;
                    return data ? new IssueLabelPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueLabelUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabelUpdate mutation and return a IssueLabelPayload
         *
         * @param id - required id to pass to issueLabelUpdate
         * @param input - required input to pass to issueLabelUpdate
         * @returns parsed response from IssueLabelUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueLabelUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueLabelUpdate;
                    return data ? new IssueLabelPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueRelationCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelationCreate mutation and return a IssueRelationPayload
         *
         * @param input - required input to pass to issueRelationCreate
         * @returns parsed response from IssueRelationCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueRelationCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueRelationCreate;
                    return data ? new IssueRelationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueRelationDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelationDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to issueRelationDelete
         * @returns parsed response from IssueRelationDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueRelationDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueRelationDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueRelationUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelationUpdate mutation and return a IssueRelationPayload
         *
         * @param id - required id to pass to issueRelationUpdate
         * @param input - required input to pass to issueRelationUpdate
         * @returns parsed response from IssueRelationUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueRelationUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueRelationUpdate;
                    return data ? new IssueRelationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueUnarchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueUnarchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueUnarchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to issueUnarchive
         * @returns parsed response from IssueUnarchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueUnarchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueUnarchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueUpdate mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueUpdate
         * @param input - required input to pass to issueUpdate
         * @returns parsed response from IssueUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.issueUpdate;
                    return data ? new IssuePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable JoinOrganizationFromOnboarding Mutation
     *
     * @param request - function to call the graphql client
     */
    class JoinOrganizationFromOnboardingMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the JoinOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param input - required input to pass to joinOrganizationFromOnboarding
         * @returns parsed response from JoinOrganizationFromOnboardingMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(JoinOrganizationFromOnboardingDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.joinOrganizationFromOnboarding;
                    return data ? new CreateOrJoinOrganizationResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable LeaveOrganization Mutation
     *
     * @param request - function to call the graphql client
     */
    class LeaveOrganizationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LeaveOrganization mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param organizationId - required organizationId to pass to leaveOrganization
         * @returns parsed response from LeaveOrganizationMutation
         */
        fetch(organizationId) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(LeaveOrganizationDocument, {
                    organizationId,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.leaveOrganization;
                    return data ? new CreateOrJoinOrganizationResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable MilestoneCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class MilestoneCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the MilestoneCreate mutation and return a MilestonePayload
         *
         * @param input - required input to pass to milestoneCreate
         * @returns parsed response from MilestoneCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(MilestoneCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.milestoneCreate;
                    return data ? new MilestonePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable MilestoneDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class MilestoneDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the MilestoneDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to milestoneDelete
         * @returns parsed response from MilestoneDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(MilestoneDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.milestoneDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable MilestoneUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class MilestoneUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the MilestoneUpdate mutation and return a MilestonePayload
         *
         * @param id - required id to pass to milestoneUpdate
         * @param input - required input to pass to milestoneUpdate
         * @returns parsed response from MilestoneUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(MilestoneUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.milestoneUpdate;
                    return data ? new MilestonePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to notificationArchive
         * @returns parsed response from NotificationArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationCreate mutation and return a NotificationPayload
         *
         * @param id - required id to pass to notificationCreate
         * @param input - required input to pass to notificationCreate
         * @returns parsed response from NotificationCreateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationCreateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationCreate;
                    return data ? new NotificationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to notificationDelete
         * @returns parsed response from NotificationDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationSubscriptionCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscriptionCreate mutation and return a NotificationSubscriptionPayload
         *
         * @param input - required input to pass to notificationSubscriptionCreate
         * @returns parsed response from NotificationSubscriptionCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationSubscriptionCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationSubscriptionCreate;
                    return data ? new NotificationSubscriptionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationSubscriptionDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscriptionDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to notificationSubscriptionDelete
         * @returns parsed response from NotificationSubscriptionDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationSubscriptionDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationSubscriptionDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationUnarchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationUnarchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationUnarchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to notificationUnarchive
         * @returns parsed response from NotificationUnarchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationUnarchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationUnarchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable NotificationUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationUpdate mutation and return a NotificationPayload
         *
         * @param id - required id to pass to notificationUpdate
         * @param input - required input to pass to notificationUpdate
         * @returns parsed response from NotificationUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(NotificationUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.notificationUpdate;
                    return data ? new NotificationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OauthClientArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class OauthClientArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OauthClientArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to oauthClientArchive
         * @returns parsed response from OauthClientArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OauthClientArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.oauthClientArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OauthClientCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class OauthClientCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OauthClientCreate mutation and return a OauthClientPayload
         *
         * @param input - required input to pass to oauthClientCreate
         * @returns parsed response from OauthClientCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OauthClientCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.oauthClientCreate;
                    return data ? new OauthClientPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OauthClientRotateSecret Mutation
     *
     * @param request - function to call the graphql client
     */
    class OauthClientRotateSecretMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OauthClientRotateSecret mutation and return a RotateSecretPayload
         *
         * @param id - required id to pass to oauthClientRotateSecret
         * @returns parsed response from OauthClientRotateSecretMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OauthClientRotateSecretDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.oauthClientRotateSecret;
                    return data ? new RotateSecretPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OauthClientUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class OauthClientUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OauthClientUpdate mutation and return a OauthClientPayload
         *
         * @param id - required id to pass to oauthClientUpdate
         * @param input - required input to pass to oauthClientUpdate
         * @returns parsed response from OauthClientUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OauthClientUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.oauthClientUpdate;
                    return data ? new OauthClientPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OauthTokenRevoke Mutation
     *
     * @param request - function to call the graphql client
     */
    class OauthTokenRevokeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OauthTokenRevoke mutation and return a OauthTokenRevokePayload
         *
         * @param appId - required appId to pass to oauthTokenRevoke
         * @param scope - required scope to pass to oauthTokenRevoke
         * @returns parsed response from OauthTokenRevokeMutation
         */
        fetch(appId, scope) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OauthTokenRevokeDocument, {
                    appId,
                    scope,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.oauthTokenRevoke;
                    return data ? new OauthTokenRevokePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationDelete mutation and return a OrganizationDeletePayload
         *
         * @param input - required input to pass to organizationDelete
         * @returns parsed response from OrganizationDeleteMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationDeleteDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationDelete;
                    return data ? new OrganizationDeletePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationDeleteChallenge Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationDeleteChallengeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationDeleteChallenge mutation and return a OrganizationDeletePayload
         *
         * @returns parsed response from OrganizationDeleteChallengeMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationDeleteChallengeDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationDeleteChallenge;
                    return data ? new OrganizationDeletePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationDomainCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationDomainCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationDomainCreate mutation and return a OrganizationDomainPayload
         *
         * @param input - required input to pass to organizationDomainCreate
         * @returns parsed response from OrganizationDomainCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationDomainCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationDomainCreate;
                    return data ? new OrganizationDomainPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationDomainDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationDomainDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationDomainDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to organizationDomainDelete
         * @returns parsed response from OrganizationDomainDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationDomainDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationDomainDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationDomainVerify Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationDomainVerifyMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationDomainVerify mutation and return a OrganizationDomainPayload
         *
         * @param input - required input to pass to organizationDomainVerify
         * @returns parsed response from OrganizationDomainVerifyMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationDomainVerifyDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationDomainVerify;
                    return data ? new OrganizationDomainPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationInviteCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInviteCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInviteCreate mutation and return a OrganizationInvitePayload
         *
         * @param input - required input to pass to organizationInviteCreate
         * @returns parsed response from OrganizationInviteCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationInviteCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationInviteCreate;
                    return data ? new OrganizationInvitePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationInviteDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInviteDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInviteDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to organizationInviteDelete
         * @returns parsed response from OrganizationInviteDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationInviteDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationInviteDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationUpdate mutation and return a OrganizationPayload
         *
         * @param input - required input to pass to organizationUpdate
         * @returns parsed response from OrganizationUpdateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationUpdateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.organizationUpdate;
                    return data ? new OrganizationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ProjectArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to projectArchive
         * @returns parsed response from ProjectArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projectArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ProjectCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectCreate mutation and return a ProjectPayload
         *
         * @param input - required input to pass to projectCreate
         * @returns parsed response from ProjectCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projectCreate;
                    return data ? new ProjectPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ProjectLinkCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectLinkCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLinkCreate mutation and return a ProjectLinkPayload
         *
         * @param input - required input to pass to projectLinkCreate
         * @returns parsed response from ProjectLinkCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectLinkCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projectLinkCreate;
                    return data ? new ProjectLinkPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ProjectLinkDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectLinkDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLinkDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to projectLinkDelete
         * @returns parsed response from ProjectLinkDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectLinkDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projectLinkDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdate mutation and return a ProjectPayload
         *
         * @param id - required id to pass to projectUpdate
         * @param input - required input to pass to projectUpdate
         * @returns parsed response from ProjectUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ProjectUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.projectUpdate;
                    return data ? new ProjectPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable PushSubscriptionCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class PushSubscriptionCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the PushSubscriptionCreate mutation and return a PushSubscriptionPayload
         *
         * @param input - required input to pass to pushSubscriptionCreate
         * @returns parsed response from PushSubscriptionCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(PushSubscriptionCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.pushSubscriptionCreate;
                    return data ? new PushSubscriptionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable PushSubscriptionDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class PushSubscriptionDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the PushSubscriptionDelete mutation and return a PushSubscriptionPayload
         *
         * @param id - required id to pass to pushSubscriptionDelete
         * @returns parsed response from PushSubscriptionDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(PushSubscriptionDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.pushSubscriptionDelete;
                    return data ? new PushSubscriptionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ReactionCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ReactionCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ReactionCreate mutation and return a ReactionPayload
         *
         * @param input - required input to pass to reactionCreate
         * @returns parsed response from ReactionCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ReactionCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.reactionCreate;
                    return data ? new ReactionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ReactionDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class ReactionDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ReactionDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to reactionDelete
         * @returns parsed response from ReactionDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ReactionDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.reactionDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable RefreshGoogleSheetsData Mutation
     *
     * @param request - function to call the graphql client
     */
    class RefreshGoogleSheetsDataMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RefreshGoogleSheetsData mutation and return a IntegrationPayload
         *
         * @param id - required id to pass to refreshGoogleSheetsData
         * @returns parsed response from RefreshGoogleSheetsDataMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(RefreshGoogleSheetsDataDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.refreshGoogleSheetsData;
                    return data ? new IntegrationPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ResentOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class ResentOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ResentOrganizationInvite mutation and return a ArchivePayload
         *
         * @param id - required id to pass to resentOrganizationInvite
         * @returns parsed response from ResentOrganizationInviteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ResentOrganizationInviteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.resentOrganizationInvite;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SamlTokenUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class SamlTokenUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SamlTokenUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to samlTokenUserAccountAuth
         * @returns parsed response from SamlTokenUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SamlTokenUserAccountAuthDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.samlTokenUserAccountAuth;
                    return data ? new AuthResolverResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SubscriptionArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class SubscriptionArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SubscriptionArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to subscriptionArchive
         * @returns parsed response from SubscriptionArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SubscriptionArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.subscriptionArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SubscriptionSessionCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class SubscriptionSessionCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SubscriptionSessionCreate mutation and return a SubscriptionSessionPayload
         *
         * @param plan - required plan to pass to subscriptionSessionCreate
         * @returns parsed response from SubscriptionSessionCreateMutation
         */
        fetch(plan) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SubscriptionSessionCreateDocument, {
                    plan,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.subscriptionSessionCreate;
                    return data ? new SubscriptionSessionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SubscriptionUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class SubscriptionUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SubscriptionUpdate mutation and return a SubscriptionPayload
         *
         * @param id - required id to pass to subscriptionUpdate
         * @param input - required input to pass to subscriptionUpdate
         * @returns parsed response from SubscriptionUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SubscriptionUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.subscriptionUpdate;
                    return data ? new SubscriptionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SubscriptionUpdateSessionCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class SubscriptionUpdateSessionCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SubscriptionUpdateSessionCreate mutation and return a SubscriptionSessionPayload
         *
         * @returns parsed response from SubscriptionUpdateSessionCreateMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SubscriptionUpdateSessionCreateDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.subscriptionUpdateSessionCreate;
                    return data ? new SubscriptionSessionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable SubscriptionUpgrade Mutation
     *
     * @param request - function to call the graphql client
     */
    class SubscriptionUpgradeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SubscriptionUpgrade mutation and return a SubscriptionPayload
         *
         * @param id - required id to pass to subscriptionUpgrade
         * @param type - required type to pass to subscriptionUpgrade
         * @returns parsed response from SubscriptionUpgradeMutation
         */
        fetch(id, type) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(SubscriptionUpgradeDocument, {
                    id,
                    type,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.subscriptionUpgrade;
                    return data ? new SubscriptionPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class TeamArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to teamArchive
         * @returns parsed response from TeamArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class TeamCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamCreate mutation and return a TeamPayload
         *
         * @param input - required input to pass to teamCreate
         * @param variables - variables without 'input' to pass into the TeamCreateMutation
         * @returns parsed response from TeamCreateMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamCreateDocument, Object.assign({ input }, variables)).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamCreate;
                    return data ? new TeamPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class TeamDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to teamDelete
         * @returns parsed response from TeamDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamMembershipCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMembershipCreate mutation and return a TeamMembershipPayload
         *
         * @param input - required input to pass to teamMembershipCreate
         * @returns parsed response from TeamMembershipCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamMembershipCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamMembershipCreate;
                    return data ? new TeamMembershipPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamMembershipDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMembershipDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to teamMembershipDelete
         * @returns parsed response from TeamMembershipDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamMembershipDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamMembershipDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamMembershipUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMembershipUpdate mutation and return a TeamMembershipPayload
         *
         * @param id - required id to pass to teamMembershipUpdate
         * @param input - required input to pass to teamMembershipUpdate
         * @returns parsed response from TeamMembershipUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamMembershipUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamMembershipUpdate;
                    return data ? new TeamMembershipPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TeamUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class TeamUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamUpdate mutation and return a TeamPayload
         *
         * @param id - required id to pass to teamUpdate
         * @param input - required input to pass to teamUpdate
         * @returns parsed response from TeamUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TeamUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.teamUpdate;
                    return data ? new TeamPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TemplateCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class TemplateCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TemplateCreate mutation and return a TemplatePayload
         *
         * @param input - required input to pass to templateCreate
         * @returns parsed response from TemplateCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TemplateCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.templateCreate;
                    return data ? new TemplatePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TemplateDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class TemplateDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TemplateDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to templateDelete
         * @returns parsed response from TemplateDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TemplateDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.templateDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable TemplateUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class TemplateUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TemplateUpdate mutation and return a TemplatePayload
         *
         * @param id - required id to pass to templateUpdate
         * @param input - required input to pass to templateUpdate
         * @returns parsed response from TemplateUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(TemplateUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.templateUpdate;
                    return data ? new TemplatePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserDemoteAdmin Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserDemoteAdminMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserDemoteAdmin mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userDemoteAdmin
         * @returns parsed response from UserDemoteAdminMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserDemoteAdminDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userDemoteAdmin;
                    return data ? new UserAdminPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserFlagUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserFlagUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserFlagUpdate mutation and return a UserSettingsFlagPayload
         *
         * @param flag - required flag to pass to userFlagUpdate
         * @param operation - required operation to pass to userFlagUpdate
         * @returns parsed response from UserFlagUpdateMutation
         */
        fetch(flag, operation) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserFlagUpdateDocument, {
                    flag,
                    operation,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userFlagUpdate;
                    return data ? new UserSettingsFlagPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserPromoteAdmin Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserPromoteAdminMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserPromoteAdmin mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userPromoteAdmin
         * @returns parsed response from UserPromoteAdminMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserPromoteAdminDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userPromoteAdmin;
                    return data ? new UserAdminPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserSettingsFlagIncrement Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsFlagIncrementMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettingsFlagIncrement mutation and return a UserSettingsFlagPayload
         *
         * @param flag - required flag to pass to userSettingsFlagIncrement
         * @returns parsed response from UserSettingsFlagIncrementMutation
         */
        fetch(flag) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserSettingsFlagIncrementDocument, {
                    flag,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userSettingsFlagIncrement;
                    return data ? new UserSettingsFlagPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserSettingsFlagsReset Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsFlagsResetMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettingsFlagsReset mutation and return a UserSettingsFlagsResetPayload
         *
         * @returns parsed response from UserSettingsFlagsResetMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserSettingsFlagsResetDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userSettingsFlagsReset;
                    return data ? new UserSettingsFlagsResetPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserSettingsUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettingsUpdate mutation and return a UserSettingsPayload
         *
         * @param id - required id to pass to userSettingsUpdate
         * @param input - required input to pass to userSettingsUpdate
         * @returns parsed response from UserSettingsUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserSettingsUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userSettingsUpdate;
                    return data ? new UserSettingsPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserSubscribeToNewsletter Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserSubscribeToNewsletterMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSubscribeToNewsletter mutation and return a UserSubscribeToNewsletterPayload
         *
         * @returns parsed response from UserSubscribeToNewsletterMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserSubscribeToNewsletterDocument, {}).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userSubscribeToNewsletter;
                    return data ? new UserSubscribeToNewsletterPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserSuspend Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserSuspendMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSuspend mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userSuspend
         * @returns parsed response from UserSuspendMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserSuspendDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userSuspend;
                    return data ? new UserAdminPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserUnsuspend Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserUnsuspendMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserUnsuspend mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userUnsuspend
         * @returns parsed response from UserUnsuspendMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserUnsuspendDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userUnsuspend;
                    return data ? new UserAdminPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable UserUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserUpdate mutation and return a UserPayload
         *
         * @param id - required id to pass to userUpdate
         * @param input - required input to pass to userUpdate
         * @returns parsed response from UserUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(UserUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.userUpdate;
                    return data ? new UserPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ViewPreferencesCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ViewPreferencesCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ViewPreferencesCreate mutation and return a ViewPreferencesPayload
         *
         * @param input - required input to pass to viewPreferencesCreate
         * @returns parsed response from ViewPreferencesCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ViewPreferencesCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.viewPreferencesCreate;
                    return data ? new ViewPreferencesPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ViewPreferencesDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class ViewPreferencesDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ViewPreferencesDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to viewPreferencesDelete
         * @returns parsed response from ViewPreferencesDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ViewPreferencesDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.viewPreferencesDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable ViewPreferencesUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ViewPreferencesUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ViewPreferencesUpdate mutation and return a ViewPreferencesPayload
         *
         * @param id - required id to pass to viewPreferencesUpdate
         * @param input - required input to pass to viewPreferencesUpdate
         * @returns parsed response from ViewPreferencesUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(ViewPreferencesUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.viewPreferencesUpdate;
                    return data ? new ViewPreferencesPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WebhookCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class WebhookCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WebhookCreate mutation and return a WebhookPayload
         *
         * @param input - required input to pass to webhookCreate
         * @returns parsed response from WebhookCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WebhookCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.webhookCreate;
                    return data ? new WebhookPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WebhookDelete Mutation
     *
     * @param request - function to call the graphql client
     */
    class WebhookDeleteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WebhookDelete mutation and return a ArchivePayload
         *
         * @param id - required id to pass to webhookDelete
         * @returns parsed response from WebhookDeleteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WebhookDeleteDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.webhookDelete;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WebhookUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class WebhookUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WebhookUpdate mutation and return a WebhookPayload
         *
         * @param id - required id to pass to webhookUpdate
         * @param input - required input to pass to webhookUpdate
         * @returns parsed response from WebhookUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WebhookUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.webhookUpdate;
                    return data ? new WebhookPayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WorkflowStateArchive Mutation
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStateArchiveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowStateArchive mutation and return a ArchivePayload
         *
         * @param id - required id to pass to workflowStateArchive
         * @returns parsed response from WorkflowStateArchiveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WorkflowStateArchiveDocument, {
                    id,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.workflowStateArchive;
                    return data ? new ArchivePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WorkflowStateCreate Mutation
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStateCreateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowStateCreate mutation and return a WorkflowStatePayload
         *
         * @param input - required input to pass to workflowStateCreate
         * @returns parsed response from WorkflowStateCreateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WorkflowStateCreateDocument, {
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.workflowStateCreate;
                    return data ? new WorkflowStatePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WorkflowStateUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStateUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowStateUpdate mutation and return a WorkflowStatePayload
         *
         * @param id - required id to pass to workflowStateUpdate
         * @param input - required input to pass to workflowStateUpdate
         * @returns parsed response from WorkflowStateUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WorkflowStateUpdateDocument, {
                    id,
                    input,
                }).then(response => {
                    const data = response === null || response === void 0 ? void 0 : response.workflowStateUpdate;
                    return data ? new WorkflowStatePayload(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
     */
    class AttachmentIssue_AttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
         * @returns parsed response from AttachmentIssue_AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.attachments;
                    return data
                        ? new AttachmentConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
     */
    class AttachmentIssue_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Children query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
         * @returns parsed response from AttachmentIssue_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.children;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
     */
    class AttachmentIssue_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
         * @returns parsed response from AttachmentIssue_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.comments;
                    return data
                        ? new CommentConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
     */
    class AttachmentIssue_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
         * @returns parsed response from AttachmentIssue_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.history;
                    return data
                        ? new IssueHistoryConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
     */
    class AttachmentIssue_InverseRelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
         * @returns parsed response from AttachmentIssue_InverseRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.inverseRelations;
                    return data
                        ? new IssueRelationConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
     */
    class AttachmentIssue_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
         * @returns parsed response from AttachmentIssue_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.labels;
                    return data
                        ? new IssueLabelConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Relations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
     */
    class AttachmentIssue_RelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
         * @returns parsed response from AttachmentIssue_RelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.relations;
                    return data
                        ? new IssueRelationConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
     */
    class AttachmentIssue_SubscribersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
         * @returns parsed response from AttachmentIssue_SubscribersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(AttachmentIssue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.attachmentIssue) === null || _a === void 0 ? void 0 : _a.subscribers;
                    return data
                        ? new UserConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable BillingDetails_PaymentMethod Query
     *
     * @param request - function to call the graphql client
     */
    class BillingDetails_PaymentMethodQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the BillingDetails_PaymentMethod query and return a Card
         *
         * @returns parsed response from BillingDetails_PaymentMethodQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(BillingDetails_PaymentMethodDocument, {}).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.billingDetails) === null || _a === void 0 ? void 0 : _a.paymentMethod;
                    return data ? new Card(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable CollaborativeDocumentJoin_Steps Query
     *
     * @param request - function to call the graphql client
     * @param clientId - required clientId to pass to collaborativeDocumentJoin
     * @param issueId - required issueId to pass to collaborativeDocumentJoin
     * @param version - required version to pass to collaborativeDocumentJoin
     */
    class CollaborativeDocumentJoin_StepsQuery extends Request {
        constructor(request, clientId, issueId, version) {
            super(request);
            this._clientId = clientId;
            this._issueId = issueId;
            this._version = version;
        }
        /**
         * Call the CollaborativeDocumentJoin_Steps query and return a StepsResponse
         *
         * @returns parsed response from CollaborativeDocumentJoin_StepsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(CollaborativeDocumentJoin_StepsDocument, {
                    clientId: this._clientId,
                    issueId: this._issueId,
                    version: this._version,
                }).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.collaborativeDocumentJoin) === null || _a === void 0 ? void 0 : _a.steps;
                    return data ? new StepsResponse(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Cycle_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to cycle
     * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
     */
    class Cycle_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Cycle_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
         * @returns parsed response from Cycle_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Cycle_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.cycle) === null || _a === void 0 ? void 0 : _a.issues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Cycle_UncompletedIssuesUponClose Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to cycle
     * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
     */
    class Cycle_UncompletedIssuesUponCloseQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Cycle_UncompletedIssuesUponClose query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
         * @returns parsed response from Cycle_UncompletedIssuesUponCloseQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Cycle_UncompletedIssuesUponCloseDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.cycle) === null || _a === void 0 ? void 0 : _a.uncompletedIssuesUponClose;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable FigmaEmbedInfo_FigmaEmbed Query
     *
     * @param request - function to call the graphql client
     * @param fileId - required fileId to pass to figmaEmbedInfo
     * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfo_FigmaEmbedQuery
     */
    class FigmaEmbedInfo_FigmaEmbedQuery extends Request {
        constructor(request, fileId, variables) {
            super(request);
            this._fileId = fileId;
            this._variables = variables;
        }
        /**
         * Call the FigmaEmbedInfo_FigmaEmbed query and return a FigmaEmbed
         *
         * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfo_FigmaEmbedQuery
         * @returns parsed response from FigmaEmbedInfo_FigmaEmbedQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(FigmaEmbedInfo_FigmaEmbedDocument, Object.assign(Object.assign({ fileId: this._fileId }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.figmaEmbedInfo) === null || _a === void 0 ? void 0 : _a.figmaEmbed;
                    return data ? new FigmaEmbed(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable InviteInfo_InviteData Query
     *
     * @param request - function to call the graphql client
     * @param userHash - required userHash to pass to inviteInfo
     * @param variables - variables without 'userHash' to pass into the InviteInfo_InviteDataQuery
     */
    class InviteInfo_InviteDataQuery extends Request {
        constructor(request, userHash, variables) {
            super(request);
            this._userHash = userHash;
            this._variables = variables;
        }
        /**
         * Call the InviteInfo_InviteData query and return a InviteData
         *
         * @param variables - variables without 'userHash' to pass into the InviteInfo_InviteDataQuery
         * @returns parsed response from InviteInfo_InviteDataQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(InviteInfo_InviteDataDocument, Object.assign(Object.assign({ userHash: this._userHash }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.inviteInfo) === null || _a === void 0 ? void 0 : _a.inviteData;
                    return data ? new InviteData(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
     */
    class Issue_AttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
         * @returns parsed response from Issue_AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.attachments;
                    return data
                        ? new AttachmentConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
     */
    class Issue_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Children query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
         * @returns parsed response from Issue_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.children;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
     */
    class Issue_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
         * @returns parsed response from Issue_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.comments;
                    return data
                        ? new CommentConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
     */
    class Issue_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
         * @returns parsed response from Issue_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.history;
                    return data
                        ? new IssueHistoryConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
     */
    class Issue_InverseRelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
         * @returns parsed response from Issue_InverseRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.inverseRelations;
                    return data
                        ? new IssueRelationConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
     */
    class Issue_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
         * @returns parsed response from Issue_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.labels;
                    return data
                        ? new IssueLabelConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_Relations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
     */
    class Issue_RelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
         * @returns parsed response from Issue_RelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.relations;
                    return data
                        ? new IssueRelationConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Issue_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
     */
    class Issue_SubscribersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
         * @returns parsed response from Issue_SubscribersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Issue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issue) === null || _a === void 0 ? void 0 : _a.subscribers;
                    return data
                        ? new UserConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable IssueLabel_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issueLabel
     * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
     */
    class IssueLabel_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the IssueLabel_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
         * @returns parsed response from IssueLabel_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(IssueLabel_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.issueLabel) === null || _a === void 0 ? void 0 : _a.issues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Milestone_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to milestone
     * @param variables - variables without 'id' to pass into the Milestone_ProjectsQuery
     */
    class Milestone_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Milestone_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Milestone_ProjectsQuery
         * @returns parsed response from Milestone_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Milestone_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.milestone) === null || _a === void 0 ? void 0 : _a.projects;
                    return data
                        ? new ProjectConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Organization_Integrations Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_IntegrationsQuery
     */
    class Organization_IntegrationsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Integrations query and return a IntegrationConnection
         *
         * @param variables - variables to pass into the Organization_IntegrationsQuery
         * @returns parsed response from Organization_IntegrationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Organization_IntegrationsDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.organization) === null || _a === void 0 ? void 0 : _a.integrations;
                    return data
                        ? new IntegrationConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Organization_Milestones Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_MilestonesQuery
     */
    class Organization_MilestonesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Milestones query and return a MilestoneConnection
         *
         * @param variables - variables to pass into the Organization_MilestonesQuery
         * @returns parsed response from Organization_MilestonesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Organization_MilestonesDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.organization) === null || _a === void 0 ? void 0 : _a.milestones;
                    return data
                        ? new MilestoneConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Organization_Teams Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_TeamsQuery
     */
    class Organization_TeamsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the Organization_TeamsQuery
         * @returns parsed response from Organization_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Organization_TeamsDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.organization) === null || _a === void 0 ? void 0 : _a.teams;
                    return data
                        ? new TeamConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Organization_Users Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_UsersQuery
     */
    class Organization_UsersQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Users query and return a UserConnection
         *
         * @param variables - variables to pass into the Organization_UsersQuery
         * @returns parsed response from Organization_UsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Organization_UsersDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.organization) === null || _a === void 0 ? void 0 : _a.users;
                    return data
                        ? new UserConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable OrganizationInvite_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to organizationInvite
     * @param variables - variables without 'id' to pass into the OrganizationInvite_IssuesQuery
     */
    class OrganizationInvite_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the OrganizationInvite_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the OrganizationInvite_IssuesQuery
         * @returns parsed response from OrganizationInvite_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(OrganizationInvite_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.organizationInvite) === null || _a === void 0 ? void 0 : _a.issues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Project_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_IssuesQuery
     */
    class Project_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Project_IssuesQuery
         * @returns parsed response from Project_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Project_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.project) === null || _a === void 0 ? void 0 : _a.issues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Project_Links Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_LinksQuery
     */
    class Project_LinksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Links query and return a ProjectLinkConnection
         *
         * @param variables - variables without 'id' to pass into the Project_LinksQuery
         * @returns parsed response from Project_LinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Project_LinksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.project) === null || _a === void 0 ? void 0 : _a.links;
                    return data
                        ? new ProjectLinkConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Project_Members Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_MembersQuery
     */
    class Project_MembersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Members query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Project_MembersQuery
         * @returns parsed response from Project_MembersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Project_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.project) === null || _a === void 0 ? void 0 : _a.members;
                    return data
                        ? new UserConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Project_Teams Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_TeamsQuery
     */
    class Project_TeamsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Teams query and return a TeamConnection
         *
         * @param variables - variables without 'id' to pass into the Project_TeamsQuery
         * @returns parsed response from Project_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Project_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.project) === null || _a === void 0 ? void 0 : _a.teams;
                    return data
                        ? new TeamConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Cycles Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_CyclesQuery
     */
    class Team_CyclesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Cycles query and return a CycleConnection
         *
         * @param variables - variables without 'id' to pass into the Team_CyclesQuery
         * @returns parsed response from Team_CyclesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_CyclesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.cycles;
                    return data
                        ? new CycleConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_IssuesQuery
     */
    class Team_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Team_IssuesQuery
         * @returns parsed response from Team_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.issues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_LabelsQuery
     */
    class Team_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the Team_LabelsQuery
         * @returns parsed response from Team_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.labels;
                    return data
                        ? new IssueLabelConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Members Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_MembersQuery
     */
    class Team_MembersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Members query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Team_MembersQuery
         * @returns parsed response from Team_MembersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.members;
                    return data
                        ? new UserConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Memberships Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
     */
    class Team_MembershipsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Memberships query and return a TeamMembershipConnection
         *
         * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
         * @returns parsed response from Team_MembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_MembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.memberships;
                    return data
                        ? new TeamMembershipConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
     */
    class Team_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
         * @returns parsed response from Team_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.projects;
                    return data
                        ? new ProjectConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_States Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_StatesQuery
     */
    class Team_StatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_States query and return a WorkflowStateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_StatesQuery
         * @returns parsed response from Team_StatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_StatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.states;
                    return data
                        ? new WorkflowStateConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Templates Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
     */
    class Team_TemplatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Templates query and return a TemplateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
         * @returns parsed response from Team_TemplatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_TemplatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.templates;
                    return data ? new TemplateConnection(this._request, data) : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Team_Webhooks Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
     */
    class Team_WebhooksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Webhooks query and return a WebhookConnection
         *
         * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
         * @returns parsed response from Team_WebhooksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Team_WebhooksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.team) === null || _a === void 0 ? void 0 : _a.webhooks;
                    return data
                        ? new WebhookConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable User_AssignedIssues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
     */
    class User_AssignedIssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_AssignedIssues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
         * @returns parsed response from User_AssignedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(User_AssignedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.user) === null || _a === void 0 ? void 0 : _a.assignedIssues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable User_CreatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
     */
    class User_CreatedIssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_CreatedIssues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
         * @returns parsed response from User_CreatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(User_CreatedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.user) === null || _a === void 0 ? void 0 : _a.createdIssues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable User_TeamMemberships Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
     */
    class User_TeamMembershipsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
         * @returns parsed response from User_TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(User_TeamMembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.user) === null || _a === void 0 ? void 0 : _a.teamMemberships;
                    return data
                        ? new TeamMembershipConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable User_Teams Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_TeamsQuery
     */
    class User_TeamsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_Teams query and return a TeamConnection
         *
         * @param variables - variables without 'id' to pass into the User_TeamsQuery
         * @returns parsed response from User_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(User_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.user) === null || _a === void 0 ? void 0 : _a.teams;
                    return data
                        ? new TeamConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Viewer_AssignedIssues Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
     */
    class Viewer_AssignedIssuesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_AssignedIssues query and return a IssueConnection
         *
         * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
         * @returns parsed response from Viewer_AssignedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Viewer_AssignedIssuesDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.viewer) === null || _a === void 0 ? void 0 : _a.assignedIssues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Viewer_CreatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
     */
    class Viewer_CreatedIssuesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_CreatedIssues query and return a IssueConnection
         *
         * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
         * @returns parsed response from Viewer_CreatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Viewer_CreatedIssuesDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.viewer) === null || _a === void 0 ? void 0 : _a.createdIssues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Viewer_TeamMemberships Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
     */
    class Viewer_TeamMembershipsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
         * @returns parsed response from Viewer_TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Viewer_TeamMembershipsDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.viewer) === null || _a === void 0 ? void 0 : _a.teamMemberships;
                    return data
                        ? new TeamMembershipConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable Viewer_Teams Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_TeamsQuery
     */
    class Viewer_TeamsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the Viewer_TeamsQuery
         * @returns parsed response from Viewer_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(Viewer_TeamsDocument, variables).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.viewer) === null || _a === void 0 ? void 0 : _a.teams;
                    return data
                        ? new TeamConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * A fetchable WorkflowState_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to workflowState
     * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
     */
    class WorkflowState_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the WorkflowState_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
         * @returns parsed response from WorkflowState_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                return this._request(WorkflowState_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables)).then(response => {
                    var _a;
                    const data = (_a = response === null || response === void 0 ? void 0 : response.workflowState) === null || _a === void 0 ? void 0 : _a.issues;
                    return data
                        ? new IssueConnection(this._request, connection => this.fetch(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection)), data)
                        : undefined;
                });
            });
        }
    }
    /**
     * The SDK class containing all root operations
     *
     * @param request - function to call the graphql client
     */
    class LinearSdk extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * All API keys for the user.
         *
         * @param variables - variables to pass into the ApiKeysQuery
         * @returns ApiKeyConnection
         */
        apiKeys(variables) {
            return new ApiKeysQuery(this._request).fetch(variables);
        }
        /**
         * Get information for an application and whether a user has approved it for the given scopes.
         *
         * @param clientId - required clientId to pass to applicationWithAuthorization
         * @param scope - required scope to pass to applicationWithAuthorization
         * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
         * @returns UserAuthorizedApplication
         */
        applicationWithAuthorization(clientId, scope, variables) {
            return new ApplicationWithAuthorizationQuery(this._request).fetch(clientId, scope, variables);
        }
        /**
         * Fetches an archived model.
         *
         * @param identifier - required identifier to pass to archivedModelSync
         * @param modelClass - required modelClass to pass to archivedModelSync
         * @returns ArchiveResponse
         */
        archivedModelSync(identifier, modelClass) {
            return new ArchivedModelSyncQuery(this._request).fetch(identifier, modelClass);
        }
        /**
         * Fetches archived models.
         *
         * @param modelClass - required modelClass to pass to archivedModelsSync
         * @param teamId - required teamId to pass to archivedModelsSync
         * @param variables - variables without 'modelClass', 'teamId' to pass into the ArchivedModelsSyncQuery
         * @returns ArchiveResponse
         */
        archivedModelsSync(modelClass, teamId, variables) {
            return new ArchivedModelsSyncQuery(this._request).fetch(modelClass, teamId, variables);
        }
        /**
         * [Alpha] One specific issue attachment. `url` can be used as the `id` parameter.
         *
         * @param id - required id to pass to attachment
         * @returns Attachment
         */
        attachment(id) {
            return new AttachmentQuery(this._request).fetch(id);
        }
        /**
         * [Alpha] Query an issue by its associated attachment, and its id or URI.
         *
         * @param id - required id to pass to attachmentIssue
         * @returns Issue
         */
        attachmentIssue(id) {
            return new AttachmentIssueQuery(this._request).fetch(id);
        }
        /**
         * [Alpha] All issue attachments.
         *
         * @param variables - variables to pass into the AttachmentsQuery
         * @returns AttachmentConnection
         */
        attachments(variables) {
            return new AttachmentsQuery(this._request).fetch(variables);
        }
        /**
         * Get all authorized applications for a user
         *
         * @returns AuthorizedApplication[]
         */
        get authorizedApplications() {
            return new AuthorizedApplicationsQuery(this._request).fetch();
        }
        /**
         * Fetch users belonging to this user account.
         *
         * @returns AuthResolverResponse
         */
        get availableUsers() {
            return new AvailableUsersQuery(this._request).fetch();
        }
        /**
         * Billing details for the customer.
         *
         * @returns BillingDetailsPayload
         */
        get billingDetails() {
            return new BillingDetailsQuery(this._request).fetch();
        }
        /**
         * Join collaborative document and get missing steps.
         *
         * @param clientId - required clientId to pass to collaborativeDocumentJoin
         * @param issueId - required issueId to pass to collaborativeDocumentJoin
         * @param version - required version to pass to collaborativeDocumentJoin
         * @returns CollaborationDocumentUpdatePayload
         */
        collaborativeDocumentJoin(clientId, issueId, version) {
            return new CollaborativeDocumentJoinQuery(this._request).fetch(clientId, issueId, version);
        }
        /**
         * A specific comment.
         *
         * @param id - required id to pass to comment
         * @returns Comment
         */
        comment(id) {
            return new CommentQuery(this._request).fetch(id);
        }
        /**
         * All comments.
         *
         * @param variables - variables to pass into the CommentsQuery
         * @returns CommentConnection
         */
        comments(variables) {
            return new CommentsQuery(this._request).fetch(variables);
        }
        /**
         * One specific custom view.
         *
         * @param id - required id to pass to customView
         * @returns CustomView
         */
        customView(id) {
            return new CustomViewQuery(this._request).fetch(id);
        }
        /**
         * Custom views for the user.
         *
         * @param variables - variables to pass into the CustomViewsQuery
         * @returns CustomViewConnection
         */
        customViews(variables) {
            return new CustomViewsQuery(this._request).fetch(variables);
        }
        /**
         * One specific cycle.
         *
         * @param id - required id to pass to cycle
         * @returns Cycle
         */
        cycle(id) {
            return new CycleQuery(this._request).fetch(id);
        }
        /**
         * All cycles.
         *
         * @param variables - variables to pass into the CyclesQuery
         * @returns CycleConnection
         */
        cycles(variables) {
            return new CyclesQuery(this._request).fetch(variables);
        }
        /**
         * A specific emoji.
         *
         * @param id - required id to pass to emoji
         * @returns Emoji
         */
        emoji(id) {
            return new EmojiQuery(this._request).fetch(id);
        }
        /**
         * All custom emojis.
         *
         * @param variables - variables to pass into the EmojisQuery
         * @returns EmojiConnection
         */
        emojis(variables) {
            return new EmojisQuery(this._request).fetch(variables);
        }
        /**
         * One specific favorite.
         *
         * @param id - required id to pass to favorite
         * @returns Favorite
         */
        favorite(id) {
            return new FavoriteQuery(this._request).fetch(id);
        }
        /**
         * The user's favorites.
         *
         * @param variables - variables to pass into the FavoritesQuery
         * @returns FavoriteConnection
         */
        favorites(variables) {
            return new FavoritesQuery(this._request).fetch(variables);
        }
        /**
         * Fetch Figma screenshot and other information with file and node identifiers.
         *
         * @param fileId - required fileId to pass to figmaEmbedInfo
         * @param variables - variables without 'fileId' to pass into the FigmaEmbedInfoQuery
         * @returns FigmaEmbedPayload
         */
        figmaEmbedInfo(fileId, variables) {
            return new FigmaEmbedInfoQuery(this._request).fetch(fileId, variables);
        }
        /**
         * One specific integration.
         *
         * @param id - required id to pass to integration
         * @returns Integration
         */
        integration(id) {
            return new IntegrationQuery(this._request).fetch(id);
        }
        /**
         * All integrations.
         *
         * @param variables - variables to pass into the IntegrationsQuery
         * @returns IntegrationConnection
         */
        integrations(variables) {
            return new IntegrationsQuery(this._request).fetch(variables);
        }
        /**
         * Retrieves information for the public invite page.
         *
         * @param userHash - required userHash to pass to inviteInfo
         * @param variables - variables without 'userHash' to pass into the InviteInfoQuery
         * @returns InvitePagePayload
         */
        inviteInfo(userHash, variables) {
            return new InviteInfoQuery(this._request).fetch(userHash, variables);
        }
        /**
         * One specific issue.
         *
         * @param id - required id to pass to issue
         * @returns Issue
         */
        issue(id) {
            return new IssueQuery(this._request).fetch(id);
        }
        /**
         * Fetches the GitHub token, completing the OAuth flow.
         *
         * @param code - required code to pass to issueImportFinishGithubOAuth
         * @returns OAuthTokenPayload
         */
        issueImportFinishGithubOAuth(code) {
            return new IssueImportFinishGithubOAuthQuery(this._request).fetch(code);
        }
        /**
         * One specific label.
         *
         * @param id - required id to pass to issueLabel
         * @returns IssueLabel
         */
        issueLabel(id) {
            return new IssueLabelQuery(this._request).fetch(id);
        }
        /**
         * All issue labels.
         *
         * @param variables - variables to pass into the IssueLabelsQuery
         * @returns IssueLabelConnection
         */
        issueLabels(variables) {
            return new IssueLabelsQuery(this._request).fetch(variables);
        }
        /**
         * Issue priority values and corresponding labels.
         *
         * @returns IssuePriorityValue[]
         */
        get issuePriorityValues() {
            return new IssuePriorityValuesQuery(this._request).fetch();
        }
        /**
         * One specific issue relation.
         *
         * @param id - required id to pass to issueRelation
         * @returns IssueRelation
         */
        issueRelation(id) {
            return new IssueRelationQuery(this._request).fetch(id);
        }
        /**
         * All issue relationships.
         *
         * @param variables - variables to pass into the IssueRelationsQuery
         * @returns IssueRelationConnection
         */
        issueRelations(variables) {
            return new IssueRelationsQuery(this._request).fetch(variables);
        }
        /**
         * [ALPHA] Search issues. This query is experimental and is subject to change without notice.
         *
         * @param query - required query to pass to issueSearch
         * @param variables - variables without 'query' to pass into the IssueSearchQuery
         * @returns IssueConnection
         */
        issueSearch(query, variables) {
            return new IssueSearchQuery(this._request).fetch(query, variables);
        }
        /**
         * All issues.
         *
         * @param variables - variables to pass into the IssuesQuery
         * @returns IssueConnection
         */
        issues(variables) {
            return new IssuesQuery(this._request).fetch(variables);
        }
        /**
         * One specific milestone.
         *
         * @param id - required id to pass to milestone
         * @returns Milestone
         */
        milestone(id) {
            return new MilestoneQuery(this._request).fetch(id);
        }
        /**
         * All milestones.
         *
         * @param variables - variables to pass into the MilestonesQuery
         * @returns MilestoneConnection
         */
        milestones(variables) {
            return new MilestonesQuery(this._request).fetch(variables);
        }
        /**
         * One specific notification.
         *
         * @param id - required id to pass to notification
         * @returns Notification
         */
        notification(id) {
            return new NotificationQuery(this._request).fetch(id);
        }
        /**
         * One specific notification subscription.
         *
         * @param id - required id to pass to notificationSubscription
         * @returns NotificationSubscription
         */
        notificationSubscription(id) {
            return new NotificationSubscriptionQuery(this._request).fetch(id);
        }
        /**
         * The user's notification subscriptions.
         *
         * @param variables - variables to pass into the NotificationSubscriptionsQuery
         * @returns NotificationSubscriptionConnection
         */
        notificationSubscriptions(variables) {
            return new NotificationSubscriptionsQuery(this._request).fetch(variables);
        }
        /**
         * All notifications.
         *
         * @param variables - variables to pass into the NotificationsQuery
         * @returns NotificationConnection
         */
        notifications(variables) {
            return new NotificationsQuery(this._request).fetch(variables);
        }
        /**
         * The user's organization.
         *
         * @returns Organization
         */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /**
         * Does the organization exist.
         *
         * @param urlKey - required urlKey to pass to organizationExists
         * @returns OrganizationExistsPayload
         */
        organizationExists(urlKey) {
            return new OrganizationExistsQuery(this._request).fetch(urlKey);
        }
        /**
         * One specific organization invite.
         *
         * @param id - required id to pass to organizationInvite
         * @returns IssueLabel
         */
        organizationInvite(id) {
            return new OrganizationInviteQuery(this._request).fetch(id);
        }
        /**
         * All invites for the organization.
         *
         * @param variables - variables to pass into the OrganizationInvitesQuery
         * @returns OrganizationInviteConnection
         */
        organizationInvites(variables) {
            return new OrganizationInvitesQuery(this._request).fetch(variables);
        }
        /**
         * One specific project.
         *
         * @param id - required id to pass to project
         * @returns Project
         */
        project(id) {
            return new ProjectQuery(this._request).fetch(id);
        }
        /**
         * One specific project link.
         *
         * @param id - required id to pass to projectLink
         * @returns ProjectLink
         */
        projectLink(id) {
            return new ProjectLinkQuery(this._request).fetch(id);
        }
        /**
         * All links for the project.
         *
         * @param variables - variables to pass into the ProjectLinksQuery
         * @returns ProjectLinkConnection
         */
        projectLinks(variables) {
            return new ProjectLinksQuery(this._request).fetch(variables);
        }
        /**
         * All projects.
         *
         * @param variables - variables to pass into the ProjectsQuery
         * @returns ProjectConnection
         */
        projects(variables) {
            return new ProjectsQuery(this._request).fetch(variables);
        }
        /**
         * Sends a test push message.
         *
         * @returns PushSubscriptionPayload
         */
        get pushSubscriptionTest() {
            return new PushSubscriptionTestQuery(this._request).fetch();
        }
        /**
         * A specific reaction.
         *
         * @param id - required id to pass to reaction
         * @returns Reaction
         */
        reaction(id) {
            return new ReactionQuery(this._request).fetch(id);
        }
        /**
         * All comment emoji reactions.
         *
         * @param variables - variables to pass into the ReactionsQuery
         * @returns ReactionConnection
         */
        reactions(variables) {
            return new ReactionsQuery(this._request).fetch(variables);
        }
        /**
         * Fetch SSO login URL for the email provided.
         *
         * @param email - required email to pass to ssoUrlFromEmail
         * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
         * @returns SsoUrlFromEmailResponse
         */
        ssoUrlFromEmail(email, variables) {
            return new SsoUrlFromEmailQuery(this._request).fetch(email, variables);
        }
        /**
         * The organization's subscription.
         *
         * @returns Subscription
         */
        get subscription() {
            return new SubscriptionQuery(this._request).fetch();
        }
        /**
         * Fetch data to catch up the client to the state of the world.
         *
         * @param variables - variables to pass into the SyncBootstrapQuery
         * @returns SyncResponse
         */
        syncBootstrap(variables) {
            return new SyncBootstrapQuery(this._request).fetch(variables);
        }
        /**
         * One specific team.
         *
         * @param id - required id to pass to team
         * @returns Team
         */
        team(id) {
            return new TeamQuery(this._request).fetch(id);
        }
        /**
         * One specific team membership.
         *
         * @param id - required id to pass to teamMembership
         * @returns TeamMembership
         */
        teamMembership(id) {
            return new TeamMembershipQuery(this._request).fetch(id);
        }
        /**
         * All team memberships.
         *
         * @param variables - variables to pass into the TeamMembershipsQuery
         * @returns TeamMembershipConnection
         */
        teamMemberships(variables) {
            return new TeamMembershipsQuery(this._request).fetch(variables);
        }
        /**
         * All teams.
         *
         * @param variables - variables to pass into the TeamsQuery
         * @returns TeamConnection
         */
        teams(variables) {
            return new TeamsQuery(this._request).fetch(variables);
        }
        /**
         * A specific template.
         *
         * @param id - required id to pass to template
         * @returns Template
         */
        template(id) {
            return new TemplateQuery(this._request).fetch(id);
        }
        /**
         * All templates from all users.
         *
         * @returns Template[]
         */
        get templates() {
            return new TemplatesQuery(this._request).fetch();
        }
        /**
         * One specific user.
         *
         * @param id - required id to pass to user
         * @returns User
         */
        user(id) {
            return new UserQuery(this._request).fetch(id);
        }
        /**
         * The user's settings.
         *
         * @returns UserSettings
         */
        get userSettings() {
            return new UserSettingsQuery(this._request).fetch();
        }
        /**
         * All users for the organization.
         *
         * @param variables - variables to pass into the UsersQuery
         * @returns UserConnection
         */
        users(variables) {
            return new UsersQuery(this._request).fetch(variables);
        }
        /**
         * The currently authenticated user.
         *
         * @returns User
         */
        get viewer() {
            return new ViewerQuery(this._request).fetch();
        }
        /**
         * A specific webhook.
         *
         * @param id - required id to pass to webhook
         * @returns Webhook
         */
        webhook(id) {
            return new WebhookQuery(this._request).fetch(id);
        }
        /**
         * All webhooks.
         *
         * @param variables - variables to pass into the WebhooksQuery
         * @returns WebhookConnection
         */
        webhooks(variables) {
            return new WebhooksQuery(this._request).fetch(variables);
        }
        /**
         * One specific state.
         *
         * @param id - required id to pass to workflowState
         * @returns WorkflowState
         */
        workflowState(id) {
            return new WorkflowStateQuery(this._request).fetch(id);
        }
        /**
         * All issue workflow states.
         *
         * @param variables - variables to pass into the WorkflowStatesQuery
         * @returns WorkflowStateConnection
         */
        workflowStates(variables) {
            return new WorkflowStatesQuery(this._request).fetch(variables);
        }
        /**
         * Creates a new API key.
         *
         * @param input - required input to pass to apiKeyCreate
         * @returns ApiKeyPayload
         */
        apiKeyCreate(input) {
            return new ApiKeyCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes an API key.
         *
         * @param id - required id to pass to apiKeyDelete
         * @returns ArchivePayload
         */
        apiKeyDelete(id) {
            return new ApiKeyDeleteMutation(this._request).fetch(id);
        }
        /**
         * [Alpha] Archives an issue attachment.
         *
         * @param id - required id to pass to attachmentArchive
         * @returns ArchivePayload
         */
        attachmentArchive(id) {
            return new AttachmentArchiveMutation(this._request).fetch(id);
        }
        /**
         * [Alpha] Creates a new attachment, or updates existing if the same `uri` is used.
         *
         * @param input - required input to pass to attachmentCreate
         * @returns AttachmentPayload
         */
        attachmentCreate(input) {
            return new AttachmentCreateMutation(this._request).fetch(input);
        }
        /**
         * [Alpha] Updates an existing issue attachment.
         *
         * @param id - required id to pass to attachmentUpdate
         * @param input - required input to pass to attachmentUpdate
         * @returns AttachmentPayload
         */
        attachmentUpdate(id, input) {
            return new AttachmentUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Updates the billing email address for the customer.
         *
         * @param input - required input to pass to billingEmailUpdate
         * @returns BillingEmailPayload
         */
        billingEmailUpdate(input) {
            return new BillingEmailUpdateMutation(this._request).fetch(input);
        }
        /**
         * Update collaborative document with client steps.
         *
         * @param input - required input to pass to collaborativeDocumentUpdate
         * @returns CollaborationDocumentUpdatePayload
         */
        collaborativeDocumentUpdate(input) {
            return new CollaborativeDocumentUpdateMutation(this._request).fetch(input);
        }
        /**
         * Creates a new comment.
         *
         * @param input - required input to pass to commentCreate
         * @returns CommentPayload
         */
        commentCreate(input) {
            return new CommentCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a comment.
         *
         * @param id - required id to pass to commentDelete
         * @returns ArchivePayload
         */
        commentDelete(id) {
            return new CommentDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates a comment.
         *
         * @param id - required id to pass to commentUpdate
         * @param input - required input to pass to commentUpdate
         * @returns CommentPayload
         */
        commentUpdate(id, input) {
            return new CommentUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Saves user message.
         *
         * @param input - required input to pass to contactCreate
         * @returns ContactPayload
         */
        contactCreate(input) {
            return new ContactCreateMutation(this._request).fetch(input);
        }
        /**
         * Create CSV export report for the organization.
         *
         * @param variables - variables to pass into the CreateCsvExportReportMutation
         * @returns CreateCsvExportReportPayload
         */
        createCsvExportReport(variables) {
            return new CreateCsvExportReportMutation(this._request).fetch(variables);
        }
        /**
         * Creates an organization from onboarding.
         *
         * @param input - required input to pass to createOrganizationFromOnboarding
         * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
         * @returns CreateOrJoinOrganizationResponse
         */
        createOrganizationFromOnboarding(input, variables) {
            return new CreateOrganizationFromOnboardingMutation(this._request).fetch(input, variables);
        }
        /**
         * Creates a new custom view.
         *
         * @param input - required input to pass to customViewCreate
         * @returns CustomViewPayload
         */
        customViewCreate(input) {
            return new CustomViewCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a custom view.
         *
         * @param id - required id to pass to customViewDelete
         * @returns ArchivePayload
         */
        customViewDelete(id) {
            return new CustomViewDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates a custom view.
         *
         * @param id - required id to pass to customViewUpdate
         * @param input - required input to pass to customViewUpdate
         * @returns CustomViewPayload
         */
        customViewUpdate(id, input) {
            return new CustomViewUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a cycle.
         *
         * @param id - required id to pass to cycleArchive
         * @returns ArchivePayload
         */
        cycleArchive(id) {
            return new CycleArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a new cycle.
         *
         * @param input - required input to pass to cycleCreate
         * @returns CyclePayload
         */
        cycleCreate(input) {
            return new CycleCreateMutation(this._request).fetch(input);
        }
        /**
         * Updates a cycle.
         *
         * @param id - required id to pass to cycleUpdate
         * @param input - required input to pass to cycleUpdate
         * @returns CyclePayload
         */
        cycleUpdate(id, input) {
            return new CycleUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Create the SAML test organization in development.
         *
         * @returns DebugPayload
         */
        get debugCreateSAMLOrg() {
            return new DebugCreateSamlOrgMutation(this._request).fetch();
        }
        /**
         * Always fails with internal error. Used to debug logging.
         *
         * @returns DebugPayload
         */
        get debugFailWithInternalError() {
            return new DebugFailWithInternalErrorMutation(this._request).fetch();
        }
        /**
         * Always logs an error to Sentry as warning. Used to debug logging.
         *
         * @returns DebugPayload
         */
        get debugFailWithWarning() {
            return new DebugFailWithWarningMutation(this._request).fetch();
        }
        /**
         * Authenticates a user account via email and authentication token.
         *
         * @param input - required input to pass to emailTokenUserAccountAuth
         * @returns AuthResolverResponse
         */
        emailTokenUserAccountAuth(input) {
            return new EmailTokenUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Unsubscribes the user from one type of emails.
         *
         * @param input - required input to pass to emailUnsubscribe
         * @returns EmailUnsubscribePayload
         */
        emailUnsubscribe(input) {
            return new EmailUnsubscribeMutation(this._request).fetch(input);
        }
        /**
         * Finds or creates a new user account by email and sends an email with token.
         *
         * @param input - required input to pass to emailUserAccountAuthChallenge
         * @returns EmailUserAccountAuthChallengeResponse
         */
        emailUserAccountAuthChallenge(input) {
            return new EmailUserAccountAuthChallengeMutation(this._request).fetch(input);
        }
        /**
         * Creates a custom emoji.
         *
         * @param input - required input to pass to emojiCreate
         * @returns EmojiPayload
         */
        emojiCreate(input) {
            return new EmojiCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes an emoji.
         *
         * @param id - required id to pass to emojiDelete
         * @returns ArchivePayload
         */
        emojiDelete(id) {
            return new EmojiDeleteMutation(this._request).fetch(id);
        }
        /**
         * [Deprecated] Creates a new event.
         *
         * @param input - required input to pass to eventCreate
         * @returns EventPayload
         */
        eventCreate(input) {
            return new EventCreateMutation(this._request).fetch(input);
        }
        /**
         * Creates a new favorite (project, cycle etc).
         *
         * @param input - required input to pass to favoriteCreate
         * @returns FavoritePayload
         */
        favoriteCreate(input) {
            return new FavoriteCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a favorite reference.
         *
         * @param id - required id to pass to favoriteDelete
         * @returns ArchivePayload
         */
        favoriteDelete(id) {
            return new FavoriteDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates a favorite.
         *
         * @param id - required id to pass to favoriteUpdate
         * @param input - required input to pass to favoriteUpdate
         * @returns FavoritePayload
         */
        favoriteUpdate(id, input) {
            return new FavoriteUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Saves user feedback.
         *
         * @param input - required input to pass to feedbackCreate
         * @returns FeedbackPayload
         */
        feedbackCreate(input) {
            return new FeedbackCreateMutation(this._request).fetch(input);
        }
        /**
         * XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
         *
         * @param contentType - required contentType to pass to fileUpload
         * @param filename - required filename to pass to fileUpload
         * @param size - required size to pass to fileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
         * @returns UploadPayload
         */
        fileUpload(contentType, filename, size, variables) {
            return new FileUploadMutation(this._request).fetch(contentType, filename, size, variables);
        }
        /**
         * Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
         *
         * @param input - required input to pass to googleUserAccountAuth
         * @returns AuthResolverResponse
         */
        googleUserAccountAuth(input) {
            return new GoogleUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Upload an image from an URL to Linear.
         *
         * @param url - required url to pass to imageUploadFromUrl
         * @returns ImageUploadFromUrlPayload
         */
        imageUploadFromUrl(url) {
            return new ImageUploadFromUrlMutation(this._request).fetch(url);
        }
        /**
         * Deletes an integration.
         *
         * @param id - required id to pass to integrationDelete
         * @returns ArchivePayload
         */
        integrationDelete(id) {
            return new IntegrationDeleteMutation(this._request).fetch(id);
        }
        /**
         * Integrates the organization with Figma.
         *
         * @param code - required code to pass to integrationFigma
         * @param redirectUri - required redirectUri to pass to integrationFigma
         * @returns IntegrationPayload
         */
        integrationFigma(code, redirectUri) {
            return new IntegrationFigmaMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Connects the organization with the GitHub App.
         *
         * @param installationId - required installationId to pass to integrationGithubConnect
         * @returns IntegrationPayload
         */
        integrationGithubConnect(installationId) {
            return new IntegrationGithubConnectMutation(this._request).fetch(installationId);
        }
        /**
         * Connects the organization with a GitLab Access Token.
         *
         * @param accessToken - required accessToken to pass to integrationGitlabConnect
         * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
         * @returns IntegrationPayload
         */
        integrationGitlabConnect(accessToken, gitlabUrl) {
            return new IntegrationGitlabConnectMutation(this._request).fetch(accessToken, gitlabUrl);
        }
        /**
         * Integrates the organization with Google Sheets.
         *
         * @param code - required code to pass to integrationGoogleSheets
         * @returns IntegrationPayload
         */
        integrationGoogleSheets(code) {
            return new IntegrationGoogleSheetsMutation(this._request).fetch(code);
        }
        /**
         * Archives an integration resource.
         *
         * @param id - required id to pass to integrationResourceArchive
         * @returns ArchivePayload
         */
        integrationResourceArchive(id) {
            return new IntegrationResourceArchiveMutation(this._request).fetch(id);
        }
        /**
         * Integrates the organization with Sentry.
         *
         * @param code - required code to pass to integrationSentryConnect
         * @param installationId - required installationId to pass to integrationSentryConnect
         * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
         * @returns IntegrationPayload
         */
        integrationSentryConnect(code, installationId, organizationSlug) {
            return new IntegrationSentryConnectMutation(this._request).fetch(code, installationId, organizationSlug);
        }
        /**
         * Integrates the organization with Slack.
         *
         * @param code - required code to pass to integrationSlack
         * @param redirectUri - required redirectUri to pass to integrationSlack
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
         * @returns IntegrationPayload
         */
        integrationSlack(code, redirectUri, variables) {
            return new IntegrationSlackMutation(this._request).fetch(code, redirectUri, variables);
        }
        /**
         * Imports custom emojis from your Slack workspace.
         *
         * @param code - required code to pass to integrationSlackImportEmojis
         * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
         * @returns IntegrationPayload
         */
        integrationSlackImportEmojis(code, redirectUri) {
            return new IntegrationSlackImportEmojisMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates your personal notifications with Slack.
         *
         * @param code - required code to pass to integrationSlackPersonal
         * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
         * @returns IntegrationPayload
         */
        integrationSlackPersonal(code, redirectUri) {
            return new IntegrationSlackPersonalMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Slack webhook integration.
         *
         * @param code - required code to pass to integrationSlackPost
         * @param redirectUri - required redirectUri to pass to integrationSlackPost
         * @param teamId - required teamId to pass to integrationSlackPost
         * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
         * @returns IntegrationPayload
         */
        integrationSlackPost(code, redirectUri, teamId, variables) {
            return new IntegrationSlackPostMutation(this._request).fetch(code, redirectUri, teamId, variables);
        }
        /**
         * Slack integration for project notifications.
         *
         * @param code - required code to pass to integrationSlackProjectPost
         * @param projectId - required projectId to pass to integrationSlackProjectPost
         * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
         * @returns IntegrationPayload
         */
        integrationSlackProjectPost(code, projectId, redirectUri) {
            return new IntegrationSlackProjectPostMutation(this._request).fetch(code, projectId, redirectUri);
        }
        /**
         * Integrates the organization with Zendesk.
         *
         * @param code - required code to pass to integrationZendesk
         * @param redirectUri - required redirectUri to pass to integrationZendesk
         * @param scope - required scope to pass to integrationZendesk
         * @param subdomain - required subdomain to pass to integrationZendesk
         * @returns IntegrationPayload
         */
        integrationZendesk(code, redirectUri, scope, subdomain) {
            return new IntegrationZendeskMutation(this._request).fetch(code, redirectUri, scope, subdomain);
        }
        /**
         * Archives an issue.
         *
         * @param id - required id to pass to issueArchive
         * @param variables - variables without 'id' to pass into the IssueArchiveMutation
         * @returns ArchivePayload
         */
        issueArchive(id, variables) {
            return new IssueArchiveMutation(this._request).fetch(id, variables);
        }
        /**
         * Creates a new issue.
         *
         * @param input - required input to pass to issueCreate
         * @returns IssuePayload
         */
        issueCreate(input) {
            return new IssueCreateMutation(this._request).fetch(input);
        }
        /**
         * Kicks off an Asana import job.
         *
         * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
         * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
         * @param teamId - required teamId to pass to issueImportCreateAsana
         * @returns IssueImportPayload
         */
        issueImportCreateAsana(asanaTeamName, asanaToken, teamId) {
            return new IssueImportCreateAsanaMutation(this._request).fetch(asanaTeamName, asanaToken, teamId);
        }
        /**
         * Kicks off a Clubhouse import job.
         *
         * @param clubhouseTeamName - required clubhouseTeamName to pass to issueImportCreateClubhouse
         * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
         * @param teamId - required teamId to pass to issueImportCreateClubhouse
         * @returns IssueImportPayload
         */
        issueImportCreateClubhouse(clubhouseTeamName, clubhouseToken, teamId) {
            return new IssueImportCreateClubhouseMutation(this._request).fetch(clubhouseTeamName, clubhouseToken, teamId);
        }
        /**
         * Kicks off a GitHub import job.
         *
         * @param githubRepoName - required githubRepoName to pass to issueImportCreateGithub
         * @param githubRepoOwner - required githubRepoOwner to pass to issueImportCreateGithub
         * @param githubToken - required githubToken to pass to issueImportCreateGithub
         * @param teamId - required teamId to pass to issueImportCreateGithub
         * @param variables - variables without 'githubRepoName', 'githubRepoOwner', 'githubToken', 'teamId' to pass into the IssueImportCreateGithubMutation
         * @returns IssueImportPayload
         */
        issueImportCreateGithub(githubRepoName, githubRepoOwner, githubToken, teamId, variables) {
            return new IssueImportCreateGithubMutation(this._request).fetch(githubRepoName, githubRepoOwner, githubToken, teamId, variables);
        }
        /**
         * Kicks off a Jira import job.
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
         * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
         * @param jiraProject - required jiraProject to pass to issueImportCreateJira
         * @param jiraToken - required jiraToken to pass to issueImportCreateJira
         * @param teamId - required teamId to pass to issueImportCreateJira
         * @returns IssueImportPayload
         */
        issueImportCreateJira(jiraEmail, jiraHostname, jiraProject, jiraToken, teamId) {
            return new IssueImportCreateJiraMutation(this._request).fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, teamId);
        }
        /**
         * Deletes an import job.
         *
         * @param issueImportId - required issueImportId to pass to issueImportDelete
         * @returns IssueImportDeletePayload
         */
        issueImportDelete(issueImportId) {
            return new IssueImportDeleteMutation(this._request).fetch(issueImportId);
        }
        /**
         * Archives an issue label.
         *
         * @param id - required id to pass to issueLabelArchive
         * @returns ArchivePayload
         */
        issueLabelArchive(id) {
            return new IssueLabelArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a new label.
         *
         * @param input - required input to pass to issueLabelCreate
         * @returns IssueLabelPayload
         */
        issueLabelCreate(input) {
            return new IssueLabelCreateMutation(this._request).fetch(input);
        }
        /**
         * Updates an label.
         *
         * @param id - required id to pass to issueLabelUpdate
         * @param input - required input to pass to issueLabelUpdate
         * @returns IssueLabelPayload
         */
        issueLabelUpdate(id, input) {
            return new IssueLabelUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new issue relation.
         *
         * @param input - required input to pass to issueRelationCreate
         * @returns IssueRelationPayload
         */
        issueRelationCreate(input) {
            return new IssueRelationCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes an issue relation.
         *
         * @param id - required id to pass to issueRelationDelete
         * @returns ArchivePayload
         */
        issueRelationDelete(id) {
            return new IssueRelationDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates an issue relation.
         *
         * @param id - required id to pass to issueRelationUpdate
         * @param input - required input to pass to issueRelationUpdate
         * @returns IssueRelationPayload
         */
        issueRelationUpdate(id, input) {
            return new IssueRelationUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives an issue.
         *
         * @param id - required id to pass to issueUnarchive
         * @returns ArchivePayload
         */
        issueUnarchive(id) {
            return new IssueUnarchiveMutation(this._request).fetch(id);
        }
        /**
         * Updates an issue.
         *
         * @param id - required id to pass to issueUpdate
         * @param input - required input to pass to issueUpdate
         * @returns IssuePayload
         */
        issueUpdate(id, input) {
            return new IssueUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Join an organization from onboarding.
         *
         * @param input - required input to pass to joinOrganizationFromOnboarding
         * @returns CreateOrJoinOrganizationResponse
         */
        joinOrganizationFromOnboarding(input) {
            return new JoinOrganizationFromOnboardingMutation(this._request).fetch(input);
        }
        /**
         * Leave an organization.
         *
         * @param organizationId - required organizationId to pass to leaveOrganization
         * @returns CreateOrJoinOrganizationResponse
         */
        leaveOrganization(organizationId) {
            return new LeaveOrganizationMutation(this._request).fetch(organizationId);
        }
        /**
         * Creates a new milestone.
         *
         * @param input - required input to pass to milestoneCreate
         * @returns MilestonePayload
         */
        milestoneCreate(input) {
            return new MilestoneCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a milestone.
         *
         * @param id - required id to pass to milestoneDelete
         * @returns ArchivePayload
         */
        milestoneDelete(id) {
            return new MilestoneDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates a milestone.
         *
         * @param id - required id to pass to milestoneUpdate
         * @param input - required input to pass to milestoneUpdate
         * @returns MilestonePayload
         */
        milestoneUpdate(id, input) {
            return new MilestoneUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a notification.
         *
         * @param id - required id to pass to notificationArchive
         * @returns ArchivePayload
         */
        notificationArchive(id) {
            return new NotificationArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a notification.
         *
         * @param id - required id to pass to notificationCreate
         * @param input - required input to pass to notificationCreate
         * @returns NotificationPayload
         */
        notificationCreate(id, input) {
            return new NotificationCreateMutation(this._request).fetch(id, input);
        }
        /**
         * [Deprecated] Deletes a notification.
         *
         * @param id - required id to pass to notificationDelete
         * @returns ArchivePayload
         */
        notificationDelete(id) {
            return new NotificationDeleteMutation(this._request).fetch(id);
        }
        /**
         * Creates a new notification subscription for a team or a project.
         *
         * @param input - required input to pass to notificationSubscriptionCreate
         * @returns NotificationSubscriptionPayload
         */
        notificationSubscriptionCreate(input) {
            return new NotificationSubscriptionCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a notification subscription reference.
         *
         * @param id - required id to pass to notificationSubscriptionDelete
         * @returns ArchivePayload
         */
        notificationSubscriptionDelete(id) {
            return new NotificationSubscriptionDeleteMutation(this._request).fetch(id);
        }
        /**
         * Unarchives a notification.
         *
         * @param id - required id to pass to notificationUnarchive
         * @returns ArchivePayload
         */
        notificationUnarchive(id) {
            return new NotificationUnarchiveMutation(this._request).fetch(id);
        }
        /**
         * Updates a notification.
         *
         * @param id - required id to pass to notificationUpdate
         * @param input - required input to pass to notificationUpdate
         * @returns NotificationPayload
         */
        notificationUpdate(id, input) {
            return new NotificationUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Archives an OAuth client.
         *
         * @param id - required id to pass to oauthClientArchive
         * @returns ArchivePayload
         */
        oauthClientArchive(id) {
            return new OauthClientArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a new OAuth client.
         *
         * @param input - required input to pass to oauthClientCreate
         * @returns OauthClientPayload
         */
        oauthClientCreate(input) {
            return new OauthClientCreateMutation(this._request).fetch(input);
        }
        /**
         * Updates an OAuth client.
         *
         * @param id - required id to pass to oauthClientRotateSecret
         * @returns RotateSecretPayload
         */
        oauthClientRotateSecret(id) {
            return new OauthClientRotateSecretMutation(this._request).fetch(id);
        }
        /**
         * Updates an OAuth client.
         *
         * @param id - required id to pass to oauthClientUpdate
         * @param input - required input to pass to oauthClientUpdate
         * @returns OauthClientPayload
         */
        oauthClientUpdate(id, input) {
            return new OauthClientUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Revokes an OAuth token.
         *
         * @param appId - required appId to pass to oauthTokenRevoke
         * @param scope - required scope to pass to oauthTokenRevoke
         * @returns OauthTokenRevokePayload
         */
        oauthTokenRevoke(appId, scope) {
            return new OauthTokenRevokeMutation(this._request).fetch(appId, scope);
        }
        /**
         * Delete's an organization. Administrator privileges required.
         *
         * @param input - required input to pass to organizationDelete
         * @returns OrganizationDeletePayload
         */
        organizationDelete(input) {
            return new OrganizationDeleteMutation(this._request).fetch(input);
        }
        /**
         * Get an organization's delete confirmation token. Administrator privileges required.
         *
         * @returns OrganizationDeletePayload
         */
        get organizationDeleteChallenge() {
            return new OrganizationDeleteChallengeMutation(this._request).fetch();
        }
        /**
         * Adds a domain to be allowed for an organization.
         *
         * @param input - required input to pass to organizationDomainCreate
         * @returns OrganizationDomainPayload
         */
        organizationDomainCreate(input) {
            return new OrganizationDomainCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a domain.
         *
         * @param id - required id to pass to organizationDomainDelete
         * @returns ArchivePayload
         */
        organizationDomainDelete(id) {
            return new OrganizationDomainDeleteMutation(this._request).fetch(id);
        }
        /**
         * Verifies a domain to be added to an organization.
         *
         * @param input - required input to pass to organizationDomainVerify
         * @returns OrganizationDomainPayload
         */
        organizationDomainVerify(input) {
            return new OrganizationDomainVerifyMutation(this._request).fetch(input);
        }
        /**
         * Creates a new organization invite.
         *
         * @param input - required input to pass to organizationInviteCreate
         * @returns OrganizationInvitePayload
         */
        organizationInviteCreate(input) {
            return new OrganizationInviteCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes an organization invite.
         *
         * @param id - required id to pass to organizationInviteDelete
         * @returns ArchivePayload
         */
        organizationInviteDelete(id) {
            return new OrganizationInviteDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates the user's organization.
         *
         * @param input - required input to pass to organizationUpdate
         * @returns OrganizationPayload
         */
        organizationUpdate(input) {
            return new OrganizationUpdateMutation(this._request).fetch(input);
        }
        /**
         * Archives a project.
         *
         * @param id - required id to pass to projectArchive
         * @returns ArchivePayload
         */
        projectArchive(id) {
            return new ProjectArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a new project.
         *
         * @param input - required input to pass to projectCreate
         * @returns ProjectPayload
         */
        projectCreate(input) {
            return new ProjectCreateMutation(this._request).fetch(input);
        }
        /**
         * Creates a new project link.
         *
         * @param input - required input to pass to projectLinkCreate
         * @returns ProjectLinkPayload
         */
        projectLinkCreate(input) {
            return new ProjectLinkCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project link.
         *
         * @param id - required id to pass to projectLinkDelete
         * @returns ArchivePayload
         */
        projectLinkDelete(id) {
            return new ProjectLinkDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates a project.
         *
         * @param id - required id to pass to projectUpdate
         * @param input - required input to pass to projectUpdate
         * @returns ProjectPayload
         */
        projectUpdate(id, input) {
            return new ProjectUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a push subscription.
         *
         * @param input - required input to pass to pushSubscriptionCreate
         * @returns PushSubscriptionPayload
         */
        pushSubscriptionCreate(input) {
            return new PushSubscriptionCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a push subscription.
         *
         * @param id - required id to pass to pushSubscriptionDelete
         * @returns PushSubscriptionPayload
         */
        pushSubscriptionDelete(id) {
            return new PushSubscriptionDeleteMutation(this._request).fetch(id);
        }
        /**
         * Creates a new reaction.
         *
         * @param input - required input to pass to reactionCreate
         * @returns ReactionPayload
         */
        reactionCreate(input) {
            return new ReactionCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a reaction.
         *
         * @param id - required id to pass to reactionDelete
         * @returns ArchivePayload
         */
        reactionDelete(id) {
            return new ReactionDeleteMutation(this._request).fetch(id);
        }
        /**
         * Manually update Google Sheets data.
         *
         * @param id - required id to pass to refreshGoogleSheetsData
         * @returns IntegrationPayload
         */
        refreshGoogleSheetsData(id) {
            return new RefreshGoogleSheetsDataMutation(this._request).fetch(id);
        }
        /**
         * Re-send an organization invite.
         *
         * @param id - required id to pass to resentOrganizationInvite
         * @returns ArchivePayload
         */
        resentOrganizationInvite(id) {
            return new ResentOrganizationInviteMutation(this._request).fetch(id);
        }
        /**
         * Authenticates a user account via email and authentication token for SAML.
         *
         * @param input - required input to pass to samlTokenUserAccountAuth
         * @returns AuthResolverResponse
         */
        samlTokenUserAccountAuth(input) {
            return new SamlTokenUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Archives a subscription.
         *
         * @param id - required id to pass to subscriptionArchive
         * @returns ArchivePayload
         */
        subscriptionArchive(id) {
            return new SubscriptionArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a subscription session. Used internally to integrate with Stripe.
         *
         * @param plan - required plan to pass to subscriptionSessionCreate
         * @returns SubscriptionSessionPayload
         */
        subscriptionSessionCreate(plan) {
            return new SubscriptionSessionCreateMutation(this._request).fetch(plan);
        }
        /**
         * Updates a subscription.
         *
         * @param id - required id to pass to subscriptionUpdate
         * @param input - required input to pass to subscriptionUpdate
         * @returns SubscriptionPayload
         */
        subscriptionUpdate(id, input) {
            return new SubscriptionUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a subscription update session. Used internally to integrate with Stripe.
         *
         * @returns SubscriptionSessionPayload
         */
        get subscriptionUpdateSessionCreate() {
            return new SubscriptionUpdateSessionCreateMutation(this._request).fetch();
        }
        /**
         * Upgrades a subscription plan.
         *
         * @param id - required id to pass to subscriptionUpgrade
         * @param type - required type to pass to subscriptionUpgrade
         * @returns SubscriptionPayload
         */
        subscriptionUpgrade(id, type) {
            return new SubscriptionUpgradeMutation(this._request).fetch(id, type);
        }
        /**
         * Archives a team.
         *
         * @param id - required id to pass to teamArchive
         * @returns ArchivePayload
         */
        teamArchive(id) {
            return new TeamArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
         *
         * @param input - required input to pass to teamCreate
         * @param variables - variables without 'input' to pass into the TeamCreateMutation
         * @returns TeamPayload
         */
        teamCreate(input, variables) {
            return new TeamCreateMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes a team.
         *
         * @param id - required id to pass to teamDelete
         * @returns ArchivePayload
         */
        teamDelete(id) {
            return new TeamDeleteMutation(this._request).fetch(id);
        }
        /**
         * Creates a new team membership.
         *
         * @param input - required input to pass to teamMembershipCreate
         * @returns TeamMembershipPayload
         */
        teamMembershipCreate(input) {
            return new TeamMembershipCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a team membership.
         *
         * @param id - required id to pass to teamMembershipDelete
         * @returns ArchivePayload
         */
        teamMembershipDelete(id) {
            return new TeamMembershipDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates a team membership.
         *
         * @param id - required id to pass to teamMembershipUpdate
         * @param input - required input to pass to teamMembershipUpdate
         * @returns TeamMembershipPayload
         */
        teamMembershipUpdate(id, input) {
            return new TeamMembershipUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Updates a team.
         *
         * @param id - required id to pass to teamUpdate
         * @param input - required input to pass to teamUpdate
         * @returns TeamPayload
         */
        teamUpdate(id, input) {
            return new TeamUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new template.
         *
         * @param input - required input to pass to templateCreate
         * @returns TemplatePayload
         */
        templateCreate(input) {
            return new TemplateCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a template.
         *
         * @param id - required id to pass to templateDelete
         * @returns ArchivePayload
         */
        templateDelete(id) {
            return new TemplateDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing template.
         *
         * @param id - required id to pass to templateUpdate
         * @param input - required input to pass to templateUpdate
         * @returns TemplatePayload
         */
        templateUpdate(id, input) {
            return new TemplateUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Makes user a regular user. Can only be called by an admin.
         *
         * @param id - required id to pass to userDemoteAdmin
         * @returns UserAdminPayload
         */
        userDemoteAdmin(id) {
            return new UserDemoteAdminMutation(this._request).fetch(id);
        }
        /**
         * Updates a user's settings flag.
         *
         * @param flag - required flag to pass to userFlagUpdate
         * @param operation - required operation to pass to userFlagUpdate
         * @returns UserSettingsFlagPayload
         */
        userFlagUpdate(flag, operation) {
            return new UserFlagUpdateMutation(this._request).fetch(flag, operation);
        }
        /**
         * Makes user an admin. Can only be called by an admin.
         *
         * @param id - required id to pass to userPromoteAdmin
         * @returns UserAdminPayload
         */
        userPromoteAdmin(id) {
            return new UserPromoteAdminMutation(this._request).fetch(id);
        }
        /**
         * [Deprecated] Updates a user's settings flag.
         *
         * @param flag - required flag to pass to userSettingsFlagIncrement
         * @returns UserSettingsFlagPayload
         */
        userSettingsFlagIncrement(flag) {
            return new UserSettingsFlagIncrementMutation(this._request).fetch(flag);
        }
        /**
         * Resets user's setting flags.
         *
         * @returns UserSettingsFlagsResetPayload
         */
        get userSettingsFlagsReset() {
            return new UserSettingsFlagsResetMutation(this._request).fetch();
        }
        /**
         * Updates the user's settings.
         *
         * @param id - required id to pass to userSettingsUpdate
         * @param input - required input to pass to userSettingsUpdate
         * @returns UserSettingsPayload
         */
        userSettingsUpdate(id, input) {
            return new UserSettingsUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Subscribes user to changelog newsletter.
         *
         * @returns UserSubscribeToNewsletterPayload
         */
        get userSubscribeToNewsletter() {
            return new UserSubscribeToNewsletterMutation(this._request).fetch();
        }
        /**
         * Suspends a user. Can only be called by an admin.
         *
         * @param id - required id to pass to userSuspend
         * @returns UserAdminPayload
         */
        userSuspend(id) {
            return new UserSuspendMutation(this._request).fetch(id);
        }
        /**
         * Un-suspends a user. Can only be called by an admin.
         *
         * @param id - required id to pass to userUnsuspend
         * @returns UserAdminPayload
         */
        userUnsuspend(id) {
            return new UserUnsuspendMutation(this._request).fetch(id);
        }
        /**
         * Updates a user. Only available to organization admins and the user themselves.
         *
         * @param id - required id to pass to userUpdate
         * @param input - required input to pass to userUpdate
         * @returns UserPayload
         */
        userUpdate(id, input) {
            return new UserUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new ViewPreferences object.
         *
         * @param input - required input to pass to viewPreferencesCreate
         * @returns ViewPreferencesPayload
         */
        viewPreferencesCreate(input) {
            return new ViewPreferencesCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a ViewPreferences.
         *
         * @param id - required id to pass to viewPreferencesDelete
         * @returns ArchivePayload
         */
        viewPreferencesDelete(id) {
            return new ViewPreferencesDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing ViewPreferences object.
         *
         * @param id - required id to pass to viewPreferencesUpdate
         * @param input - required input to pass to viewPreferencesUpdate
         * @returns ViewPreferencesPayload
         */
        viewPreferencesUpdate(id, input) {
            return new ViewPreferencesUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new webhook.
         *
         * @param input - required input to pass to webhookCreate
         * @returns WebhookPayload
         */
        webhookCreate(input) {
            return new WebhookCreateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a Webhook.
         *
         * @param id - required id to pass to webhookDelete
         * @returns ArchivePayload
         */
        webhookDelete(id) {
            return new WebhookDeleteMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing Webhook.
         *
         * @param id - required id to pass to webhookUpdate
         * @param input - required input to pass to webhookUpdate
         * @returns WebhookPayload
         */
        webhookUpdate(id, input) {
            return new WebhookUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a state. Only states with issues that have all been archived can be archived.
         *
         * @param id - required id to pass to workflowStateArchive
         * @returns ArchivePayload
         */
        workflowStateArchive(id) {
            return new WorkflowStateArchiveMutation(this._request).fetch(id);
        }
        /**
         * Creates a new state, adding it to the workflow of a team.
         *
         * @param input - required input to pass to workflowStateCreate
         * @returns WorkflowStatePayload
         */
        workflowStateCreate(input) {
            return new WorkflowStateCreateMutation(this._request).fetch(input);
        }
        /**
         * Updates a state.
         *
         * @param id - required id to pass to workflowStateUpdate
         * @param input - required input to pass to workflowStateUpdate
         * @returns WorkflowStatePayload
         */
        workflowStateUpdate(id, input) {
            return new WorkflowStateUpdateMutation(this._request).fetch(id, input);
        }
    }

    /**
     * Validate and return default LinearGraphQLClient options
     *
     * @param options initial request options to pass to the graphql client
     * @returns parsed graphql client options
     */
    function parseClientOptions(_a) {
        var _b, _c;
        var { apiKey, accessToken, apiUrl, headers } = _a, opts = __rest(_a, ["apiKey", "accessToken", "apiUrl", "headers"]);
        if (!accessToken && !apiKey) {
            throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/api");
        }
        return Object.assign({ headers: Object.assign(Object.assign({ 
                /** Use bearer if oauth token exists, otherwise use the provided apiKey */
                Authorization: accessToken
                    ? accessToken.startsWith("Bearer ")
                        ? accessToken
                        : `Bearer ${accessToken}`
                    : apiKey !== null && apiKey !== void 0 ? apiKey : "" }, headers), { 
                /** Override any user agent with the sdk name and version */
                "User-Agent": serializeUserAgent({
                    [(_b = process.env.npm_package_name) !== null && _b !== void 0 ? _b : "@linear/sdk"]: (_c = process.env.npm_package_version) !== null && _c !== void 0 ? _c : "unknown",
                }) }), 
            /** Default to production linear api */
            apiUrl: apiUrl !== null && apiUrl !== void 0 ? apiUrl : "https://api.linear.app/graphql" }, opts);
    }
    /**
     * Create a Linear API client
     *
     * @param options request options to pass to the LinearGraphQLClient
     */
    class LinearClient extends LinearSdk {
        constructor(options) {
            const parsedOptions = parseClientOptions(options);
            const graphQLClient = new LinearGraphQLClient(parsedOptions.apiUrl, parsedOptions);
            super((doc, vars) => 
            /** Call the LinearGraphQLClient */
            this.client.request(doc, vars).catch(error => {
                /** Catch and wrap errors from the LinearGraphQLClient */
                throw parseLinearError(error);
            }));
            this.options = parsedOptions;
            this.client = graphQLClient;
        }
    }

    exports.ApiKey = ApiKey;
    exports.ApiKeyConnection = ApiKeyConnection;
    exports.ApiKeyCreateMutation = ApiKeyCreateMutation;
    exports.ApiKeyDeleteMutation = ApiKeyDeleteMutation;
    exports.ApiKeyPayload = ApiKeyPayload;
    exports.ApiKeysQuery = ApiKeysQuery;
    exports.Application = Application;
    exports.ApplicationWithAuthorizationQuery = ApplicationWithAuthorizationQuery;
    exports.ArchivePayload = ArchivePayload;
    exports.ArchiveResponse = ArchiveResponse;
    exports.ArchivedModelSyncQuery = ArchivedModelSyncQuery;
    exports.ArchivedModelsSyncQuery = ArchivedModelsSyncQuery;
    exports.Attachment = Attachment;
    exports.AttachmentArchiveMutation = AttachmentArchiveMutation;
    exports.AttachmentConnection = AttachmentConnection;
    exports.AttachmentCreateMutation = AttachmentCreateMutation;
    exports.AttachmentIssueQuery = AttachmentIssueQuery;
    exports.AttachmentIssue_AttachmentsQuery = AttachmentIssue_AttachmentsQuery;
    exports.AttachmentIssue_ChildrenQuery = AttachmentIssue_ChildrenQuery;
    exports.AttachmentIssue_CommentsQuery = AttachmentIssue_CommentsQuery;
    exports.AttachmentIssue_HistoryQuery = AttachmentIssue_HistoryQuery;
    exports.AttachmentIssue_InverseRelationsQuery = AttachmentIssue_InverseRelationsQuery;
    exports.AttachmentIssue_LabelsQuery = AttachmentIssue_LabelsQuery;
    exports.AttachmentIssue_RelationsQuery = AttachmentIssue_RelationsQuery;
    exports.AttachmentIssue_SubscribersQuery = AttachmentIssue_SubscribersQuery;
    exports.AttachmentPayload = AttachmentPayload;
    exports.AttachmentQuery = AttachmentQuery;
    exports.AttachmentUpdateMutation = AttachmentUpdateMutation;
    exports.AttachmentsQuery = AttachmentsQuery;
    exports.AuthResolverResponse = AuthResolverResponse;
    exports.AuthenticationLinearError = AuthenticationLinearError;
    exports.AuthorizedApplication = AuthorizedApplication;
    exports.AuthorizedApplicationsQuery = AuthorizedApplicationsQuery;
    exports.AvailableUsersQuery = AvailableUsersQuery;
    exports.BillingDetailsPayload = BillingDetailsPayload;
    exports.BillingDetailsQuery = BillingDetailsQuery;
    exports.BillingDetails_PaymentMethodQuery = BillingDetails_PaymentMethodQuery;
    exports.BillingEmailPayload = BillingEmailPayload;
    exports.BillingEmailUpdateMutation = BillingEmailUpdateMutation;
    exports.BootstrapLinearError = BootstrapLinearError;
    exports.Card = Card;
    exports.CollaborationDocumentUpdatePayload = CollaborationDocumentUpdatePayload;
    exports.CollaborativeDocumentJoinQuery = CollaborativeDocumentJoinQuery;
    exports.CollaborativeDocumentJoin_StepsQuery = CollaborativeDocumentJoin_StepsQuery;
    exports.CollaborativeDocumentUpdateMutation = CollaborativeDocumentUpdateMutation;
    exports.Comment = Comment;
    exports.CommentConnection = CommentConnection;
    exports.CommentCreateMutation = CommentCreateMutation;
    exports.CommentDeleteMutation = CommentDeleteMutation;
    exports.CommentPayload = CommentPayload;
    exports.CommentQuery = CommentQuery;
    exports.CommentUpdateMutation = CommentUpdateMutation;
    exports.CommentsQuery = CommentsQuery;
    exports.CommitPayload = CommitPayload;
    exports.Connection = Connection;
    exports.ContactCreateMutation = ContactCreateMutation;
    exports.ContactPayload = ContactPayload;
    exports.CreateCsvExportReportMutation = CreateCsvExportReportMutation;
    exports.CreateCsvExportReportPayload = CreateCsvExportReportPayload;
    exports.CreateOrJoinOrganizationResponse = CreateOrJoinOrganizationResponse;
    exports.CreateOrganizationFromOnboardingMutation = CreateOrganizationFromOnboardingMutation;
    exports.CustomView = CustomView;
    exports.CustomViewConnection = CustomViewConnection;
    exports.CustomViewCreateMutation = CustomViewCreateMutation;
    exports.CustomViewDeleteMutation = CustomViewDeleteMutation;
    exports.CustomViewPayload = CustomViewPayload;
    exports.CustomViewQuery = CustomViewQuery;
    exports.CustomViewUpdateMutation = CustomViewUpdateMutation;
    exports.CustomViewsQuery = CustomViewsQuery;
    exports.Cycle = Cycle;
    exports.CycleArchiveMutation = CycleArchiveMutation;
    exports.CycleConnection = CycleConnection;
    exports.CycleCreateMutation = CycleCreateMutation;
    exports.CyclePayload = CyclePayload;
    exports.CycleQuery = CycleQuery;
    exports.CycleUpdateMutation = CycleUpdateMutation;
    exports.Cycle_IssuesQuery = Cycle_IssuesQuery;
    exports.Cycle_UncompletedIssuesUponCloseQuery = Cycle_UncompletedIssuesUponCloseQuery;
    exports.CyclesQuery = CyclesQuery;
    exports.DebugCreateSamlOrgMutation = DebugCreateSamlOrgMutation;
    exports.DebugFailWithInternalErrorMutation = DebugFailWithInternalErrorMutation;
    exports.DebugFailWithWarningMutation = DebugFailWithWarningMutation;
    exports.DebugPayload = DebugPayload;
    exports.DocumentStep = DocumentStep;
    exports.EmailTokenUserAccountAuthMutation = EmailTokenUserAccountAuthMutation;
    exports.EmailUnsubscribeMutation = EmailUnsubscribeMutation;
    exports.EmailUnsubscribePayload = EmailUnsubscribePayload;
    exports.EmailUserAccountAuthChallengeMutation = EmailUserAccountAuthChallengeMutation;
    exports.EmailUserAccountAuthChallengeResponse = EmailUserAccountAuthChallengeResponse;
    exports.Emoji = Emoji;
    exports.EmojiConnection = EmojiConnection;
    exports.EmojiCreateMutation = EmojiCreateMutation;
    exports.EmojiDeleteMutation = EmojiDeleteMutation;
    exports.EmojiPayload = EmojiPayload;
    exports.EmojiQuery = EmojiQuery;
    exports.EmojisQuery = EmojisQuery;
    exports.EventCreateMutation = EventCreateMutation;
    exports.EventPayload = EventPayload;
    exports.Favorite = Favorite;
    exports.FavoriteConnection = FavoriteConnection;
    exports.FavoriteCreateMutation = FavoriteCreateMutation;
    exports.FavoriteDeleteMutation = FavoriteDeleteMutation;
    exports.FavoritePayload = FavoritePayload;
    exports.FavoriteQuery = FavoriteQuery;
    exports.FavoriteUpdateMutation = FavoriteUpdateMutation;
    exports.FavoritesQuery = FavoritesQuery;
    exports.FeatureNotAccessibleLinearError = FeatureNotAccessibleLinearError;
    exports.FeedbackCreateMutation = FeedbackCreateMutation;
    exports.FeedbackPayload = FeedbackPayload;
    exports.FigmaEmbed = FigmaEmbed;
    exports.FigmaEmbedInfoQuery = FigmaEmbedInfoQuery;
    exports.FigmaEmbedInfo_FigmaEmbedQuery = FigmaEmbedInfo_FigmaEmbedQuery;
    exports.FigmaEmbedPayload = FigmaEmbedPayload;
    exports.FileUpload = FileUpload;
    exports.FileUploadMutation = FileUploadMutation;
    exports.ForbiddenLinearError = ForbiddenLinearError;
    exports.GithubOrg = GithubOrg;
    exports.GithubRepo = GithubRepo;
    exports.GoogleSheetsSettings = GoogleSheetsSettings;
    exports.GoogleUserAccountAuthMutation = GoogleUserAccountAuthMutation;
    exports.GraphQLClientError = GraphQLClientError;
    exports.GraphqlLinearError = GraphqlLinearError;
    exports.ImageUploadFromUrlMutation = ImageUploadFromUrlMutation;
    exports.ImageUploadFromUrlPayload = ImageUploadFromUrlPayload;
    exports.Integration = Integration;
    exports.IntegrationConnection = IntegrationConnection;
    exports.IntegrationDeleteMutation = IntegrationDeleteMutation;
    exports.IntegrationFigmaMutation = IntegrationFigmaMutation;
    exports.IntegrationGithubConnectMutation = IntegrationGithubConnectMutation;
    exports.IntegrationGitlabConnectMutation = IntegrationGitlabConnectMutation;
    exports.IntegrationGoogleSheetsMutation = IntegrationGoogleSheetsMutation;
    exports.IntegrationPayload = IntegrationPayload;
    exports.IntegrationQuery = IntegrationQuery;
    exports.IntegrationResource = IntegrationResource;
    exports.IntegrationResourceArchiveMutation = IntegrationResourceArchiveMutation;
    exports.IntegrationResourceConnection = IntegrationResourceConnection;
    exports.IntegrationResourceData = IntegrationResourceData;
    exports.IntegrationSentryConnectMutation = IntegrationSentryConnectMutation;
    exports.IntegrationSettings = IntegrationSettings;
    exports.IntegrationSlackImportEmojisMutation = IntegrationSlackImportEmojisMutation;
    exports.IntegrationSlackMutation = IntegrationSlackMutation;
    exports.IntegrationSlackPersonalMutation = IntegrationSlackPersonalMutation;
    exports.IntegrationSlackPostMutation = IntegrationSlackPostMutation;
    exports.IntegrationSlackProjectPostMutation = IntegrationSlackProjectPostMutation;
    exports.IntegrationZendeskMutation = IntegrationZendeskMutation;
    exports.IntegrationsQuery = IntegrationsQuery;
    exports.InternalLinearError = InternalLinearError;
    exports.InvalidInputLinearError = InvalidInputLinearError;
    exports.InviteData = InviteData;
    exports.InviteInfoQuery = InviteInfoQuery;
    exports.InviteInfo_InviteDataQuery = InviteInfo_InviteDataQuery;
    exports.InvitePagePayload = InvitePagePayload;
    exports.Invoice = Invoice;
    exports.Issue = Issue;
    exports.IssueArchiveMutation = IssueArchiveMutation;
    exports.IssueConnection = IssueConnection;
    exports.IssueCreateMutation = IssueCreateMutation;
    exports.IssueHistory = IssueHistory;
    exports.IssueHistoryConnection = IssueHistoryConnection;
    exports.IssueImport = IssueImport;
    exports.IssueImportCreateAsanaMutation = IssueImportCreateAsanaMutation;
    exports.IssueImportCreateClubhouseMutation = IssueImportCreateClubhouseMutation;
    exports.IssueImportCreateGithubMutation = IssueImportCreateGithubMutation;
    exports.IssueImportCreateJiraMutation = IssueImportCreateJiraMutation;
    exports.IssueImportDeleteMutation = IssueImportDeleteMutation;
    exports.IssueImportDeletePayload = IssueImportDeletePayload;
    exports.IssueImportFinishGithubOAuthQuery = IssueImportFinishGithubOAuthQuery;
    exports.IssueImportPayload = IssueImportPayload;
    exports.IssueLabel = IssueLabel;
    exports.IssueLabelArchiveMutation = IssueLabelArchiveMutation;
    exports.IssueLabelConnection = IssueLabelConnection;
    exports.IssueLabelCreateMutation = IssueLabelCreateMutation;
    exports.IssueLabelPayload = IssueLabelPayload;
    exports.IssueLabelQuery = IssueLabelQuery;
    exports.IssueLabelUpdateMutation = IssueLabelUpdateMutation;
    exports.IssueLabel_IssuesQuery = IssueLabel_IssuesQuery;
    exports.IssueLabelsQuery = IssueLabelsQuery;
    exports.IssuePayload = IssuePayload;
    exports.IssuePriorityValue = IssuePriorityValue;
    exports.IssuePriorityValuesQuery = IssuePriorityValuesQuery;
    exports.IssueQuery = IssueQuery;
    exports.IssueRelation = IssueRelation;
    exports.IssueRelationConnection = IssueRelationConnection;
    exports.IssueRelationCreateMutation = IssueRelationCreateMutation;
    exports.IssueRelationDeleteMutation = IssueRelationDeleteMutation;
    exports.IssueRelationPayload = IssueRelationPayload;
    exports.IssueRelationQuery = IssueRelationQuery;
    exports.IssueRelationUpdateMutation = IssueRelationUpdateMutation;
    exports.IssueRelationsQuery = IssueRelationsQuery;
    exports.IssueSearchQuery = IssueSearchQuery;
    exports.IssueUnarchiveMutation = IssueUnarchiveMutation;
    exports.IssueUpdateMutation = IssueUpdateMutation;
    exports.Issue_AttachmentsQuery = Issue_AttachmentsQuery;
    exports.Issue_ChildrenQuery = Issue_ChildrenQuery;
    exports.Issue_CommentsQuery = Issue_CommentsQuery;
    exports.Issue_HistoryQuery = Issue_HistoryQuery;
    exports.Issue_InverseRelationsQuery = Issue_InverseRelationsQuery;
    exports.Issue_LabelsQuery = Issue_LabelsQuery;
    exports.Issue_RelationsQuery = Issue_RelationsQuery;
    exports.Issue_SubscribersQuery = Issue_SubscribersQuery;
    exports.IssuesQuery = IssuesQuery;
    exports.JoinOrganizationFromOnboardingMutation = JoinOrganizationFromOnboardingMutation;
    exports.LeaveOrganizationMutation = LeaveOrganizationMutation;
    exports.LinearClient = LinearClient;
    exports.LinearConnection = LinearConnection;
    exports.LinearDocument = _generated_documents;
    exports.LinearError = LinearError;
    exports.LinearGraphQLClient = LinearGraphQLClient;
    exports.LinearGraphQLError = LinearGraphQLError;
    exports.LinearSdk = LinearSdk;
    exports.LockTimeoutLinearError = LockTimeoutLinearError;
    exports.Milestone = Milestone;
    exports.MilestoneConnection = MilestoneConnection;
    exports.MilestoneCreateMutation = MilestoneCreateMutation;
    exports.MilestoneDeleteMutation = MilestoneDeleteMutation;
    exports.MilestonePayload = MilestonePayload;
    exports.MilestoneQuery = MilestoneQuery;
    exports.MilestoneUpdateMutation = MilestoneUpdateMutation;
    exports.Milestone_ProjectsQuery = Milestone_ProjectsQuery;
    exports.MilestonesQuery = MilestonesQuery;
    exports.NetworkLinearError = NetworkLinearError;
    exports.Notification = Notification;
    exports.NotificationArchiveMutation = NotificationArchiveMutation;
    exports.NotificationConnection = NotificationConnection;
    exports.NotificationCreateMutation = NotificationCreateMutation;
    exports.NotificationDeleteMutation = NotificationDeleteMutation;
    exports.NotificationPayload = NotificationPayload;
    exports.NotificationQuery = NotificationQuery;
    exports.NotificationSubscription = NotificationSubscription;
    exports.NotificationSubscriptionConnection = NotificationSubscriptionConnection;
    exports.NotificationSubscriptionCreateMutation = NotificationSubscriptionCreateMutation;
    exports.NotificationSubscriptionDeleteMutation = NotificationSubscriptionDeleteMutation;
    exports.NotificationSubscriptionPayload = NotificationSubscriptionPayload;
    exports.NotificationSubscriptionQuery = NotificationSubscriptionQuery;
    exports.NotificationSubscriptionsQuery = NotificationSubscriptionsQuery;
    exports.NotificationUnarchiveMutation = NotificationUnarchiveMutation;
    exports.NotificationUpdateMutation = NotificationUpdateMutation;
    exports.NotificationsQuery = NotificationsQuery;
    exports.OAuthTokenPayload = OAuthTokenPayload;
    exports.OauthClient = OauthClient;
    exports.OauthClientArchiveMutation = OauthClientArchiveMutation;
    exports.OauthClientCreateMutation = OauthClientCreateMutation;
    exports.OauthClientPayload = OauthClientPayload;
    exports.OauthClientRotateSecretMutation = OauthClientRotateSecretMutation;
    exports.OauthClientUpdateMutation = OauthClientUpdateMutation;
    exports.OauthTokenRevokeMutation = OauthTokenRevokeMutation;
    exports.OauthTokenRevokePayload = OauthTokenRevokePayload;
    exports.Organization = Organization;
    exports.OrganizationDeleteChallengeMutation = OrganizationDeleteChallengeMutation;
    exports.OrganizationDeleteMutation = OrganizationDeleteMutation;
    exports.OrganizationDeletePayload = OrganizationDeletePayload;
    exports.OrganizationDomain = OrganizationDomain;
    exports.OrganizationDomainCreateMutation = OrganizationDomainCreateMutation;
    exports.OrganizationDomainDeleteMutation = OrganizationDomainDeleteMutation;
    exports.OrganizationDomainPayload = OrganizationDomainPayload;
    exports.OrganizationDomainSimplePayload = OrganizationDomainSimplePayload;
    exports.OrganizationDomainVerifyMutation = OrganizationDomainVerifyMutation;
    exports.OrganizationExistsPayload = OrganizationExistsPayload;
    exports.OrganizationExistsQuery = OrganizationExistsQuery;
    exports.OrganizationInvite = OrganizationInvite;
    exports.OrganizationInviteConnection = OrganizationInviteConnection;
    exports.OrganizationInviteCreateMutation = OrganizationInviteCreateMutation;
    exports.OrganizationInviteDeleteMutation = OrganizationInviteDeleteMutation;
    exports.OrganizationInvitePayload = OrganizationInvitePayload;
    exports.OrganizationInviteQuery = OrganizationInviteQuery;
    exports.OrganizationInvite_IssuesQuery = OrganizationInvite_IssuesQuery;
    exports.OrganizationInvitesQuery = OrganizationInvitesQuery;
    exports.OrganizationPayload = OrganizationPayload;
    exports.OrganizationQuery = OrganizationQuery;
    exports.OrganizationUpdateMutation = OrganizationUpdateMutation;
    exports.Organization_IntegrationsQuery = Organization_IntegrationsQuery;
    exports.Organization_MilestonesQuery = Organization_MilestonesQuery;
    exports.Organization_TeamsQuery = Organization_TeamsQuery;
    exports.Organization_UsersQuery = Organization_UsersQuery;
    exports.OtherLinearError = OtherLinearError;
    exports.PageInfo = PageInfo;
    exports.Project = Project;
    exports.ProjectArchiveMutation = ProjectArchiveMutation;
    exports.ProjectConnection = ProjectConnection;
    exports.ProjectCreateMutation = ProjectCreateMutation;
    exports.ProjectLink = ProjectLink;
    exports.ProjectLinkConnection = ProjectLinkConnection;
    exports.ProjectLinkCreateMutation = ProjectLinkCreateMutation;
    exports.ProjectLinkDeleteMutation = ProjectLinkDeleteMutation;
    exports.ProjectLinkPayload = ProjectLinkPayload;
    exports.ProjectLinkQuery = ProjectLinkQuery;
    exports.ProjectLinksQuery = ProjectLinksQuery;
    exports.ProjectPayload = ProjectPayload;
    exports.ProjectQuery = ProjectQuery;
    exports.ProjectUpdateMutation = ProjectUpdateMutation;
    exports.Project_IssuesQuery = Project_IssuesQuery;
    exports.Project_LinksQuery = Project_LinksQuery;
    exports.Project_MembersQuery = Project_MembersQuery;
    exports.Project_TeamsQuery = Project_TeamsQuery;
    exports.ProjectsQuery = ProjectsQuery;
    exports.PullRequestPayload = PullRequestPayload;
    exports.PushSubscription = PushSubscription;
    exports.PushSubscriptionConnection = PushSubscriptionConnection;
    exports.PushSubscriptionCreateMutation = PushSubscriptionCreateMutation;
    exports.PushSubscriptionDeleteMutation = PushSubscriptionDeleteMutation;
    exports.PushSubscriptionPayload = PushSubscriptionPayload;
    exports.PushSubscriptionTestQuery = PushSubscriptionTestQuery;
    exports.RatelimitedLinearError = RatelimitedLinearError;
    exports.Reaction = Reaction;
    exports.ReactionConnection = ReactionConnection;
    exports.ReactionCreateMutation = ReactionCreateMutation;
    exports.ReactionDeleteMutation = ReactionDeleteMutation;
    exports.ReactionPayload = ReactionPayload;
    exports.ReactionQuery = ReactionQuery;
    exports.ReactionsQuery = ReactionsQuery;
    exports.RefreshGoogleSheetsDataMutation = RefreshGoogleSheetsDataMutation;
    exports.Request = Request;
    exports.ResentOrganizationInviteMutation = ResentOrganizationInviteMutation;
    exports.RotateSecretPayload = RotateSecretPayload;
    exports.SamlConfiguration = SamlConfiguration;
    exports.SamlTokenUserAccountAuthMutation = SamlTokenUserAccountAuthMutation;
    exports.SentryIssuePayload = SentryIssuePayload;
    exports.SentrySettings = SentrySettings;
    exports.SlackPostSettings = SlackPostSettings;
    exports.SsoUrlFromEmailQuery = SsoUrlFromEmailQuery;
    exports.SsoUrlFromEmailResponse = SsoUrlFromEmailResponse;
    exports.StepsResponse = StepsResponse;
    exports.Subscription = Subscription;
    exports.SubscriptionArchiveMutation = SubscriptionArchiveMutation;
    exports.SubscriptionPayload = SubscriptionPayload;
    exports.SubscriptionQuery = SubscriptionQuery;
    exports.SubscriptionSessionCreateMutation = SubscriptionSessionCreateMutation;
    exports.SubscriptionSessionPayload = SubscriptionSessionPayload;
    exports.SubscriptionUpdateMutation = SubscriptionUpdateMutation;
    exports.SubscriptionUpdateSessionCreateMutation = SubscriptionUpdateSessionCreateMutation;
    exports.SubscriptionUpgradeMutation = SubscriptionUpgradeMutation;
    exports.SyncBootstrapQuery = SyncBootstrapQuery;
    exports.SyncResponse = SyncResponse;
    exports.SynchronizedPayload = SynchronizedPayload;
    exports.Team = Team;
    exports.TeamArchiveMutation = TeamArchiveMutation;
    exports.TeamConnection = TeamConnection;
    exports.TeamCreateMutation = TeamCreateMutation;
    exports.TeamDeleteMutation = TeamDeleteMutation;
    exports.TeamMembership = TeamMembership;
    exports.TeamMembershipConnection = TeamMembershipConnection;
    exports.TeamMembershipCreateMutation = TeamMembershipCreateMutation;
    exports.TeamMembershipDeleteMutation = TeamMembershipDeleteMutation;
    exports.TeamMembershipPayload = TeamMembershipPayload;
    exports.TeamMembershipQuery = TeamMembershipQuery;
    exports.TeamMembershipUpdateMutation = TeamMembershipUpdateMutation;
    exports.TeamMembershipsQuery = TeamMembershipsQuery;
    exports.TeamPayload = TeamPayload;
    exports.TeamQuery = TeamQuery;
    exports.TeamUpdateMutation = TeamUpdateMutation;
    exports.Team_CyclesQuery = Team_CyclesQuery;
    exports.Team_IssuesQuery = Team_IssuesQuery;
    exports.Team_LabelsQuery = Team_LabelsQuery;
    exports.Team_MembersQuery = Team_MembersQuery;
    exports.Team_MembershipsQuery = Team_MembershipsQuery;
    exports.Team_ProjectsQuery = Team_ProjectsQuery;
    exports.Team_StatesQuery = Team_StatesQuery;
    exports.Team_TemplatesQuery = Team_TemplatesQuery;
    exports.Team_WebhooksQuery = Team_WebhooksQuery;
    exports.TeamsQuery = TeamsQuery;
    exports.Template = Template;
    exports.TemplateConnection = TemplateConnection;
    exports.TemplateCreateMutation = TemplateCreateMutation;
    exports.TemplateDeleteMutation = TemplateDeleteMutation;
    exports.TemplatePayload = TemplatePayload;
    exports.TemplateQuery = TemplateQuery;
    exports.TemplateUpdateMutation = TemplateUpdateMutation;
    exports.TemplatesQuery = TemplatesQuery;
    exports.UnknownLinearError = UnknownLinearError;
    exports.UploadFile = UploadFile;
    exports.UploadFileHeader = UploadFileHeader;
    exports.UploadPayload = UploadPayload;
    exports.User = User;
    exports.UserAccount = UserAccount;
    exports.UserAdminPayload = UserAdminPayload;
    exports.UserAuthorizedApplication = UserAuthorizedApplication;
    exports.UserConnection = UserConnection;
    exports.UserDemoteAdminMutation = UserDemoteAdminMutation;
    exports.UserFlagUpdateMutation = UserFlagUpdateMutation;
    exports.UserLinearError = UserLinearError;
    exports.UserPayload = UserPayload;
    exports.UserPromoteAdminMutation = UserPromoteAdminMutation;
    exports.UserQuery = UserQuery;
    exports.UserSettings = UserSettings;
    exports.UserSettingsFlagIncrementMutation = UserSettingsFlagIncrementMutation;
    exports.UserSettingsFlagPayload = UserSettingsFlagPayload;
    exports.UserSettingsFlagsResetMutation = UserSettingsFlagsResetMutation;
    exports.UserSettingsFlagsResetPayload = UserSettingsFlagsResetPayload;
    exports.UserSettingsPayload = UserSettingsPayload;
    exports.UserSettingsQuery = UserSettingsQuery;
    exports.UserSettingsUpdateMutation = UserSettingsUpdateMutation;
    exports.UserSubscribeToNewsletterMutation = UserSubscribeToNewsletterMutation;
    exports.UserSubscribeToNewsletterPayload = UserSubscribeToNewsletterPayload;
    exports.UserSuspendMutation = UserSuspendMutation;
    exports.UserUnsuspendMutation = UserUnsuspendMutation;
    exports.UserUpdateMutation = UserUpdateMutation;
    exports.User_AssignedIssuesQuery = User_AssignedIssuesQuery;
    exports.User_CreatedIssuesQuery = User_CreatedIssuesQuery;
    exports.User_TeamMembershipsQuery = User_TeamMembershipsQuery;
    exports.User_TeamsQuery = User_TeamsQuery;
    exports.UsersQuery = UsersQuery;
    exports.ViewPreferences = ViewPreferences;
    exports.ViewPreferencesCreateMutation = ViewPreferencesCreateMutation;
    exports.ViewPreferencesDeleteMutation = ViewPreferencesDeleteMutation;
    exports.ViewPreferencesPayload = ViewPreferencesPayload;
    exports.ViewPreferencesUpdateMutation = ViewPreferencesUpdateMutation;
    exports.ViewerQuery = ViewerQuery;
    exports.Viewer_AssignedIssuesQuery = Viewer_AssignedIssuesQuery;
    exports.Viewer_CreatedIssuesQuery = Viewer_CreatedIssuesQuery;
    exports.Viewer_TeamMembershipsQuery = Viewer_TeamMembershipsQuery;
    exports.Viewer_TeamsQuery = Viewer_TeamsQuery;
    exports.Webhook = Webhook;
    exports.WebhookConnection = WebhookConnection;
    exports.WebhookCreateMutation = WebhookCreateMutation;
    exports.WebhookDeleteMutation = WebhookDeleteMutation;
    exports.WebhookPayload = WebhookPayload;
    exports.WebhookQuery = WebhookQuery;
    exports.WebhookUpdateMutation = WebhookUpdateMutation;
    exports.WebhooksQuery = WebhooksQuery;
    exports.WorkflowState = WorkflowState;
    exports.WorkflowStateArchiveMutation = WorkflowStateArchiveMutation;
    exports.WorkflowStateConnection = WorkflowStateConnection;
    exports.WorkflowStateCreateMutation = WorkflowStateCreateMutation;
    exports.WorkflowStatePayload = WorkflowStatePayload;
    exports.WorkflowStateQuery = WorkflowStateQuery;
    exports.WorkflowStateUpdateMutation = WorkflowStateUpdateMutation;
    exports.WorkflowState_IssuesQuery = WorkflowState_IssuesQuery;
    exports.WorkflowStatesQuery = WorkflowStatesQuery;
    exports.ZendeskSettings = ZendeskSettings;
    exports.parseLinearError = parseLinearError;

})));
//# sourceMappingURL=index-umd.js.map
